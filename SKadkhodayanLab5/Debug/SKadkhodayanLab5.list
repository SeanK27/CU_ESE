
SKadkhodayanLab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003d90  08003d90  00004d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e14  08003e14  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003e14  08003e14  00004e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e1c  08003e1c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e1c  08003e1c  00004e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e20  08003e20  00004e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003e24  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000002e0  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000348  20000348  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000073f3  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019f1  00000000  00000000  0000c48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e0  00000000  00000000  0000de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bf  00000000  00000000  0000e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bc7  00000000  00000000  0000ec1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a38e  00000000  00000000  000327e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d25e3  00000000  00000000  0003cb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f157  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002810  00000000  00000000  0010f19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001119ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003d78 	.word	0x08003d78

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08003d78 	.word	0x08003d78

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <InitializeUserButton>:

    // Deactivate the red LED
	HAL_GPIO_WritePin(GPIOG, LED_RED_PIN, RESET);
}

void InitializeUserButton() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    
    // Initialize the user button
	User_Button_Init();
 8000584:	f000 f88e 	bl	80006a4 <User_Button_Init>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <AppDelay>:
        // Turn off the green LED
        deactivateGreenLED();
    }
}

void AppDelay(uint32_t time) {
 800058c:	b480      	push	{r7}
 800058e:	b087      	sub	sp, #28
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

	// Create two arrays to store the name
	char sean[NAMELENGTH] = {'S', 'E', 'A', 'N'};
 8000594:	4b13      	ldr	r3, [pc, #76]	@ (80005e4 <AppDelay+0x58>)
 8000596:	60fb      	str	r3, [r7, #12]
	[[maybe_unused]] char destinationArray[NAMELENGTH];

	// Iterate through the array to create a crude delay function
	for (int i = 0; i < time; i++) {
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	e016      	b.n	80005cc <AppDelay+0x40>

		for (int j = 0; j < NAMELENGTH; j++) {
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
 80005a2:	e00d      	b.n	80005c0 <AppDelay+0x34>

			destinationArray[j] = sean[j];
 80005a4:	f107 020c 	add.w	r2, r7, #12
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	4413      	add	r3, r2
 80005ac:	7819      	ldrb	r1, [r3, #0]
 80005ae:	f107 0208 	add.w	r2, r7, #8
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	4413      	add	r3, r2
 80005b6:	460a      	mov	r2, r1
 80005b8:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < NAMELENGTH; j++) {
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	3301      	adds	r3, #1
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	ddee      	ble.n	80005a4 <AppDelay+0x18>
	for (int i = 0; i < time; i++) {
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3301      	adds	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d8e4      	bhi.n	800059e <AppDelay+0x12>
		}
	}
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	371c      	adds	r7, #28
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	4e414553 	.word	0x4e414553

080005e8 <applicationInit>:

void applicationInit() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

    // Initialize Gyro
    Gyro_Init();
 80005ec:	f000 f89e 	bl	800072c <Gyro_Init>

    // Initialize the GPIOA clock
	User_Button_Enable_Clock();
 80005f0:	f000 f83e 	bl	8000670 <User_Button_Enable_Clock>

    // Initialize the user button
    InitializeUserButton();
 80005f4:	f7ff ffc4 	bl	8000580 <InitializeUserButton>

    // Add Gyro ID event to scheduler
    addSchedulerEvent(APP_DELAY_FLAG_EVENT);
 80005f8:	2010      	movs	r0, #16
 80005fa:	f000 fa69 	bl	8000ad0 <addSchedulerEvent>

    // Add Gyro power on event to scheduler
    addSchedulerEvent(DEVICE_ID_AND_TEMP_EVENT);
 80005fe:	2020      	movs	r0, #32
 8000600:	f000 fa66 	bl	8000ad0 <addSchedulerEvent>

    // Compiler flags to only compile interrupt code if the flag is 1
    #if USE_INTERRUPT_FOR_BUTTON == 1

        // Initialize the user button as an interrupt
        InitializeUserButtonAsInterrupt();
 8000604:	f000 f802 	bl	800060c <InitializeUserButtonAsInterrupt>
        // Add button polling event to scheduler
        addSchedulerEvent(POLL_BUTTON_EVENT);

    #endif

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <InitializeUserButtonAsInterrupt>:

// Compiler flags to only compile interrupt code if the flag is 1
#if USE_INTERRUPT_FOR_BUTTON == 1

void InitializeUserButtonAsInterrupt() {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    
    // Initialize the user button as an interrupt
    User_Button_Interrupt_Enable();
 8000610:	f000 f868 	bl	80006e4 <User_Button_Interrupt_Enable>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

    // Disable the interrupt so it doesn't trigger during execution
    NVIC_Disable_Interrupt(EXTI0_IRQ_NUM);
 800061c:	2006      	movs	r0, #6
 800061e:	f000 fa24 	bl	8000a6a <NVIC_Disable_Interrupt>

    // Get the Gyro ID
    getGyroID();
 8000622:	f000 f80d 	bl	8000640 <getGyroID>

    // Get the Gyro temperature
    getGyroTemperature();
 8000626:	f000 f817 	bl	8000658 <getGyroTemperature>

    // Clear the pending bit to allow for another interrupt in the future
    NVIC_Clear_Pending_EXTI_Bit(USER_BUTTON_PIN);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 fa38 	bl	8000aa0 <NVIC_Clear_Pending_EXTI_Bit>

    // Clear the pending interrupt in the NVIC register to prevent another 
    NVIC_Clear_Pending_Interrupt(EXTI0_IRQ_NUM);
 8000630:	2006      	movs	r0, #6
 8000632:	f000 fa27 	bl	8000a84 <NVIC_Clear_Pending_Interrupt>

    // Re-enable the interrupt
    NVIC_Enable_Interrupt(EXTI0_IRQ_NUM);
 8000636:	2006      	movs	r0, #6
 8000638:	f000 fa0a 	bl	8000a50 <NVIC_Enable_Interrupt>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}

08000640 <getGyroID>:

#endif

void getGyroID(){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
    
    Gyro_GetID();
 8000644:	f000 f92c 	bl	80008a0 <Gyro_GetID>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <powerOnGyro>:

void powerOnGyro(){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    
    Gyro_PowerON();
 8000650:	f000 f954 	bl	80008fc <Gyro_PowerON>
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <getGyroTemperature>:

void getGyroTemperature(){
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    
    Gyro_GetTemperature();
 800065c:	f000 f972 	bl	8000944 <Gyro_GetTemperature>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <configureGyro>:

void configureGyro(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    
    Gyro_Config();
 8000668:	f000 f99a 	bl	80009a0 <Gyro_Config>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}

08000670 <User_Button_Enable_Clock>:

//GPIO_PinConfig_t GPIOConfig = {0};

GPIO_InitTypeDef* GPIOConfigH = {0};

void User_Button_Enable_Clock() {
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
    // Enable the clock for the user button
//    RCC->AHB1ENR |= (1 << USER_BUTTON_PORT);

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <User_Button_Enable_Clock+0x30>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <User_Button_Enable_Clock+0x30>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <User_Button_Enable_Clock+0x30>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <User_Button_Init>:

void User_Button_Init() {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
//    GPIOConfig.PinNumber = USER_BUTTON_PIN;
//    GPIOConfig.PinMode = GPIO_PinMode_Input;
//    GPIOConfig.PinSpeed = GPIO_Speed_Medium;
//    GPIOConfig.PinPuPdControl = GPIO_PUPDR_PD;

	GPIOConfigH->Pin = GPIO_PIN_0;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <User_Button_Init+0x38>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2201      	movs	r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
	GPIOConfigH->Mode = GPIO_MODE_INPUT;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <User_Button_Init+0x38>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
	GPIOConfigH->Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006b8:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <User_Button_Init+0x38>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2201      	movs	r2, #1
 80006be:	60da      	str	r2, [r3, #12]
	GPIOConfigH->Pull = GPIO_PULLDOWN;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <User_Button_Init+0x38>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2202      	movs	r2, #2
 80006c6:	609a      	str	r2, [r3, #8]

    // Enable the clock for the user button
    User_Button_Enable_Clock();
 80006c8:	f7ff ffd2 	bl	8000670 <User_Button_Enable_Clock>

    // Initialize the GPIO Pin
//    GPIO_Init(GPIOA, GPIOConfig);

    HAL_GPIO_Init(GPIOA, GPIOConfigH);
 80006cc:	4b03      	ldr	r3, [pc, #12]	@ (80006dc <User_Button_Init+0x38>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4803      	ldr	r0, [pc, #12]	@ (80006e0 <User_Button_Init+0x3c>)
 80006d4:	f001 f864 	bl	80017a0 <HAL_GPIO_Init>
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000084 	.word	0x20000084
 80006e0:	40020000 	.word	0x40020000

080006e4 <User_Button_Interrupt_Enable>:
	else {
		return false;
	}
}

void User_Button_Interrupt_Enable() {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
//    GPIOConfig.PinMode = GPIO_PinMode_Input;
//    GPIOConfig.PinSpeed = GPIO_Speed_Medium;
//    GPIOConfig.PinPuPdControl = GPIO_PUPDR_PD;
//    GPIOConfig.PinInterruptMode = GPIO_PinInterrupt_RisingFallingEdge;

	GPIOConfigH->Pin = GPIO_PIN_0;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <User_Button_Interrupt_Enable+0x40>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2201      	movs	r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
	GPIOConfigH->Mode = GPIO_MODE_INPUT;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <User_Button_Interrupt_Enable+0x40>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
	GPIOConfigH->Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000724 <User_Button_Interrupt_Enable+0x40>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
	GPIOConfigH->Pull = GPIO_PULLDOWN;
 8000700:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <User_Button_Interrupt_Enable+0x40>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2202      	movs	r2, #2
 8000706:	609a      	str	r2, [r3, #8]

    // Enable the clock for the user button
    User_Button_Enable_Clock();
 8000708:	f7ff ffb2 	bl	8000670 <User_Button_Enable_Clock>

    // Initialize the GPIO Pin
//    GPIO_Init(GPIOA, GPIOConfig);

    HAL_GPIO_Init(GPIOA, GPIOConfigH);
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <User_Button_Interrupt_Enable+0x40>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	@ (8000728 <User_Button_Interrupt_Enable+0x44>)
 8000714:	f001 f844 	bl	80017a0 <HAL_GPIO_Init>

    // Enable the interrupt in the EXTI register
//    GPIO_InterruptConfig(6, ENABLE);

    HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUM);
 8000718:	2006      	movs	r0, #6
 800071a:	f001 f80a 	bl	8001732 <HAL_NVIC_EnableIRQ>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000084 	.word	0x20000084
 8000728:	40020000 	.word	0x40020000

0800072c <Gyro_Init>:
static HAL_StatusTypeDef HALStatus;

// SPI Send Structure for Gyro |(DATA)|(ADDRESS)|(MS)|(READ/WRITE)|
//                  Bit Number | 15-8 |   7-2   |  1 |     0      |

void Gyro_Init(){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
	// Enable the SPI5 peripheral
	__HAL_RCC_SPI5_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	4b53      	ldr	r3, [pc, #332]	@ (8000884 <Gyro_Init+0x158>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073a:	4a52      	ldr	r2, [pc, #328]	@ (8000884 <Gyro_Init+0x158>)
 800073c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000740:	6453      	str	r3, [r2, #68]	@ 0x44
 8000742:	4b50      	ldr	r3, [pc, #320]	@ (8000884 <Gyro_Init+0x158>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]

	// Enable the GPIOF peripheral
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	4b4c      	ldr	r3, [pc, #304]	@ (8000884 <Gyro_Init+0x158>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a4b      	ldr	r2, [pc, #300]	@ (8000884 <Gyro_Init+0x158>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b49      	ldr	r3, [pc, #292]	@ (8000884 <Gyro_Init+0x158>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0320 	and.w	r3, r3, #32
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]

	// Enable the GPIOC peripheral
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b45      	ldr	r3, [pc, #276]	@ (8000884 <Gyro_Init+0x158>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a44      	ldr	r2, [pc, #272]	@ (8000884 <Gyro_Init+0x158>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b42      	ldr	r3, [pc, #264]	@ (8000884 <Gyro_Init+0x158>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

	// Enable the GPIOA peripheral
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <Gyro_Init+0x158>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a3d      	ldr	r2, [pc, #244]	@ (8000884 <Gyro_Init+0x158>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b3b      	ldr	r3, [pc, #236]	@ (8000884 <Gyro_Init+0x158>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

	// Set up the GPIO for SPI5
	gyro.Pin = SPI5_SCK_PIN | SPI5_MISO_PIN | SPI5_MOSI_PIN;
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <Gyro_Init+0x15c>)
 80007a4:	f44f 7260 	mov.w	r2, #896	@ 0x380
 80007a8:	601a      	str	r2, [r3, #0]
	gyro.Mode = GPIO_MODE_AF_PP;
 80007aa:	4b37      	ldr	r3, [pc, #220]	@ (8000888 <Gyro_Init+0x15c>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	605a      	str	r2, [r3, #4]
	gyro.Pull = GPIO_PULLUP;
 80007b0:	4b35      	ldr	r3, [pc, #212]	@ (8000888 <Gyro_Init+0x15c>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	609a      	str	r2, [r3, #8]
	gyro.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	4b34      	ldr	r3, [pc, #208]	@ (8000888 <Gyro_Init+0x15c>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	60da      	str	r2, [r3, #12]
	gyro.Alternate = GPIO_AF5_SPI5;
 80007bc:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <Gyro_Init+0x15c>)
 80007be:	2205      	movs	r2, #5
 80007c0:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOF, &gyro);
 80007c2:	4931      	ldr	r1, [pc, #196]	@ (8000888 <Gyro_Init+0x15c>)
 80007c4:	4831      	ldr	r0, [pc, #196]	@ (800088c <Gyro_Init+0x160>)
 80007c6:	f000 ffeb 	bl	80017a0 <HAL_GPIO_Init>

	// Set up the GPIO for NCS_MEMS_SPI_PIN
	gyro.Pin = NCS_MEMS_SPI_PIN;
 80007ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <Gyro_Init+0x15c>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	601a      	str	r2, [r3, #0]
	gyro.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000888 <Gyro_Init+0x15c>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	605a      	str	r2, [r3, #4]
	gyro.Pull = GPIO_PULLUP;
 80007d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <Gyro_Init+0x15c>)
 80007d8:	2201      	movs	r2, #1
 80007da:	609a      	str	r2, [r3, #8]
	gyro.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000888 <Gyro_Init+0x15c>)
 80007de:	2203      	movs	r2, #3
 80007e0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &gyro);
 80007e2:	4929      	ldr	r1, [pc, #164]	@ (8000888 <Gyro_Init+0x15c>)
 80007e4:	482a      	ldr	r0, [pc, #168]	@ (8000890 <Gyro_Init+0x164>)
 80007e6:	f000 ffdb 	bl	80017a0 <HAL_GPIO_Init>

	// Set up the GPIO for MEMS_INT2_PIN
	gyro.Pin = MEMS_INT2_PIN;
 80007ea:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <Gyro_Init+0x15c>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	601a      	str	r2, [r3, #0]
	gyro.Mode = GPIO_MODE_INPUT;
 80007f0:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <Gyro_Init+0x15c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
	gyro.Pull = GPIO_PULLUP;
 80007f6:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <Gyro_Init+0x15c>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	609a      	str	r2, [r3, #8]
	gyro.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <Gyro_Init+0x15c>)
 80007fe:	2203      	movs	r2, #3
 8000800:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &gyro);
 8000802:	4921      	ldr	r1, [pc, #132]	@ (8000888 <Gyro_Init+0x15c>)
 8000804:	4823      	ldr	r0, [pc, #140]	@ (8000894 <Gyro_Init+0x168>)
 8000806:	f000 ffcb 	bl	80017a0 <HAL_GPIO_Init>

	// Set up the GPIO for MEMS_INT1_PIN
	gyro.Pin = MEMS_INT1_PIN;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <Gyro_Init+0x15c>)
 800080c:	2202      	movs	r2, #2
 800080e:	601a      	str	r2, [r3, #0]
	gyro.Mode = GPIO_MODE_INPUT;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <Gyro_Init+0x15c>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
	gyro.Pull = GPIO_PULLUP;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <Gyro_Init+0x15c>)
 8000818:	2201      	movs	r2, #1
 800081a:	609a      	str	r2, [r3, #8]
	gyro.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <Gyro_Init+0x15c>)
 800081e:	2203      	movs	r2, #3
 8000820:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &gyro);
 8000822:	4919      	ldr	r1, [pc, #100]	@ (8000888 <Gyro_Init+0x15c>)
 8000824:	481b      	ldr	r0, [pc, #108]	@ (8000894 <Gyro_Init+0x168>)
 8000826:	f000 ffbb 	bl	80017a0 <HAL_GPIO_Init>

	// Set up the SPI for Gyro
	SPI.Instance = SPI5;
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <Gyro_Init+0x16c>)
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <Gyro_Init+0x170>)
 800082e:	601a      	str	r2, [r3, #0]
	SPI.Init.Mode = SPI_MODE_MASTER;
 8000830:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <Gyro_Init+0x16c>)
 8000832:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000836:	605a      	str	r2, [r3, #4]
	SPI.Init.Direction = SPI_DIRECTION_2LINES;
 8000838:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <Gyro_Init+0x16c>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
	SPI.Init.DataSize = SPI_DATASIZE_8BIT;
 800083e:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <Gyro_Init+0x16c>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
	SPI.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <Gyro_Init+0x16c>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
	SPI.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <Gyro_Init+0x16c>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
	SPI.Init.NSS = SPI_NSS_SOFT;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <Gyro_Init+0x16c>)
 8000852:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000856:	619a      	str	r2, [r3, #24]
	SPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <Gyro_Init+0x16c>)
 800085a:	2238      	movs	r2, #56	@ 0x38
 800085c:	61da      	str	r2, [r3, #28]
	SPI.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <Gyro_Init+0x16c>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
	SPI.Init.TIMode = SPI_TIMODE_DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <Gyro_Init+0x16c>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
	SPI.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <Gyro_Init+0x16c>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
	SPI.Init.CRCPolynomial = 10;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <Gyro_Init+0x16c>)
 8000872:	220a      	movs	r2, #10
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_SPI_Init(&SPI);
 8000876:	4808      	ldr	r0, [pc, #32]	@ (8000898 <Gyro_Init+0x16c>)
 8000878:	f001 fdbc 	bl	80023f4 <HAL_SPI_Init>
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	20000088 	.word	0x20000088
 800088c:	40021400 	.word	0x40021400
 8000890:	40020800 	.word	0x40020800
 8000894:	40020000 	.word	0x40020000
 8000898:	2000009c 	.word	0x2000009c
 800089c:	40015000 	.word	0x40015000

080008a0 <Gyro_GetID>:

void Gyro_GetID() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af02      	add	r7, sp, #8
	uint16_t targetRegister = WHO_AM_I;
 80008a6:	230f      	movs	r3, #15
 80008a8:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSend = (READ) | (0 << 1) | (targetRegister << 2) | (0);		// Send |00000000|001111|0|1| to WHO_AM_I
 80008aa:	88fb      	ldrh	r3, [r7, #6]
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	80bb      	strh	r3, [r7, #4]
	uint16_t dataReceive;

	Gyro_EnableSlaveComms();
 80008ba:	f000 f8b1 	bl	8000a20 <Gyro_EnableSlaveComms>
	HALStatus = HAL_SPI_TransmitReceive(&SPI, &dataSend, &dataReceive, 2, TIMEOUT);
 80008be:	1cba      	adds	r2, r7, #2
 80008c0:	1d39      	adds	r1, r7, #4
 80008c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2302      	movs	r3, #2
 80008ca:	4809      	ldr	r0, [pc, #36]	@ (80008f0 <Gyro_GetID+0x50>)
 80008cc:	f001 ff5f 	bl	800278e <HAL_SPI_TransmitReceive>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b07      	ldr	r3, [pc, #28]	@ (80008f4 <Gyro_GetID+0x54>)
 80008d6:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 80008d8:	f000 f8ae 	bl	8000a38 <Gyro_DisableSlaveComms>

	printf("WHO_AM_I: %x\n", dataReceive);
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <Gyro_GetID+0x58>)
 80008e2:	f002 fbdb 	bl	800309c <iprintf>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000009c 	.word	0x2000009c
 80008f4:	200000f4 	.word	0x200000f4
 80008f8:	08003d90 	.word	0x08003d90

080008fc <Gyro_PowerON>:

void Gyro_PowerON() {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
	uint16_t targetRegister = CTRL_REG1;
 8000902:	2320      	movs	r3, #32
 8000904:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSend = (WRITE) | (0 << 1) | (targetRegister << 2) | (0x0F << 8);		// Send |00001111|001000|0|0| to CTRL_REG1
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	b21b      	sxth	r3, r3
 800090c:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000910:	b21b      	sxth	r3, r3
 8000912:	b29b      	uxth	r3, r3
 8000914:	80bb      	strh	r3, [r7, #4]

	Gyro_EnableSlaveComms();
 8000916:	f000 f883 	bl	8000a20 <Gyro_EnableSlaveComms>
	HALStatus = HAL_SPI_Transmit(&SPI, &dataSend, 2, TIMEOUT);
 800091a:	1d39      	adds	r1, r7, #4
 800091c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000920:	2202      	movs	r2, #2
 8000922:	4806      	ldr	r0, [pc, #24]	@ (800093c <Gyro_PowerON+0x40>)
 8000924:	f001 fdef 	bl	8002506 <HAL_SPI_Transmit>
 8000928:	4603      	mov	r3, r0
 800092a:	461a      	mov	r2, r3
 800092c:	4b04      	ldr	r3, [pc, #16]	@ (8000940 <Gyro_PowerON+0x44>)
 800092e:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 8000930:	f000 f882 	bl	8000a38 <Gyro_DisableSlaveComms>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000009c 	.word	0x2000009c
 8000940:	200000f4 	.word	0x200000f4

08000944 <Gyro_GetTemperature>:

void Gyro_GetTemperature() {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af02      	add	r7, sp, #8
	uint16_t targetRegister = OUT_TEMP;
 800094a:	2326      	movs	r3, #38	@ 0x26
 800094c:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSend = (READ) | (0 << 1) | (targetRegister << 2) | (0);		// Send |00000000|100110|0|1| to CTRL_REG1
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	b21b      	sxth	r3, r3
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	b21b      	sxth	r3, r3
 800095a:	b29b      	uxth	r3, r3
 800095c:	80bb      	strh	r3, [r7, #4]
	uint16_t dataReceive;

	Gyro_EnableSlaveComms();
 800095e:	f000 f85f 	bl	8000a20 <Gyro_EnableSlaveComms>
	HALStatus = HAL_SPI_TransmitReceive(&SPI, &dataSend, &dataReceive, 2, TIMEOUT);
 8000962:	1cba      	adds	r2, r7, #2
 8000964:	1d39      	adds	r1, r7, #4
 8000966:	f241 3388 	movw	r3, #5000	@ 0x1388
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2302      	movs	r3, #2
 800096e:	4809      	ldr	r0, [pc, #36]	@ (8000994 <Gyro_GetTemperature+0x50>)
 8000970:	f001 ff0d 	bl	800278e <HAL_SPI_TransmitReceive>
 8000974:	4603      	mov	r3, r0
 8000976:	461a      	mov	r2, r3
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <Gyro_GetTemperature+0x54>)
 800097a:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 800097c:	f000 f85c 	bl	8000a38 <Gyro_DisableSlaveComms>

	printf("CTRL_REG1: %d\n", dataReceive);
 8000980:	887b      	ldrh	r3, [r7, #2]
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <Gyro_GetTemperature+0x58>)
 8000986:	f002 fb89 	bl	800309c <iprintf>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000009c 	.word	0x2000009c
 8000998:	200000f4 	.word	0x200000f4
 800099c:	08003da0 	.word	0x08003da0

080009a0 <Gyro_Config>:

void Gyro_Config() {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

	// Set up the SPI for 100Hz, 25 Cutoff, Normal Mode, All axis enabled
	uint16_t targetRegister = CTRL_REG1;
 80009a6:	2320      	movs	r3, #32
 80009a8:	80fb      	strh	r3, [r7, #6]
	uint16_t dataSend = (WRITE) | (0 << 1) | (targetRegister << 2) | (0x2F << 8);		// Send |00101111|001000|0|0| to CTRL_REG1
 80009aa:	88fb      	ldrh	r3, [r7, #6]
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	f443 533c 	orr.w	r3, r3, #12032	@ 0x2f00
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	80bb      	strh	r3, [r7, #4]

	Gyro_EnableSlaveComms();
 80009ba:	f000 f831 	bl	8000a20 <Gyro_EnableSlaveComms>
	HALStatus = HAL_SPI_Transmit(&SPI, &dataSend, 2, TIMEOUT);
 80009be:	1d39      	adds	r1, r7, #4
 80009c0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009c4:	2202      	movs	r2, #2
 80009c6:	4814      	ldr	r0, [pc, #80]	@ (8000a18 <Gyro_Config+0x78>)
 80009c8:	f001 fd9d 	bl	8002506 <HAL_SPI_Transmit>
 80009cc:	4603      	mov	r3, r0
 80009ce:	461a      	mov	r2, r3
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <Gyro_Config+0x7c>)
 80009d2:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 80009d4:	f000 f830 	bl	8000a38 <Gyro_DisableSlaveComms>

	// Set up the SPI for REBOOT enabled, FIFO disabled, High Pass Filter enabled
	targetRegister = CTRL_REG5;
 80009d8:	2324      	movs	r3, #36	@ 0x24
 80009da:	80fb      	strh	r3, [r7, #6]
	dataSend = (WRITE) | (0 << 1) | (targetRegister << 2) | (0x80 << 8);		// Send |1000 0000|100001|0|0| to CTRL_REG5
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80009e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	80bb      	strh	r3, [r7, #4]
	Gyro_EnableSlaveComms();
 80009f0:	f000 f816 	bl	8000a20 <Gyro_EnableSlaveComms>
	HALStatus = HAL_SPI_Transmit(&SPI, &dataSend, 2, TIMEOUT);
 80009f4:	1d39      	adds	r1, r7, #4
 80009f6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009fa:	2202      	movs	r2, #2
 80009fc:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <Gyro_Config+0x78>)
 80009fe:	f001 fd82 	bl	8002506 <HAL_SPI_Transmit>
 8000a02:	4603      	mov	r3, r0
 8000a04:	461a      	mov	r2, r3
 8000a06:	4b05      	ldr	r3, [pc, #20]	@ (8000a1c <Gyro_Config+0x7c>)
 8000a08:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 8000a0a:	f000 f815 	bl	8000a38 <Gyro_DisableSlaveComms>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000009c 	.word	0x2000009c
 8000a1c:	200000f4 	.word	0x200000f4

08000a20 <Gyro_EnableSlaveComms>:
	if(HALStatus != HAL_OK){
		APPLICATION_ASSERT(false);
	}
}

void Gyro_EnableSlaveComms() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_PIN, GPIO_PIN_RESET); // Set to LOW to enable SPI mode Pin PC1
 8000a24:	2200      	movs	r2, #0
 8000a26:	2102      	movs	r1, #2
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <Gyro_EnableSlaveComms+0x14>)
 8000a2a:	f001 f865 	bl	8001af8 <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020800 	.word	0x40020800

08000a38 <Gyro_DisableSlaveComms>:

void Gyro_DisableSlaveComms() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_PIN, GPIO_PIN_SET); 	// Set to HIGH to disable SPI mode Pin PC1
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2102      	movs	r1, #2
 8000a40:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <Gyro_DisableSlaveComms+0x14>)
 8000a42:	f001 f859 	bl	8001af8 <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40020800 	.word	0x40020800

08000a50 <NVIC_Enable_Interrupt>:
 *      Author: seank
 */

#include "InterruptControl.h"

void NVIC_Enable_Interrupt(uint8_t IRQnum) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
//    else {
//        // Enable the interrupt in the NVIC_ISER0 register
//        *NVIC_ISER1 |= (1 << (IRQnum % 32));
//    }

	HAL_NVIC_EnableIRQ(IRQnum);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fe68 	bl	8001732 <HAL_NVIC_EnableIRQ>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <NVIC_Disable_Interrupt>:

void NVIC_Disable_Interrupt(uint8_t IRQnum) {
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	4603      	mov	r3, r0
 8000a72:	71fb      	strb	r3, [r7, #7]
//    else {
//        // Disable the interrupt in the NVIC_ICER0 register
//        *NVIC_ICER1 |= (1 << (IRQnum % 32));
//    }

	HAL_NVIC_DisableIRQ(IRQnum);
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fe69 	bl	800174e <HAL_NVIC_DisableIRQ>

}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <NVIC_Clear_Pending_Interrupt>:

void NVIC_Clear_Pending_Interrupt(uint8_t IRQnum) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
//    else {
//        // Clear the pending interrupt in the NVIC_ICPR0 register
//        *NVIC_ICPR1 |= (1 << (IRQnum % 32));
//    }

	HAL_NVIC_ClearPendingIRQ(IRQnum);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fe76 	bl	8001782 <HAL_NVIC_ClearPendingIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <NVIC_Clear_Pending_EXTI_Bit>:

	HAL_NVIC_SetPendingIRQ(IRQnum);

}

void NVIC_Clear_Pending_EXTI_Bit(uint8_t pinNum) {
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	71fb      	strb	r3, [r7, #7]

    // Clear the pending bit in the EXTI register
    EXTI->PR |= (1 << pinNum);
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <NVIC_Clear_Pending_EXTI_Bit+0x2c>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <NVIC_Clear_Pending_EXTI_Bit+0x2c>)
 8000aba:	430b      	orrs	r3, r1
 8000abc:	6153      	str	r3, [r2, #20]
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40013c00 	.word	0x40013c00

08000ad0 <addSchedulerEvent>:

#include "Scheduler.h"

uint32_t ScheduledEvents = 0;

void addSchedulerEvent(uint32_t event) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

    // Add the event to the scheduled events
    ScheduledEvents |= event;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <addSchedulerEvent+0x20>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	4a03      	ldr	r2, [pc, #12]	@ (8000af0 <addSchedulerEvent+0x20>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	200000f8 	.word	0x200000f8

08000af4 <getScheduledEvents>:

    // Remove the event from the scheduled events
    ScheduledEvents &= ~event;
}

uint32_t getScheduledEvents() {
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

    // Return the scheduled events
    return ScheduledEvents;
 8000af8:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <getScheduledEvents+0x14>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	200000f8 	.word	0x200000f8

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b12:	f000 fc3f 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b16:	f000 f829 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1a:	f000 f8c9 	bl	8000cb0 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000b1e:	f000 f891 	bl	8000c44 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */

  applicationInit();
 8000b22:	f7ff fd61 	bl	80005e8 <applicationInit>
  powerOnGyro();
 8000b26:	f7ff fd91 	bl	800064c <powerOnGyro>
  HAL_Delay(500);
 8000b2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b2e:	f000 fca3 	bl	8001478 <HAL_Delay>
  getGyroID();
 8000b32:	f7ff fd85 	bl	8000640 <getGyroID>
  configureGyro();
 8000b36:	f7ff fd95 	bl	8000664 <configureGyro>

  uint32_t eventsToRun;
  eventsToRun = getScheduledEvents();
 8000b3a:	f7ff ffdb 	bl	8000af4 <getScheduledEvents>
 8000b3e:	6078      	str	r0, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    // Continuously check the scheduler for events to run
    eventsToRun = getScheduledEvents();
 8000b40:	f7ff ffd8 	bl	8000af4 <getScheduledEvents>
 8000b44:	6078      	str	r0, [r7, #4]

    if (eventsToRun & APP_DELAY_FLAG_EVENT) {
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <main+0x4c>
      AppDelay(DELAYMAGNIFIER);
 8000b50:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000b54:	f7ff fd1a 	bl	800058c <AppDelay>
    }

    if (eventsToRun & DEVICE_ID_AND_TEMP_EVENT) {
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0320 	and.w	r3, r3, #32
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0ee      	beq.n	8000b40 <main+0x34>
      getGyroID();
 8000b62:	f7ff fd6d 	bl	8000640 <getGyroID>
      getGyroTemperature();
 8000b66:	f7ff fd77 	bl	8000658 <getGyroTemperature>
    eventsToRun = getScheduledEvents();
 8000b6a:	e7e9      	b.n	8000b40 <main+0x34>

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	@ 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2230      	movs	r2, #48	@ 0x30
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 fae3 	bl	8003146 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b29      	ldr	r3, [pc, #164]	@ (8000c3c <SystemClock_Config+0xd0>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	4a28      	ldr	r2, [pc, #160]	@ (8000c3c <SystemClock_Config+0xd0>)
 8000b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba0:	4b26      	ldr	r3, [pc, #152]	@ (8000c3c <SystemClock_Config+0xd0>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4b23      	ldr	r3, [pc, #140]	@ (8000c40 <SystemClock_Config+0xd4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bb8:	4a21      	ldr	r2, [pc, #132]	@ (8000c40 <SystemClock_Config+0xd4>)
 8000bba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bbe:	6013      	str	r3, [r2, #0]
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c40 <SystemClock_Config+0xd4>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000be0:	2308      	movs	r3, #8
 8000be2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000be4:	2332      	movs	r3, #50	@ 0x32
 8000be6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bec:	2307      	movs	r3, #7
 8000bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 ff99 	bl	8001b2c <HAL_RCC_OscConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c00:	f000 fab0 	bl	8001164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c04:	230f      	movs	r3, #15
 8000c06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000c10:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 f9fa 	bl	800201c <HAL_RCC_ClockConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c2e:	f000 fa99 	bl	8001164 <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	3750      	adds	r7, #80	@ 0x50
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40007000 	.word	0x40007000

08000c44 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <MX_SPI5_Init+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c74:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c90:	220a      	movs	r2, #10
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_SPI5_Init+0x64>)
 8000c96:	f001 fbad 	bl	80023f4 <HAL_SPI_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000ca0:	f000 fa60 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	200000fc 	.word	0x200000fc
 8000cac:	40015000 	.word	0x40015000

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08e      	sub	sp, #56	@ 0x38
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
 8000cca:	4bb2      	ldr	r3, [pc, #712]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4ab1      	ldr	r2, [pc, #708]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4baf      	ldr	r3, [pc, #700]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	623b      	str	r3, [r7, #32]
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	4bab      	ldr	r3, [pc, #684]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4aaa      	ldr	r2, [pc, #680]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000cec:	f043 0320 	orr.w	r3, r3, #32
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4ba8      	ldr	r3, [pc, #672]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0320 	and.w	r3, r3, #32
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	4ba4      	ldr	r3, [pc, #656]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4aa3      	ldr	r2, [pc, #652]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4ba1      	ldr	r3, [pc, #644]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	4b9d      	ldr	r3, [pc, #628]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a9c      	ldr	r2, [pc, #624]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b9a      	ldr	r3, [pc, #616]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b96      	ldr	r3, [pc, #600]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a95      	ldr	r2, [pc, #596]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b93      	ldr	r3, [pc, #588]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b8f      	ldr	r3, [pc, #572]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a8e      	ldr	r2, [pc, #568]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b8c      	ldr	r3, [pc, #560]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b88      	ldr	r3, [pc, #544]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a87      	ldr	r2, [pc, #540]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d78:	f043 0310 	orr.w	r3, r3, #16
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b85      	ldr	r3, [pc, #532]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b81      	ldr	r3, [pc, #516]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a80      	ldr	r2, [pc, #512]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b7e      	ldr	r3, [pc, #504]	@ (8000f94 <MX_GPIO_Init+0x2e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2116      	movs	r1, #22
 8000daa:	487b      	ldr	r0, [pc, #492]	@ (8000f98 <MX_GPIO_Init+0x2e8>)
 8000dac:	f000 fea4 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2180      	movs	r1, #128	@ 0x80
 8000db4:	4879      	ldr	r0, [pc, #484]	@ (8000f9c <MX_GPIO_Init+0x2ec>)
 8000db6:	f000 fe9f 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000dc0:	4877      	ldr	r0, [pc, #476]	@ (8000fa0 <MX_GPIO_Init+0x2f0>)
 8000dc2:	f000 fe99 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000dcc:	4875      	ldr	r0, [pc, #468]	@ (8000fa4 <MX_GPIO_Init+0x2f4>)
 8000dce:	f000 fe93 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000dd2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000de4:	230c      	movs	r3, #12
 8000de6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	486e      	ldr	r0, [pc, #440]	@ (8000fa8 <MX_GPIO_Init+0x2f8>)
 8000df0:	f000 fcd6 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e06:	230e      	movs	r3, #14
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4865      	ldr	r0, [pc, #404]	@ (8000fa8 <MX_GPIO_Init+0x2f8>)
 8000e12:	f000 fcc5 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000e16:	2301      	movs	r3, #1
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e26:	230c      	movs	r3, #12
 8000e28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4859      	ldr	r0, [pc, #356]	@ (8000f98 <MX_GPIO_Init+0x2e8>)
 8000e32:	f000 fcb5 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000e36:	2316      	movs	r3, #22
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4852      	ldr	r0, [pc, #328]	@ (8000f98 <MX_GPIO_Init+0x2e8>)
 8000e4e:	f000 fca7 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e52:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e58:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e66:	4619      	mov	r1, r3
 8000e68:	484c      	ldr	r0, [pc, #304]	@ (8000f9c <MX_GPIO_Init+0x2ec>)
 8000e6a:	f000 fc99 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e6e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e80:	230e      	movs	r3, #14
 8000e82:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4844      	ldr	r0, [pc, #272]	@ (8000f9c <MX_GPIO_Init+0x2ec>)
 8000e8c:	f000 fc88 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e90:	2380      	movs	r3, #128	@ 0x80
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	483d      	ldr	r0, [pc, #244]	@ (8000f9c <MX_GPIO_Init+0x2ec>)
 8000ea8:	f000 fc7a 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000eac:	2320      	movs	r3, #32
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eb0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4835      	ldr	r0, [pc, #212]	@ (8000f98 <MX_GPIO_Init+0x2e8>)
 8000ec2:	f000 fc6d 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ed6:	2309      	movs	r3, #9
 8000ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4832      	ldr	r0, [pc, #200]	@ (8000fac <MX_GPIO_Init+0x2fc>)
 8000ee2:	f000 fc5d 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	482c      	ldr	r0, [pc, #176]	@ (8000fac <MX_GPIO_Init+0x2fc>)
 8000efa:	f000 fc51 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000efe:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f10:	230c      	movs	r3, #12
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4822      	ldr	r0, [pc, #136]	@ (8000fa4 <MX_GPIO_Init+0x2f4>)
 8000f1c:	f000 fc40 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000f20:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f32:	230c      	movs	r3, #12
 8000f34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <MX_GPIO_Init+0x300>)
 8000f3e:	f000 fc2f 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000f42:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f54:	230e      	movs	r3, #14
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4813      	ldr	r0, [pc, #76]	@ (8000fac <MX_GPIO_Init+0x2fc>)
 8000f60:	f000 fc1e 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000f64:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000f76:	230c      	movs	r3, #12
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480a      	ldr	r0, [pc, #40]	@ (8000fac <MX_GPIO_Init+0x2fc>)
 8000f82:	f000 fc0d 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f90:	e010      	b.n	8000fb4 <MX_GPIO_Init+0x304>
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	40020c00 	.word	0x40020c00
 8000fa4:	40021800 	.word	0x40021800
 8000fa8:	40021400 	.word	0x40021400
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4864      	ldr	r0, [pc, #400]	@ (8001150 <MX_GPIO_Init+0x4a0>)
 8000fc0:	f000 fbee 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000fc4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	485c      	ldr	r0, [pc, #368]	@ (8001154 <MX_GPIO_Init+0x4a4>)
 8000fe2:	f000 fbdd 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000fe6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4856      	ldr	r0, [pc, #344]	@ (8001154 <MX_GPIO_Init+0x4a4>)
 8000ffc:	f000 fbd0 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001000:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	484e      	ldr	r0, [pc, #312]	@ (8001154 <MX_GPIO_Init+0x4a4>)
 800101a:	f000 fbc1 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800101e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001030:	230e      	movs	r3, #14
 8001032:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4847      	ldr	r0, [pc, #284]	@ (8001158 <MX_GPIO_Init+0x4a8>)
 800103c:	f000 fbb0 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001040:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001052:	230e      	movs	r3, #14
 8001054:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105a:	4619      	mov	r1, r3
 800105c:	483f      	ldr	r0, [pc, #252]	@ (800115c <MX_GPIO_Init+0x4ac>)
 800105e:	f000 fb9f 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001062:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001068:	2312      	movs	r3, #18
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001074:	2304      	movs	r3, #4
 8001076:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4837      	ldr	r0, [pc, #220]	@ (800115c <MX_GPIO_Init+0x4ac>)
 8001080:	f000 fb8e 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108a:	2312      	movs	r3, #18
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001096:	2304      	movs	r3, #4
 8001098:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	482f      	ldr	r0, [pc, #188]	@ (8001160 <MX_GPIO_Init+0x4b0>)
 80010a2:	f000 fb7d 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010a6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b8:	2307      	movs	r3, #7
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4827      	ldr	r0, [pc, #156]	@ (8001160 <MX_GPIO_Init+0x4b0>)
 80010c4:	f000 fb6c 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80010c8:	2348      	movs	r3, #72	@ 0x48
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010d8:	230e      	movs	r3, #14
 80010da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_GPIO_Init+0x4a4>)
 80010e4:	f000 fb5c 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010fa:	2309      	movs	r3, #9
 80010fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	4814      	ldr	r0, [pc, #80]	@ (8001158 <MX_GPIO_Init+0x4a8>)
 8001106:	f000 fb4b 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800110a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800111c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	@ (8001158 <MX_GPIO_Init+0x4a8>)
 8001124:	f000 fb3c 	bl	80017a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001128:	2360      	movs	r3, #96	@ 0x60
 800112a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001138:	230c      	movs	r3, #12
 800113a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4803      	ldr	r0, [pc, #12]	@ (8001150 <MX_GPIO_Init+0x4a0>)
 8001144:	f000 fb2c 	bl	80017a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001148:	bf00      	nop
 800114a:	3738      	adds	r7, #56	@ 0x38
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020400 	.word	0x40020400
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021800 	.word	0x40021800
 800115c:	40020800 	.word	0x40020800
 8001160:	40020000 	.word	0x40020000

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <Error_Handler+0x8>

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001184:	6453      	str	r3, [r2, #68]	@ 0x44
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_MspInit+0x4c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ae:	2007      	movs	r0, #7
 80011b0:	f000 fa98 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800

080011c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <HAL_SPI_MspInit+0x84>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d12c      	bne.n	800123c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a17      	ldr	r2, [pc, #92]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 80011ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a10      	ldr	r2, [pc, #64]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <HAL_SPI_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800121a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800121e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800122c:	2305      	movs	r3, #5
 800122e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <HAL_SPI_MspInit+0x8c>)
 8001238:	f000 fab2 	bl	80017a0 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	@ 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40015000 	.word	0x40015000
 8001248:	40023800 	.word	0x40023800
 800124c:	40021400 	.word	0x40021400

08001250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <NMI_Handler+0x4>

08001258 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <HardFault_Handler+0x4>

08001260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <MemManage_Handler+0x4>

08001268 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <UsageFault_Handler+0x4>

08001278 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f8c7 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	@ (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f001 ff80 	bl	80031e4 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	@ (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20030000 	.word	0x20030000
 8001310:	00000400 	.word	0x00000400
 8001314:	20000154 	.word	0x20000154
 8001318:	20000348 	.word	0x20000348

0800131c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <SystemInit+0x20>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001326:	4a05      	ldr	r2, [pc, #20]	@ (800133c <SystemInit+0x20>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001378 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001344:	f7ff ffea 	bl	800131c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	@ (8001380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	@ (800138c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800136e:	f001 ff3f 	bl	80031f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff fbcb 	bl	8000b0c <main>
  bx  lr    
 8001376:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001378:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001384:	08003e24 	.word	0x08003e24
  ldr r2, =_sbss
 8001388:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800138c:	20000348 	.word	0x20000348

08001390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0d      	ldr	r2, [pc, #52]	@ (80013d4 <HAL_Init+0x40>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_Init+0x40>)
 80013aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	@ (80013d4 <HAL_Init+0x40>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f991 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fed2 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	@ (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f9b7 	bl	800176a <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f971 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	20000008 	.word	0x20000008
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008
 800145c:	20000158 	.word	0x20000158

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000158 	.word	0x20000158

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <HAL_Delay+0x44>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffde 	bl	8001460 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000008 	.word	0x20000008

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	@ (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	@ (800155c <__NVIC_EnableIRQ+0x38>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	2b00      	cmp	r3, #0
 8001570:	db12      	blt.n	8001598 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	f003 021f 	and.w	r2, r3, #31
 8001578:	490a      	ldr	r1, [pc, #40]	@ (80015a4 <__NVIC_DisableIRQ+0x44>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	095b      	lsrs	r3, r3, #5
 8001580:	2001      	movs	r0, #1
 8001582:	fa00 f202 	lsl.w	r2, r0, r2
 8001586:	3320      	adds	r3, #32
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800158c:	f3bf 8f4f 	dsb	sy
}
 8001590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001592:	f3bf 8f6f 	isb	sy
}
 8001596:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db0c      	blt.n	80015d4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	4907      	ldr	r1, [pc, #28]	@ (80015e0 <__NVIC_ClearPendingIRQ+0x38>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	2001      	movs	r0, #1
 80015ca:	fa00 f202 	lsl.w	r2, r0, r2
 80015ce:	3360      	adds	r3, #96	@ 0x60
 80015d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	@ (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	@ 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fee7 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff fefc 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff8e 	bl	8001638 <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5d 	bl	80015e4 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff feef 	bl	8001524 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff feff 	bl	8001560 <__NVIC_DisableIRQ>
}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff94 	bl	80016a0 <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff09 	bl	80015a8 <__NVIC_ClearPendingIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e177      	b.n	8001aac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8166 	bne.w	8001aa6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d005      	beq.n	80017f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d130      	bne.n	8001854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 0201 	and.w	r2, r3, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b03      	cmp	r3, #3
 800185e:	d017      	beq.n	8001890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	69b9      	ldr	r1, [r7, #24]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80c0 	beq.w	8001aa6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b66      	ldr	r3, [pc, #408]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	4a65      	ldr	r2, [pc, #404]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001934:	6453      	str	r3, [r2, #68]	@ 0x44
 8001936:	4b63      	ldr	r3, [pc, #396]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001942:	4a61      	ldr	r2, [pc, #388]	@ (8001ac8 <HAL_GPIO_Init+0x328>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a58      	ldr	r2, [pc, #352]	@ (8001acc <HAL_GPIO_Init+0x32c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d037      	beq.n	80019de <HAL_GPIO_Init+0x23e>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a57      	ldr	r2, [pc, #348]	@ (8001ad0 <HAL_GPIO_Init+0x330>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d031      	beq.n	80019da <HAL_GPIO_Init+0x23a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a56      	ldr	r2, [pc, #344]	@ (8001ad4 <HAL_GPIO_Init+0x334>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02b      	beq.n	80019d6 <HAL_GPIO_Init+0x236>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a55      	ldr	r2, [pc, #340]	@ (8001ad8 <HAL_GPIO_Init+0x338>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d025      	beq.n	80019d2 <HAL_GPIO_Init+0x232>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a54      	ldr	r2, [pc, #336]	@ (8001adc <HAL_GPIO_Init+0x33c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <HAL_GPIO_Init+0x22e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a53      	ldr	r2, [pc, #332]	@ (8001ae0 <HAL_GPIO_Init+0x340>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x22a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a52      	ldr	r2, [pc, #328]	@ (8001ae4 <HAL_GPIO_Init+0x344>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x226>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a51      	ldr	r2, [pc, #324]	@ (8001ae8 <HAL_GPIO_Init+0x348>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x222>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a50      	ldr	r2, [pc, #320]	@ (8001aec <HAL_GPIO_Init+0x34c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x21e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4f      	ldr	r2, [pc, #316]	@ (8001af0 <HAL_GPIO_Init+0x350>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x21a>
 80019b6:	2309      	movs	r3, #9
 80019b8:	e012      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019ba:	230a      	movs	r3, #10
 80019bc:	e010      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019be:	2308      	movs	r3, #8
 80019c0:	e00e      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019c2:	2307      	movs	r3, #7
 80019c4:	e00c      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019c6:	2306      	movs	r3, #6
 80019c8:	e00a      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e008      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x240>
 80019de:	2300      	movs	r3, #0
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4093      	lsls	r3, r2
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f0:	4935      	ldr	r1, [pc, #212]	@ (8001ac8 <HAL_GPIO_Init+0x328>)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fe:	4b3d      	ldr	r3, [pc, #244]	@ (8001af4 <HAL_GPIO_Init+0x354>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a22:	4a34      	ldr	r2, [pc, #208]	@ (8001af4 <HAL_GPIO_Init+0x354>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a28:	4b32      	ldr	r3, [pc, #200]	@ (8001af4 <HAL_GPIO_Init+0x354>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a4c:	4a29      	ldr	r2, [pc, #164]	@ (8001af4 <HAL_GPIO_Init+0x354>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <HAL_GPIO_Init+0x354>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a76:	4a1f      	ldr	r2, [pc, #124]	@ (8001af4 <HAL_GPIO_Init+0x354>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_GPIO_Init+0x354>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <HAL_GPIO_Init+0x354>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	f67f ae84 	bls.w	80017bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40021400 	.word	0x40021400
 8001ae4:	40021800 	.word	0x40021800
 8001ae8:	40021c00 	.word	0x40021c00
 8001aec:	40022000 	.word	0x40022000
 8001af0:	40022400 	.word	0x40022400
 8001af4:	40013c00 	.word	0x40013c00

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b14:	e003      	b.n	8001b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	041a      	lsls	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	619a      	str	r2, [r3, #24]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e267      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d075      	beq.n	8001c36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b4a:	4b88      	ldr	r3, [pc, #544]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d00c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b56:	4b85      	ldr	r3, [pc, #532]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d112      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b62:	4b82      	ldr	r3, [pc, #520]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b6e:	d10b      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	4b7e      	ldr	r3, [pc, #504]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d05b      	beq.n	8001c34 <HAL_RCC_OscConfig+0x108>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d157      	bne.n	8001c34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e242      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x74>
 8001b92:	4b76      	ldr	r3, [pc, #472]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a75      	ldr	r2, [pc, #468]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xb0>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x98>
 8001baa:	4b70      	ldr	r3, [pc, #448]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6f      	ldr	r2, [pc, #444]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6c      	ldr	r2, [pc, #432]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xb0>
 8001bc4:	4b69      	ldr	r3, [pc, #420]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a68      	ldr	r2, [pc, #416]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b66      	ldr	r3, [pc, #408]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a65      	ldr	r2, [pc, #404]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fc3c 	bl	8001460 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fc38 	bl	8001460 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e207      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xc0>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff fc28 	bl	8001460 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fc24 	bl	8001460 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	@ 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1f3      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b51      	ldr	r3, [pc, #324]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0xe8>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c42:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b47      	ldr	r3, [pc, #284]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5a:	4b44      	ldr	r3, [pc, #272]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b41      	ldr	r3, [pc, #260]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x152>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1c7      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4937      	ldr	r1, [pc, #220]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_RCC_OscConfig+0x244>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fbdd 	bl	8001460 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff fbd9 	bl	8001460 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e1a8      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4925      	ldr	r1, [pc, #148]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <HAL_RCC_OscConfig+0x244>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fbbc 	bl	8001460 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cec:	f7ff fbb8 	bl	8001460 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e187      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d036      	beq.n	8001d84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <HAL_RCC_OscConfig+0x248>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d24:	f7ff fb9c 	bl	8001460 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff fb98 	bl	8001460 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e167      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_RCC_OscConfig+0x240>)
 8001d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x200>
 8001d4a:	e01b      	b.n	8001d84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_RCC_OscConfig+0x248>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fb85 	bl	8001460 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	e00e      	b.n	8001d78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fb81 	bl	8001460 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d907      	bls.n	8001d78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e150      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	42470000 	.word	0x42470000
 8001d74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d78:	4b88      	ldr	r3, [pc, #544]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1ea      	bne.n	8001d5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8097 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d96:	4b81      	ldr	r3, [pc, #516]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b7d      	ldr	r3, [pc, #500]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a7c      	ldr	r2, [pc, #496]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b7a      	ldr	r3, [pc, #488]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b77      	ldr	r3, [pc, #476]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b74      	ldr	r3, [pc, #464]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a73      	ldr	r2, [pc, #460]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fb41 	bl	8001460 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fb3d 	bl	8001460 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e10c      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa0 <HAL_RCC_OscConfig+0x474>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x2ea>
 8001e08:	4b64      	ldr	r3, [pc, #400]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0c:	4a63      	ldr	r2, [pc, #396]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x324>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x30c>
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	4a5e      	ldr	r2, [pc, #376]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x324>
 8001e38:	4b58      	ldr	r3, [pc, #352]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a57      	ldr	r2, [pc, #348]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e3e:	f023 0301 	bic.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	4b55      	ldr	r3, [pc, #340]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	4a54      	ldr	r2, [pc, #336]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff fb02 	bl	8001460 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff fafe 	bl	8001460 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0cb      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ee      	beq.n	8001e60 <HAL_RCC_OscConfig+0x334>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e84:	f7ff faec 	bl	8001460 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fae8 	bl	8001460 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0b5      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ee      	bne.n	8001e8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b39      	ldr	r3, [pc, #228]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4a38      	ldr	r2, [pc, #224]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a1 	beq.w	800200c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eca:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d05c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d141      	bne.n	8001f62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ede:	4b31      	ldr	r3, [pc, #196]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee4:	f7ff fabc 	bl	8001460 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff fab8 	bl	8001460 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e087      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efe:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f20:	085b      	lsrs	r3, r3, #1
 8001f22:	3b01      	subs	r3, #1
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2c:	061b      	lsls	r3, r3, #24
 8001f2e:	491b      	ldr	r1, [pc, #108]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f34:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7ff fa91 	bl	8001460 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7ff fa8d 	bl	8001460 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e05c      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x416>
 8001f60:	e054      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <HAL_RCC_OscConfig+0x478>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7ff fa7a 	bl	8001460 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff fa76 	bl	8001460 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e045      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_RCC_OscConfig+0x470>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x444>
 8001f8e:	e03d      	b.n	800200c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e038      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <HAL_RCC_OscConfig+0x4ec>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d028      	beq.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d121      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d11a      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fd8:	4013      	ands	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d111      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d107      	bne.n	8002008 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800

0800201c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0cc      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b68      	ldr	r3, [pc, #416]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d90c      	bls.n	8002058 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b65      	ldr	r3, [pc, #404]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002046:	4b63      	ldr	r3, [pc, #396]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0b8      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d020      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002070:	4b59      	ldr	r3, [pc, #356]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	4a58      	ldr	r2, [pc, #352]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800207a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002088:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a52      	ldr	r2, [pc, #328]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002092:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002094:	4b50      	ldr	r3, [pc, #320]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	494d      	ldr	r1, [pc, #308]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d044      	beq.n	800213c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d107      	bne.n	80020ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b47      	ldr	r3, [pc, #284]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d119      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e07f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d003      	beq.n	80020da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	4b3f      	ldr	r3, [pc, #252]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e06f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ea:	4b3b      	ldr	r3, [pc, #236]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e067      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4934      	ldr	r1, [pc, #208]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210c:	f7ff f9a8 	bl	8001460 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7ff f9a4 	bl	8001460 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e04f      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b2b      	ldr	r3, [pc, #172]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800213c:	4b25      	ldr	r3, [pc, #148]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d20c      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b22      	ldr	r3, [pc, #136]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e032      	b.n	80021ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002170:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4916      	ldr	r1, [pc, #88]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800218e:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	490e      	ldr	r1, [pc, #56]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021a2:	f000 f821 	bl	80021e8 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	490a      	ldr	r1, [pc, #40]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ba:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f908 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40023c00 	.word	0x40023c00
 80021d8:	40023800 	.word	0x40023800
 80021dc:	08003dd0 	.word	0x08003dd0
 80021e0:	20000000 	.word	0x20000000
 80021e4:	20000004 	.word	0x20000004

080021e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021ec:	b094      	sub	sp, #80	@ 0x50
 80021ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002200:	4b79      	ldr	r3, [pc, #484]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
 8002208:	2b08      	cmp	r3, #8
 800220a:	d00d      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x40>
 800220c:	2b08      	cmp	r3, #8
 800220e:	f200 80e1 	bhi.w	80023d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002212:	2b00      	cmp	r3, #0
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x34>
 8002216:	2b04      	cmp	r3, #4
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x3a>
 800221a:	e0db      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4b73      	ldr	r3, [pc, #460]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x204>)
 800221e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002220:	e0db      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002222:	4b73      	ldr	r3, [pc, #460]	@ (80023f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002226:	e0d8      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002228:	4b6f      	ldr	r3, [pc, #444]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002230:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002232:	4b6d      	ldr	r3, [pc, #436]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d063      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223e:	4b6a      	ldr	r3, [pc, #424]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	099b      	lsrs	r3, r3, #6
 8002244:	2200      	movs	r2, #0
 8002246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002248:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800224a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002250:	633b      	str	r3, [r7, #48]	@ 0x30
 8002252:	2300      	movs	r3, #0
 8002254:	637b      	str	r3, [r7, #52]	@ 0x34
 8002256:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800225a:	4622      	mov	r2, r4
 800225c:	462b      	mov	r3, r5
 800225e:	f04f 0000 	mov.w	r0, #0
 8002262:	f04f 0100 	mov.w	r1, #0
 8002266:	0159      	lsls	r1, r3, #5
 8002268:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800226c:	0150      	lsls	r0, r2, #5
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4621      	mov	r1, r4
 8002274:	1a51      	subs	r1, r2, r1
 8002276:	6139      	str	r1, [r7, #16]
 8002278:	4629      	mov	r1, r5
 800227a:	eb63 0301 	sbc.w	r3, r3, r1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800228c:	4659      	mov	r1, fp
 800228e:	018b      	lsls	r3, r1, #6
 8002290:	4651      	mov	r1, sl
 8002292:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002296:	4651      	mov	r1, sl
 8002298:	018a      	lsls	r2, r1, #6
 800229a:	4651      	mov	r1, sl
 800229c:	ebb2 0801 	subs.w	r8, r2, r1
 80022a0:	4659      	mov	r1, fp
 80022a2:	eb63 0901 	sbc.w	r9, r3, r1
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ba:	4690      	mov	r8, r2
 80022bc:	4699      	mov	r9, r3
 80022be:	4623      	mov	r3, r4
 80022c0:	eb18 0303 	adds.w	r3, r8, r3
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	462b      	mov	r3, r5
 80022c8:	eb49 0303 	adc.w	r3, r9, r3
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022da:	4629      	mov	r1, r5
 80022dc:	024b      	lsls	r3, r1, #9
 80022de:	4621      	mov	r1, r4
 80022e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022e4:	4621      	mov	r1, r4
 80022e6:	024a      	lsls	r2, r1, #9
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ee:	2200      	movs	r2, #0
 80022f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022f8:	f7fd ffca 	bl	8000290 <__aeabi_uldivmod>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4613      	mov	r3, r2
 8002302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002304:	e058      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002306:	4b38      	ldr	r3, [pc, #224]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	2200      	movs	r2, #0
 800230e:	4618      	mov	r0, r3
 8002310:	4611      	mov	r1, r2
 8002312:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002316:	623b      	str	r3, [r7, #32]
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
 800231c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002320:	4642      	mov	r2, r8
 8002322:	464b      	mov	r3, r9
 8002324:	f04f 0000 	mov.w	r0, #0
 8002328:	f04f 0100 	mov.w	r1, #0
 800232c:	0159      	lsls	r1, r3, #5
 800232e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002332:	0150      	lsls	r0, r2, #5
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4641      	mov	r1, r8
 800233a:	ebb2 0a01 	subs.w	sl, r2, r1
 800233e:	4649      	mov	r1, r9
 8002340:	eb63 0b01 	sbc.w	fp, r3, r1
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002350:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002354:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002358:	ebb2 040a 	subs.w	r4, r2, sl
 800235c:	eb63 050b 	sbc.w	r5, r3, fp
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	00eb      	lsls	r3, r5, #3
 800236a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800236e:	00e2      	lsls	r2, r4, #3
 8002370:	4614      	mov	r4, r2
 8002372:	461d      	mov	r5, r3
 8002374:	4643      	mov	r3, r8
 8002376:	18e3      	adds	r3, r4, r3
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	464b      	mov	r3, r9
 800237c:	eb45 0303 	adc.w	r3, r5, r3
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800238e:	4629      	mov	r1, r5
 8002390:	028b      	lsls	r3, r1, #10
 8002392:	4621      	mov	r1, r4
 8002394:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002398:	4621      	mov	r1, r4
 800239a:	028a      	lsls	r2, r1, #10
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a2:	2200      	movs	r2, #0
 80023a4:	61bb      	str	r3, [r7, #24]
 80023a6:	61fa      	str	r2, [r7, #28]
 80023a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ac:	f7fd ff70 	bl	8000290 <__aeabi_uldivmod>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4613      	mov	r3, r2
 80023b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	3301      	adds	r3, #1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d2:	e002      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetSysClockFreq+0x204>)
 80023d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3750      	adds	r7, #80	@ 0x50
 80023e0:	46bd      	mov	sp, r7
 80023e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	007a1200 	.word	0x007a1200

080023f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07b      	b.n	80024fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	2b00      	cmp	r3, #0
 800240c:	d108      	bne.n	8002420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002416:	d009      	beq.n	800242c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
 800241e:	e005      	b.n	800242c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe feba 	bl	80011c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f003 0104 	and.w	r1, r3, #4
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	f003 0210 	and.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b088      	sub	sp, #32
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002516:	f7fe ffa3 	bl	8001460 <HAL_GetTick>
 800251a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
 800252e:	e12a      	b.n	8002786 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_SPI_Transmit+0x36>
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e122      	b.n	8002786 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_SPI_Transmit+0x48>
 800254a:	2302      	movs	r3, #2
 800254c:	e11b      	b.n	8002786 <HAL_SPI_Transmit+0x280>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2203      	movs	r2, #3
 800255a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800259c:	d10f      	bne.n	80025be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c8:	2b40      	cmp	r3, #64	@ 0x40
 80025ca:	d007      	beq.n	80025dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025e4:	d152      	bne.n	800268c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Transmit+0xee>
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d145      	bne.n	8002680 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	881a      	ldrh	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	1c9a      	adds	r2, r3, #2
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002618:	e032      	b.n	8002680 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	d112      	bne.n	800264e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800264c:	e018      	b.n	8002680 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800264e:	f7fe ff07 	bl	8001460 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d803      	bhi.n	8002666 <HAL_SPI_Transmit+0x160>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d102      	bne.n	800266c <HAL_SPI_Transmit+0x166>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e082      	b.n	8002786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1c7      	bne.n	800261a <HAL_SPI_Transmit+0x114>
 800268a:	e053      	b.n	8002734 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_SPI_Transmit+0x194>
 8002694:	8b7b      	ldrh	r3, [r7, #26]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d147      	bne.n	800272a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	330c      	adds	r3, #12
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026c0:	e033      	b.n	800272a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d113      	bne.n	80026f8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	330c      	adds	r3, #12
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026f6:	e018      	b.n	800272a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f8:	f7fe feb2 	bl	8001460 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d803      	bhi.n	8002710 <HAL_SPI_Transmit+0x20a>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d102      	bne.n	8002716 <HAL_SPI_Transmit+0x210>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e02d      	b.n	8002786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1c6      	bne.n	80026c2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fa59 	bl	8002bf0 <SPI_EndRxTxTransaction>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002784:	2300      	movs	r3, #0
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b08a      	sub	sp, #40	@ 0x28
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	607a      	str	r2, [r7, #4]
 800279a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800279c:	2301      	movs	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027a0:	f7fe fe5e 	bl	8001460 <HAL_GetTick>
 80027a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027b8:	7ffb      	ldrb	r3, [r7, #31]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d00c      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x4a>
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027c4:	d106      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <HAL_SPI_TransmitReceive+0x46>
 80027ce:	7ffb      	ldrb	r3, [r7, #31]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d001      	beq.n	80027d8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
 80027d6:	e17f      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_SPI_TransmitReceive+0x5c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_SPI_TransmitReceive+0x5c>
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e174      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_SPI_TransmitReceive+0x6e>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e16d      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x34a>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b04      	cmp	r3, #4
 800280e:	d003      	beq.n	8002818 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2205      	movs	r2, #5
 8002814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	887a      	ldrh	r2, [r7, #2]
 800282e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	887a      	ldrh	r2, [r7, #2]
 800283a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002858:	2b40      	cmp	r3, #64	@ 0x40
 800285a:	d007      	beq.n	800286c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002874:	d17e      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_SPI_TransmitReceive+0xf6>
 800287e:	8afb      	ldrh	r3, [r7, #22]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d16c      	bne.n	800295e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	1c9a      	adds	r2, r3, #2
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028a8:	e059      	b.n	800295e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d11b      	bne.n	80028f0 <HAL_SPI_TransmitReceive+0x162>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028bc:	b29b      	uxth	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d016      	beq.n	80028f0 <HAL_SPI_TransmitReceive+0x162>
 80028c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d113      	bne.n	80028f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d8:	1c9a      	adds	r2, r3, #2
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d119      	bne.n	8002932 <HAL_SPI_TransmitReceive+0x1a4>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d014      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	b292      	uxth	r2, r2
 8002914:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291a:	1c9a      	adds	r2, r3, #2
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800292e:	2301      	movs	r3, #1
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002932:	f7fe fd95 	bl	8001460 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800293e:	429a      	cmp	r2, r3
 8002940:	d80d      	bhi.n	800295e <HAL_SPI_TransmitReceive+0x1d0>
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d009      	beq.n	800295e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e0bc      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1a0      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x11c>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d19b      	bne.n	80028aa <HAL_SPI_TransmitReceive+0x11c>
 8002972:	e082      	b.n	8002a7a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_SPI_TransmitReceive+0x1f4>
 800297c:	8afb      	ldrh	r3, [r7, #22]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d171      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	330c      	adds	r3, #12
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029a8:	e05d      	b.n	8002a66 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d11c      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x264>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d017      	beq.n	80029f2 <HAL_SPI_TransmitReceive+0x264>
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d114      	bne.n	80029f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	7812      	ldrb	r2, [r2, #0]
 80029d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d119      	bne.n	8002a34 <HAL_SPI_TransmitReceive+0x2a6>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d014      	beq.n	8002a34 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a30:	2301      	movs	r3, #1
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a34:	f7fe fd14 	bl	8001460 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d803      	bhi.n	8002a4c <HAL_SPI_TransmitReceive+0x2be>
 8002a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4a:	d102      	bne.n	8002a52 <HAL_SPI_TransmitReceive+0x2c4>
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e038      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d19c      	bne.n	80029aa <HAL_SPI_TransmitReceive+0x21c>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d197      	bne.n	80029aa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a7a:	6a3a      	ldr	r2, [r7, #32]
 8002a7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 f8b6 	bl	8002bf0 <SPI_EndRxTxTransaction>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e01d      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10a      	bne.n	8002aba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
  }
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3728      	adds	r7, #40	@ 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002af0:	f7fe fcb6 	bl	8001460 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b00:	f7fe fcae 	bl	8001460 <HAL_GetTick>
 8002b04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b06:	4b39      	ldr	r3, [pc, #228]	@ (8002bec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	015b      	lsls	r3, r3, #5
 8002b0c:	0d1b      	lsrs	r3, r3, #20
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	fb02 f303 	mul.w	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b16:	e054      	b.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d050      	beq.n	8002bc2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b20:	f7fe fc9e 	bl	8001460 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d902      	bls.n	8002b36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13d      	bne.n	8002bb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002b44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b4e:	d111      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b58:	d004      	beq.n	8002b64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	d107      	bne.n	8002b74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b7c:	d10f      	bne.n	8002b9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e017      	b.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d19b      	bne.n	8002b18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2201      	movs	r2, #1
 8002c04:	2102      	movs	r1, #2
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f7ff ff6a 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d007      	beq.n	8002c22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e032      	b.n	8002c88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c22:	4b1b      	ldr	r3, [pc, #108]	@ (8002c90 <SPI_EndRxTxTransaction+0xa0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1b      	ldr	r2, [pc, #108]	@ (8002c94 <SPI_EndRxTxTransaction+0xa4>)
 8002c28:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2c:	0d5b      	lsrs	r3, r3, #21
 8002c2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c40:	d112      	bne.n	8002c68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2180      	movs	r1, #128	@ 0x80
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f7ff ff47 	bl	8002ae0 <SPI_WaitFlagStateUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d016      	beq.n	8002c86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e00f      	b.n	8002c88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	2b80      	cmp	r3, #128	@ 0x80
 8002c80:	d0f2      	beq.n	8002c68 <SPI_EndRxTxTransaction+0x78>
 8002c82:	e000      	b.n	8002c86 <SPI_EndRxTxTransaction+0x96>
        break;
 8002c84:	bf00      	nop
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	20000000 	.word	0x20000000
 8002c94:	165e9f81 	.word	0x165e9f81

08002c98 <findslot>:
 8002c98:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <findslot+0x2c>)
 8002c9a:	b510      	push	{r4, lr}
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	6818      	ldr	r0, [r3, #0]
 8002ca0:	b118      	cbz	r0, 8002caa <findslot+0x12>
 8002ca2:	6a03      	ldr	r3, [r0, #32]
 8002ca4:	b90b      	cbnz	r3, 8002caa <findslot+0x12>
 8002ca6:	f000 f9c3 	bl	8003030 <__sinit>
 8002caa:	2c13      	cmp	r4, #19
 8002cac:	d807      	bhi.n	8002cbe <findslot+0x26>
 8002cae:	4806      	ldr	r0, [pc, #24]	@ (8002cc8 <findslot+0x30>)
 8002cb0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002cb4:	3201      	adds	r2, #1
 8002cb6:	d002      	beq.n	8002cbe <findslot+0x26>
 8002cb8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002cbc:	bd10      	pop	{r4, pc}
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	e7fc      	b.n	8002cbc <findslot+0x24>
 8002cc2:	bf00      	nop
 8002cc4:	20000018 	.word	0x20000018
 8002cc8:	2000015c 	.word	0x2000015c

08002ccc <error>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	4604      	mov	r4, r0
 8002cd0:	f000 fa88 	bl	80031e4 <__errno>
 8002cd4:	2613      	movs	r6, #19
 8002cd6:	4605      	mov	r5, r0
 8002cd8:	2700      	movs	r7, #0
 8002cda:	4630      	mov	r0, r6
 8002cdc:	4639      	mov	r1, r7
 8002cde:	beab      	bkpt	0x00ab
 8002ce0:	4606      	mov	r6, r0
 8002ce2:	602e      	str	r6, [r5, #0]
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ce8 <checkerror>:
 8002ce8:	1c43      	adds	r3, r0, #1
 8002cea:	d101      	bne.n	8002cf0 <checkerror+0x8>
 8002cec:	f7ff bfee 	b.w	8002ccc <error>
 8002cf0:	4770      	bx	lr

08002cf2 <_swiread>:
 8002cf2:	b530      	push	{r4, r5, lr}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002cfa:	9203      	str	r2, [sp, #12]
 8002cfc:	2406      	movs	r4, #6
 8002cfe:	ad01      	add	r5, sp, #4
 8002d00:	4620      	mov	r0, r4
 8002d02:	4629      	mov	r1, r5
 8002d04:	beab      	bkpt	0x00ab
 8002d06:	4604      	mov	r4, r0
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7ff ffed 	bl	8002ce8 <checkerror>
 8002d0e:	b005      	add	sp, #20
 8002d10:	bd30      	pop	{r4, r5, pc}

08002d12 <_read>:
 8002d12:	b570      	push	{r4, r5, r6, lr}
 8002d14:	460e      	mov	r6, r1
 8002d16:	4614      	mov	r4, r2
 8002d18:	f7ff ffbe 	bl	8002c98 <findslot>
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	b930      	cbnz	r0, 8002d2e <_read+0x1c>
 8002d20:	f000 fa60 	bl	80031e4 <__errno>
 8002d24:	2309      	movs	r3, #9
 8002d26:	6003      	str	r3, [r0, #0]
 8002d28:	f04f 30ff 	mov.w	r0, #4294967295
 8002d2c:	bd70      	pop	{r4, r5, r6, pc}
 8002d2e:	6800      	ldr	r0, [r0, #0]
 8002d30:	4622      	mov	r2, r4
 8002d32:	4631      	mov	r1, r6
 8002d34:	f7ff ffdd 	bl	8002cf2 <_swiread>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d0f5      	beq.n	8002d28 <_read+0x16>
 8002d3c:	686b      	ldr	r3, [r5, #4]
 8002d3e:	1a20      	subs	r0, r4, r0
 8002d40:	4403      	add	r3, r0
 8002d42:	606b      	str	r3, [r5, #4]
 8002d44:	e7f2      	b.n	8002d2c <_read+0x1a>

08002d46 <_swilseek>:
 8002d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d48:	460c      	mov	r4, r1
 8002d4a:	4616      	mov	r6, r2
 8002d4c:	f7ff ffa4 	bl	8002c98 <findslot>
 8002d50:	4605      	mov	r5, r0
 8002d52:	b940      	cbnz	r0, 8002d66 <_swilseek+0x20>
 8002d54:	f000 fa46 	bl	80031e4 <__errno>
 8002d58:	2309      	movs	r3, #9
 8002d5a:	6003      	str	r3, [r0, #0]
 8002d5c:	f04f 34ff 	mov.w	r4, #4294967295
 8002d60:	4620      	mov	r0, r4
 8002d62:	b003      	add	sp, #12
 8002d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d66:	2e02      	cmp	r6, #2
 8002d68:	d903      	bls.n	8002d72 <_swilseek+0x2c>
 8002d6a:	f000 fa3b 	bl	80031e4 <__errno>
 8002d6e:	2316      	movs	r3, #22
 8002d70:	e7f3      	b.n	8002d5a <_swilseek+0x14>
 8002d72:	2e01      	cmp	r6, #1
 8002d74:	d112      	bne.n	8002d9c <_swilseek+0x56>
 8002d76:	6843      	ldr	r3, [r0, #4]
 8002d78:	18e4      	adds	r4, r4, r3
 8002d7a:	d4f6      	bmi.n	8002d6a <_swilseek+0x24>
 8002d7c:	682b      	ldr	r3, [r5, #0]
 8002d7e:	260a      	movs	r6, #10
 8002d80:	e9cd 3400 	strd	r3, r4, [sp]
 8002d84:	466f      	mov	r7, sp
 8002d86:	4630      	mov	r0, r6
 8002d88:	4639      	mov	r1, r7
 8002d8a:	beab      	bkpt	0x00ab
 8002d8c:	4606      	mov	r6, r0
 8002d8e:	4630      	mov	r0, r6
 8002d90:	f7ff ffaa 	bl	8002ce8 <checkerror>
 8002d94:	2800      	cmp	r0, #0
 8002d96:	dbe1      	blt.n	8002d5c <_swilseek+0x16>
 8002d98:	606c      	str	r4, [r5, #4]
 8002d9a:	e7e1      	b.n	8002d60 <_swilseek+0x1a>
 8002d9c:	2e02      	cmp	r6, #2
 8002d9e:	6803      	ldr	r3, [r0, #0]
 8002da0:	d1ec      	bne.n	8002d7c <_swilseek+0x36>
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	260c      	movs	r6, #12
 8002da6:	466f      	mov	r7, sp
 8002da8:	4630      	mov	r0, r6
 8002daa:	4639      	mov	r1, r7
 8002dac:	beab      	bkpt	0x00ab
 8002dae:	4606      	mov	r6, r0
 8002db0:	4630      	mov	r0, r6
 8002db2:	f7ff ff99 	bl	8002ce8 <checkerror>
 8002db6:	1c43      	adds	r3, r0, #1
 8002db8:	d0d0      	beq.n	8002d5c <_swilseek+0x16>
 8002dba:	4404      	add	r4, r0
 8002dbc:	e7de      	b.n	8002d7c <_swilseek+0x36>

08002dbe <_lseek>:
 8002dbe:	f7ff bfc2 	b.w	8002d46 <_swilseek>

08002dc2 <_swiwrite>:
 8002dc2:	b530      	push	{r4, r5, lr}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002dca:	9203      	str	r2, [sp, #12]
 8002dcc:	2405      	movs	r4, #5
 8002dce:	ad01      	add	r5, sp, #4
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	beab      	bkpt	0x00ab
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f7ff ff85 	bl	8002ce8 <checkerror>
 8002dde:	b005      	add	sp, #20
 8002de0:	bd30      	pop	{r4, r5, pc}

08002de2 <_write>:
 8002de2:	b570      	push	{r4, r5, r6, lr}
 8002de4:	460e      	mov	r6, r1
 8002de6:	4615      	mov	r5, r2
 8002de8:	f7ff ff56 	bl	8002c98 <findslot>
 8002dec:	4604      	mov	r4, r0
 8002dee:	b930      	cbnz	r0, 8002dfe <_write+0x1c>
 8002df0:	f000 f9f8 	bl	80031e4 <__errno>
 8002df4:	2309      	movs	r3, #9
 8002df6:	6003      	str	r3, [r0, #0]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	bd70      	pop	{r4, r5, r6, pc}
 8002dfe:	6800      	ldr	r0, [r0, #0]
 8002e00:	462a      	mov	r2, r5
 8002e02:	4631      	mov	r1, r6
 8002e04:	f7ff ffdd 	bl	8002dc2 <_swiwrite>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	dbf5      	blt.n	8002df8 <_write+0x16>
 8002e0c:	6862      	ldr	r2, [r4, #4]
 8002e0e:	1ae8      	subs	r0, r5, r3
 8002e10:	4402      	add	r2, r0
 8002e12:	42ab      	cmp	r3, r5
 8002e14:	6062      	str	r2, [r4, #4]
 8002e16:	d1f1      	bne.n	8002dfc <_write+0x1a>
 8002e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f7ff bf55 	b.w	8002ccc <error>

08002e22 <_swiclose>:
 8002e22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e24:	2402      	movs	r4, #2
 8002e26:	9001      	str	r0, [sp, #4]
 8002e28:	ad01      	add	r5, sp, #4
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	beab      	bkpt	0x00ab
 8002e30:	4604      	mov	r4, r0
 8002e32:	4620      	mov	r0, r4
 8002e34:	f7ff ff58 	bl	8002ce8 <checkerror>
 8002e38:	b003      	add	sp, #12
 8002e3a:	bd30      	pop	{r4, r5, pc}

08002e3c <_close>:
 8002e3c:	b538      	push	{r3, r4, r5, lr}
 8002e3e:	4605      	mov	r5, r0
 8002e40:	f7ff ff2a 	bl	8002c98 <findslot>
 8002e44:	4604      	mov	r4, r0
 8002e46:	b930      	cbnz	r0, 8002e56 <_close+0x1a>
 8002e48:	f000 f9cc 	bl	80031e4 <__errno>
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	6003      	str	r3, [r0, #0]
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	bd38      	pop	{r3, r4, r5, pc}
 8002e56:	3d01      	subs	r5, #1
 8002e58:	2d01      	cmp	r5, #1
 8002e5a:	d809      	bhi.n	8002e70 <_close+0x34>
 8002e5c:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <_close+0x40>)
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d104      	bne.n	8002e70 <_close+0x34>
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	6023      	str	r3, [r4, #0]
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e7f1      	b.n	8002e54 <_close+0x18>
 8002e70:	6820      	ldr	r0, [r4, #0]
 8002e72:	f7ff ffd6 	bl	8002e22 <_swiclose>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d0f5      	beq.n	8002e66 <_close+0x2a>
 8002e7a:	e7eb      	b.n	8002e54 <_close+0x18>
 8002e7c:	2000015c 	.word	0x2000015c

08002e80 <_swistat>:
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	460c      	mov	r4, r1
 8002e84:	f7ff ff08 	bl	8002c98 <findslot>
 8002e88:	4605      	mov	r5, r0
 8002e8a:	b930      	cbnz	r0, 8002e9a <_swistat+0x1a>
 8002e8c:	f000 f9aa 	bl	80031e4 <__errno>
 8002e90:	2309      	movs	r3, #9
 8002e92:	6003      	str	r3, [r0, #0]
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	bd70      	pop	{r4, r5, r6, pc}
 8002e9a:	6863      	ldr	r3, [r4, #4]
 8002e9c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ea0:	6063      	str	r3, [r4, #4]
 8002ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ea6:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002ea8:	260c      	movs	r6, #12
 8002eaa:	4630      	mov	r0, r6
 8002eac:	4629      	mov	r1, r5
 8002eae:	beab      	bkpt	0x00ab
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f7ff ff18 	bl	8002ce8 <checkerror>
 8002eb8:	1c43      	adds	r3, r0, #1
 8002eba:	d0eb      	beq.n	8002e94 <_swistat+0x14>
 8002ebc:	6120      	str	r0, [r4, #16]
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	e7ea      	b.n	8002e98 <_swistat+0x18>

08002ec2 <_fstat>:
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	b510      	push	{r4, lr}
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4604      	mov	r4, r0
 8002eca:	2258      	movs	r2, #88	@ 0x58
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 f93a 	bl	8003146 <memset>
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eda:	f7ff bfd1 	b.w	8002e80 <_swistat>

08002ede <_isatty>:
 8002ede:	b570      	push	{r4, r5, r6, lr}
 8002ee0:	f7ff feda 	bl	8002c98 <findslot>
 8002ee4:	2409      	movs	r4, #9
 8002ee6:	4605      	mov	r5, r0
 8002ee8:	b920      	cbnz	r0, 8002ef4 <_isatty+0x16>
 8002eea:	f000 f97b 	bl	80031e4 <__errno>
 8002eee:	6004      	str	r4, [r0, #0]
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	bd70      	pop	{r4, r5, r6, pc}
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	beab      	bkpt	0x00ab
 8002efa:	4604      	mov	r4, r0
 8002efc:	2c01      	cmp	r4, #1
 8002efe:	4620      	mov	r0, r4
 8002f00:	d0f7      	beq.n	8002ef2 <_isatty+0x14>
 8002f02:	f000 f96f 	bl	80031e4 <__errno>
 8002f06:	2513      	movs	r5, #19
 8002f08:	4604      	mov	r4, r0
 8002f0a:	2600      	movs	r6, #0
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	4631      	mov	r1, r6
 8002f10:	beab      	bkpt	0x00ab
 8002f12:	4605      	mov	r5, r0
 8002f14:	6025      	str	r5, [r4, #0]
 8002f16:	e7eb      	b.n	8002ef0 <_isatty+0x12>

08002f18 <std>:
 8002f18:	2300      	movs	r3, #0
 8002f1a:	b510      	push	{r4, lr}
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f26:	6083      	str	r3, [r0, #8]
 8002f28:	8181      	strh	r1, [r0, #12]
 8002f2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f2c:	81c2      	strh	r2, [r0, #14]
 8002f2e:	6183      	str	r3, [r0, #24]
 8002f30:	4619      	mov	r1, r3
 8002f32:	2208      	movs	r2, #8
 8002f34:	305c      	adds	r0, #92	@ 0x5c
 8002f36:	f000 f906 	bl	8003146 <memset>
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <std+0x58>)
 8002f3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f74 <std+0x5c>)
 8002f40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f42:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <std+0x60>)
 8002f44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f46:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <std+0x64>)
 8002f48:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <std+0x68>)
 8002f4c:	6224      	str	r4, [r4, #32]
 8002f4e:	429c      	cmp	r4, r3
 8002f50:	d006      	beq.n	8002f60 <std+0x48>
 8002f52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f56:	4294      	cmp	r4, r2
 8002f58:	d002      	beq.n	8002f60 <std+0x48>
 8002f5a:	33d0      	adds	r3, #208	@ 0xd0
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	d105      	bne.n	8002f6c <std+0x54>
 8002f60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f68:	f000 b966 	b.w	8003238 <__retarget_lock_init_recursive>
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	bf00      	nop
 8002f70:	080030c1 	.word	0x080030c1
 8002f74:	080030e3 	.word	0x080030e3
 8002f78:	0800311b 	.word	0x0800311b
 8002f7c:	0800313f 	.word	0x0800313f
 8002f80:	200001fc 	.word	0x200001fc

08002f84 <stdio_exit_handler>:
 8002f84:	4a02      	ldr	r2, [pc, #8]	@ (8002f90 <stdio_exit_handler+0xc>)
 8002f86:	4903      	ldr	r1, [pc, #12]	@ (8002f94 <stdio_exit_handler+0x10>)
 8002f88:	4803      	ldr	r0, [pc, #12]	@ (8002f98 <stdio_exit_handler+0x14>)
 8002f8a:	f000 b869 	b.w	8003060 <_fwalk_sglue>
 8002f8e:	bf00      	nop
 8002f90:	2000000c 	.word	0x2000000c
 8002f94:	08003ad9 	.word	0x08003ad9
 8002f98:	2000001c 	.word	0x2000001c

08002f9c <cleanup_stdio>:
 8002f9c:	6841      	ldr	r1, [r0, #4]
 8002f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd0 <cleanup_stdio+0x34>)
 8002fa0:	4299      	cmp	r1, r3
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	d001      	beq.n	8002fac <cleanup_stdio+0x10>
 8002fa8:	f000 fd96 	bl	8003ad8 <_fflush_r>
 8002fac:	68a1      	ldr	r1, [r4, #8]
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <cleanup_stdio+0x38>)
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	d002      	beq.n	8002fba <cleanup_stdio+0x1e>
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f000 fd8f 	bl	8003ad8 <_fflush_r>
 8002fba:	68e1      	ldr	r1, [r4, #12]
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <cleanup_stdio+0x3c>)
 8002fbe:	4299      	cmp	r1, r3
 8002fc0:	d004      	beq.n	8002fcc <cleanup_stdio+0x30>
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fc8:	f000 bd86 	b.w	8003ad8 <_fflush_r>
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	bf00      	nop
 8002fd0:	200001fc 	.word	0x200001fc
 8002fd4:	20000264 	.word	0x20000264
 8002fd8:	200002cc 	.word	0x200002cc

08002fdc <global_stdio_init.part.0>:
 8002fdc:	b510      	push	{r4, lr}
 8002fde:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <global_stdio_init.part.0+0x30>)
 8002fe0:	4c0b      	ldr	r4, [pc, #44]	@ (8003010 <global_stdio_init.part.0+0x34>)
 8002fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8003014 <global_stdio_init.part.0+0x38>)
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2104      	movs	r1, #4
 8002fec:	f7ff ff94 	bl	8002f18 <std>
 8002ff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	2109      	movs	r1, #9
 8002ff8:	f7ff ff8e 	bl	8002f18 <std>
 8002ffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003000:	2202      	movs	r2, #2
 8003002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003006:	2112      	movs	r1, #18
 8003008:	f7ff bf86 	b.w	8002f18 <std>
 800300c:	20000334 	.word	0x20000334
 8003010:	200001fc 	.word	0x200001fc
 8003014:	08002f85 	.word	0x08002f85

08003018 <__sfp_lock_acquire>:
 8003018:	4801      	ldr	r0, [pc, #4]	@ (8003020 <__sfp_lock_acquire+0x8>)
 800301a:	f000 b90e 	b.w	800323a <__retarget_lock_acquire_recursive>
 800301e:	bf00      	nop
 8003020:	2000033d 	.word	0x2000033d

08003024 <__sfp_lock_release>:
 8003024:	4801      	ldr	r0, [pc, #4]	@ (800302c <__sfp_lock_release+0x8>)
 8003026:	f000 b909 	b.w	800323c <__retarget_lock_release_recursive>
 800302a:	bf00      	nop
 800302c:	2000033d 	.word	0x2000033d

08003030 <__sinit>:
 8003030:	b510      	push	{r4, lr}
 8003032:	4604      	mov	r4, r0
 8003034:	f7ff fff0 	bl	8003018 <__sfp_lock_acquire>
 8003038:	6a23      	ldr	r3, [r4, #32]
 800303a:	b11b      	cbz	r3, 8003044 <__sinit+0x14>
 800303c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003040:	f7ff bff0 	b.w	8003024 <__sfp_lock_release>
 8003044:	4b04      	ldr	r3, [pc, #16]	@ (8003058 <__sinit+0x28>)
 8003046:	6223      	str	r3, [r4, #32]
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <__sinit+0x2c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f5      	bne.n	800303c <__sinit+0xc>
 8003050:	f7ff ffc4 	bl	8002fdc <global_stdio_init.part.0>
 8003054:	e7f2      	b.n	800303c <__sinit+0xc>
 8003056:	bf00      	nop
 8003058:	08002f9d 	.word	0x08002f9d
 800305c:	20000334 	.word	0x20000334

08003060 <_fwalk_sglue>:
 8003060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003064:	4607      	mov	r7, r0
 8003066:	4688      	mov	r8, r1
 8003068:	4614      	mov	r4, r2
 800306a:	2600      	movs	r6, #0
 800306c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003070:	f1b9 0901 	subs.w	r9, r9, #1
 8003074:	d505      	bpl.n	8003082 <_fwalk_sglue+0x22>
 8003076:	6824      	ldr	r4, [r4, #0]
 8003078:	2c00      	cmp	r4, #0
 800307a:	d1f7      	bne.n	800306c <_fwalk_sglue+0xc>
 800307c:	4630      	mov	r0, r6
 800307e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003082:	89ab      	ldrh	r3, [r5, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d907      	bls.n	8003098 <_fwalk_sglue+0x38>
 8003088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800308c:	3301      	adds	r3, #1
 800308e:	d003      	beq.n	8003098 <_fwalk_sglue+0x38>
 8003090:	4629      	mov	r1, r5
 8003092:	4638      	mov	r0, r7
 8003094:	47c0      	blx	r8
 8003096:	4306      	orrs	r6, r0
 8003098:	3568      	adds	r5, #104	@ 0x68
 800309a:	e7e9      	b.n	8003070 <_fwalk_sglue+0x10>

0800309c <iprintf>:
 800309c:	b40f      	push	{r0, r1, r2, r3}
 800309e:	b507      	push	{r0, r1, r2, lr}
 80030a0:	4906      	ldr	r1, [pc, #24]	@ (80030bc <iprintf+0x20>)
 80030a2:	ab04      	add	r3, sp, #16
 80030a4:	6808      	ldr	r0, [r1, #0]
 80030a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80030aa:	6881      	ldr	r1, [r0, #8]
 80030ac:	9301      	str	r3, [sp, #4]
 80030ae:	f000 f9e9 	bl	8003484 <_vfiprintf_r>
 80030b2:	b003      	add	sp, #12
 80030b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030b8:	b004      	add	sp, #16
 80030ba:	4770      	bx	lr
 80030bc:	20000018 	.word	0x20000018

080030c0 <__sread>:
 80030c0:	b510      	push	{r4, lr}
 80030c2:	460c      	mov	r4, r1
 80030c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030c8:	f000 f868 	bl	800319c <_read_r>
 80030cc:	2800      	cmp	r0, #0
 80030ce:	bfab      	itete	ge
 80030d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030d2:	89a3      	ldrhlt	r3, [r4, #12]
 80030d4:	181b      	addge	r3, r3, r0
 80030d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030da:	bfac      	ite	ge
 80030dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030de:	81a3      	strhlt	r3, [r4, #12]
 80030e0:	bd10      	pop	{r4, pc}

080030e2 <__swrite>:
 80030e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030e6:	461f      	mov	r7, r3
 80030e8:	898b      	ldrh	r3, [r1, #12]
 80030ea:	05db      	lsls	r3, r3, #23
 80030ec:	4605      	mov	r5, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	4616      	mov	r6, r2
 80030f2:	d505      	bpl.n	8003100 <__swrite+0x1e>
 80030f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030f8:	2302      	movs	r3, #2
 80030fa:	2200      	movs	r2, #0
 80030fc:	f000 f83c 	bl	8003178 <_lseek_r>
 8003100:	89a3      	ldrh	r3, [r4, #12]
 8003102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003106:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800310a:	81a3      	strh	r3, [r4, #12]
 800310c:	4632      	mov	r2, r6
 800310e:	463b      	mov	r3, r7
 8003110:	4628      	mov	r0, r5
 8003112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003116:	f000 b853 	b.w	80031c0 <_write_r>

0800311a <__sseek>:
 800311a:	b510      	push	{r4, lr}
 800311c:	460c      	mov	r4, r1
 800311e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003122:	f000 f829 	bl	8003178 <_lseek_r>
 8003126:	1c43      	adds	r3, r0, #1
 8003128:	89a3      	ldrh	r3, [r4, #12]
 800312a:	bf15      	itete	ne
 800312c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800312e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003132:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003136:	81a3      	strheq	r3, [r4, #12]
 8003138:	bf18      	it	ne
 800313a:	81a3      	strhne	r3, [r4, #12]
 800313c:	bd10      	pop	{r4, pc}

0800313e <__sclose>:
 800313e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003142:	f000 b809 	b.w	8003158 <_close_r>

08003146 <memset>:
 8003146:	4402      	add	r2, r0
 8003148:	4603      	mov	r3, r0
 800314a:	4293      	cmp	r3, r2
 800314c:	d100      	bne.n	8003150 <memset+0xa>
 800314e:	4770      	bx	lr
 8003150:	f803 1b01 	strb.w	r1, [r3], #1
 8003154:	e7f9      	b.n	800314a <memset+0x4>
	...

08003158 <_close_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	4d06      	ldr	r5, [pc, #24]	@ (8003174 <_close_r+0x1c>)
 800315c:	2300      	movs	r3, #0
 800315e:	4604      	mov	r4, r0
 8003160:	4608      	mov	r0, r1
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	f7ff fe6a 	bl	8002e3c <_close>
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	d102      	bne.n	8003172 <_close_r+0x1a>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	b103      	cbz	r3, 8003172 <_close_r+0x1a>
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	bd38      	pop	{r3, r4, r5, pc}
 8003174:	20000338 	.word	0x20000338

08003178 <_lseek_r>:
 8003178:	b538      	push	{r3, r4, r5, lr}
 800317a:	4d07      	ldr	r5, [pc, #28]	@ (8003198 <_lseek_r+0x20>)
 800317c:	4604      	mov	r4, r0
 800317e:	4608      	mov	r0, r1
 8003180:	4611      	mov	r1, r2
 8003182:	2200      	movs	r2, #0
 8003184:	602a      	str	r2, [r5, #0]
 8003186:	461a      	mov	r2, r3
 8003188:	f7ff fe19 	bl	8002dbe <_lseek>
 800318c:	1c43      	adds	r3, r0, #1
 800318e:	d102      	bne.n	8003196 <_lseek_r+0x1e>
 8003190:	682b      	ldr	r3, [r5, #0]
 8003192:	b103      	cbz	r3, 8003196 <_lseek_r+0x1e>
 8003194:	6023      	str	r3, [r4, #0]
 8003196:	bd38      	pop	{r3, r4, r5, pc}
 8003198:	20000338 	.word	0x20000338

0800319c <_read_r>:
 800319c:	b538      	push	{r3, r4, r5, lr}
 800319e:	4d07      	ldr	r5, [pc, #28]	@ (80031bc <_read_r+0x20>)
 80031a0:	4604      	mov	r4, r0
 80031a2:	4608      	mov	r0, r1
 80031a4:	4611      	mov	r1, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	602a      	str	r2, [r5, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f7ff fdb1 	bl	8002d12 <_read>
 80031b0:	1c43      	adds	r3, r0, #1
 80031b2:	d102      	bne.n	80031ba <_read_r+0x1e>
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	b103      	cbz	r3, 80031ba <_read_r+0x1e>
 80031b8:	6023      	str	r3, [r4, #0]
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
 80031bc:	20000338 	.word	0x20000338

080031c0 <_write_r>:
 80031c0:	b538      	push	{r3, r4, r5, lr}
 80031c2:	4d07      	ldr	r5, [pc, #28]	@ (80031e0 <_write_r+0x20>)
 80031c4:	4604      	mov	r4, r0
 80031c6:	4608      	mov	r0, r1
 80031c8:	4611      	mov	r1, r2
 80031ca:	2200      	movs	r2, #0
 80031cc:	602a      	str	r2, [r5, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f7ff fe07 	bl	8002de2 <_write>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d102      	bne.n	80031de <_write_r+0x1e>
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	b103      	cbz	r3, 80031de <_write_r+0x1e>
 80031dc:	6023      	str	r3, [r4, #0]
 80031de:	bd38      	pop	{r3, r4, r5, pc}
 80031e0:	20000338 	.word	0x20000338

080031e4 <__errno>:
 80031e4:	4b01      	ldr	r3, [pc, #4]	@ (80031ec <__errno+0x8>)
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	20000018 	.word	0x20000018

080031f0 <__libc_init_array>:
 80031f0:	b570      	push	{r4, r5, r6, lr}
 80031f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003228 <__libc_init_array+0x38>)
 80031f4:	4c0d      	ldr	r4, [pc, #52]	@ (800322c <__libc_init_array+0x3c>)
 80031f6:	1b64      	subs	r4, r4, r5
 80031f8:	10a4      	asrs	r4, r4, #2
 80031fa:	2600      	movs	r6, #0
 80031fc:	42a6      	cmp	r6, r4
 80031fe:	d109      	bne.n	8003214 <__libc_init_array+0x24>
 8003200:	4d0b      	ldr	r5, [pc, #44]	@ (8003230 <__libc_init_array+0x40>)
 8003202:	4c0c      	ldr	r4, [pc, #48]	@ (8003234 <__libc_init_array+0x44>)
 8003204:	f000 fdb8 	bl	8003d78 <_init>
 8003208:	1b64      	subs	r4, r4, r5
 800320a:	10a4      	asrs	r4, r4, #2
 800320c:	2600      	movs	r6, #0
 800320e:	42a6      	cmp	r6, r4
 8003210:	d105      	bne.n	800321e <__libc_init_array+0x2e>
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	f855 3b04 	ldr.w	r3, [r5], #4
 8003218:	4798      	blx	r3
 800321a:	3601      	adds	r6, #1
 800321c:	e7ee      	b.n	80031fc <__libc_init_array+0xc>
 800321e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003222:	4798      	blx	r3
 8003224:	3601      	adds	r6, #1
 8003226:	e7f2      	b.n	800320e <__libc_init_array+0x1e>
 8003228:	08003e1c 	.word	0x08003e1c
 800322c:	08003e1c 	.word	0x08003e1c
 8003230:	08003e1c 	.word	0x08003e1c
 8003234:	08003e20 	.word	0x08003e20

08003238 <__retarget_lock_init_recursive>:
 8003238:	4770      	bx	lr

0800323a <__retarget_lock_acquire_recursive>:
 800323a:	4770      	bx	lr

0800323c <__retarget_lock_release_recursive>:
 800323c:	4770      	bx	lr
	...

08003240 <_free_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	4605      	mov	r5, r0
 8003244:	2900      	cmp	r1, #0
 8003246:	d041      	beq.n	80032cc <_free_r+0x8c>
 8003248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800324c:	1f0c      	subs	r4, r1, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	bfb8      	it	lt
 8003252:	18e4      	addlt	r4, r4, r3
 8003254:	f000 f8e0 	bl	8003418 <__malloc_lock>
 8003258:	4a1d      	ldr	r2, [pc, #116]	@ (80032d0 <_free_r+0x90>)
 800325a:	6813      	ldr	r3, [r2, #0]
 800325c:	b933      	cbnz	r3, 800326c <_free_r+0x2c>
 800325e:	6063      	str	r3, [r4, #4]
 8003260:	6014      	str	r4, [r2, #0]
 8003262:	4628      	mov	r0, r5
 8003264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003268:	f000 b8dc 	b.w	8003424 <__malloc_unlock>
 800326c:	42a3      	cmp	r3, r4
 800326e:	d908      	bls.n	8003282 <_free_r+0x42>
 8003270:	6820      	ldr	r0, [r4, #0]
 8003272:	1821      	adds	r1, r4, r0
 8003274:	428b      	cmp	r3, r1
 8003276:	bf01      	itttt	eq
 8003278:	6819      	ldreq	r1, [r3, #0]
 800327a:	685b      	ldreq	r3, [r3, #4]
 800327c:	1809      	addeq	r1, r1, r0
 800327e:	6021      	streq	r1, [r4, #0]
 8003280:	e7ed      	b.n	800325e <_free_r+0x1e>
 8003282:	461a      	mov	r2, r3
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	b10b      	cbz	r3, 800328c <_free_r+0x4c>
 8003288:	42a3      	cmp	r3, r4
 800328a:	d9fa      	bls.n	8003282 <_free_r+0x42>
 800328c:	6811      	ldr	r1, [r2, #0]
 800328e:	1850      	adds	r0, r2, r1
 8003290:	42a0      	cmp	r0, r4
 8003292:	d10b      	bne.n	80032ac <_free_r+0x6c>
 8003294:	6820      	ldr	r0, [r4, #0]
 8003296:	4401      	add	r1, r0
 8003298:	1850      	adds	r0, r2, r1
 800329a:	4283      	cmp	r3, r0
 800329c:	6011      	str	r1, [r2, #0]
 800329e:	d1e0      	bne.n	8003262 <_free_r+0x22>
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	6053      	str	r3, [r2, #4]
 80032a6:	4408      	add	r0, r1
 80032a8:	6010      	str	r0, [r2, #0]
 80032aa:	e7da      	b.n	8003262 <_free_r+0x22>
 80032ac:	d902      	bls.n	80032b4 <_free_r+0x74>
 80032ae:	230c      	movs	r3, #12
 80032b0:	602b      	str	r3, [r5, #0]
 80032b2:	e7d6      	b.n	8003262 <_free_r+0x22>
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	1821      	adds	r1, r4, r0
 80032b8:	428b      	cmp	r3, r1
 80032ba:	bf04      	itt	eq
 80032bc:	6819      	ldreq	r1, [r3, #0]
 80032be:	685b      	ldreq	r3, [r3, #4]
 80032c0:	6063      	str	r3, [r4, #4]
 80032c2:	bf04      	itt	eq
 80032c4:	1809      	addeq	r1, r1, r0
 80032c6:	6021      	streq	r1, [r4, #0]
 80032c8:	6054      	str	r4, [r2, #4]
 80032ca:	e7ca      	b.n	8003262 <_free_r+0x22>
 80032cc:	bd38      	pop	{r3, r4, r5, pc}
 80032ce:	bf00      	nop
 80032d0:	20000344 	.word	0x20000344

080032d4 <sbrk_aligned>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4e0f      	ldr	r6, [pc, #60]	@ (8003314 <sbrk_aligned+0x40>)
 80032d8:	460c      	mov	r4, r1
 80032da:	6831      	ldr	r1, [r6, #0]
 80032dc:	4605      	mov	r5, r0
 80032de:	b911      	cbnz	r1, 80032e6 <sbrk_aligned+0x12>
 80032e0:	f000 fcb6 	bl	8003c50 <_sbrk_r>
 80032e4:	6030      	str	r0, [r6, #0]
 80032e6:	4621      	mov	r1, r4
 80032e8:	4628      	mov	r0, r5
 80032ea:	f000 fcb1 	bl	8003c50 <_sbrk_r>
 80032ee:	1c43      	adds	r3, r0, #1
 80032f0:	d103      	bne.n	80032fa <sbrk_aligned+0x26>
 80032f2:	f04f 34ff 	mov.w	r4, #4294967295
 80032f6:	4620      	mov	r0, r4
 80032f8:	bd70      	pop	{r4, r5, r6, pc}
 80032fa:	1cc4      	adds	r4, r0, #3
 80032fc:	f024 0403 	bic.w	r4, r4, #3
 8003300:	42a0      	cmp	r0, r4
 8003302:	d0f8      	beq.n	80032f6 <sbrk_aligned+0x22>
 8003304:	1a21      	subs	r1, r4, r0
 8003306:	4628      	mov	r0, r5
 8003308:	f000 fca2 	bl	8003c50 <_sbrk_r>
 800330c:	3001      	adds	r0, #1
 800330e:	d1f2      	bne.n	80032f6 <sbrk_aligned+0x22>
 8003310:	e7ef      	b.n	80032f2 <sbrk_aligned+0x1e>
 8003312:	bf00      	nop
 8003314:	20000340 	.word	0x20000340

08003318 <_malloc_r>:
 8003318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800331c:	1ccd      	adds	r5, r1, #3
 800331e:	f025 0503 	bic.w	r5, r5, #3
 8003322:	3508      	adds	r5, #8
 8003324:	2d0c      	cmp	r5, #12
 8003326:	bf38      	it	cc
 8003328:	250c      	movcc	r5, #12
 800332a:	2d00      	cmp	r5, #0
 800332c:	4606      	mov	r6, r0
 800332e:	db01      	blt.n	8003334 <_malloc_r+0x1c>
 8003330:	42a9      	cmp	r1, r5
 8003332:	d904      	bls.n	800333e <_malloc_r+0x26>
 8003334:	230c      	movs	r3, #12
 8003336:	6033      	str	r3, [r6, #0]
 8003338:	2000      	movs	r0, #0
 800333a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800333e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003414 <_malloc_r+0xfc>
 8003342:	f000 f869 	bl	8003418 <__malloc_lock>
 8003346:	f8d8 3000 	ldr.w	r3, [r8]
 800334a:	461c      	mov	r4, r3
 800334c:	bb44      	cbnz	r4, 80033a0 <_malloc_r+0x88>
 800334e:	4629      	mov	r1, r5
 8003350:	4630      	mov	r0, r6
 8003352:	f7ff ffbf 	bl	80032d4 <sbrk_aligned>
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	4604      	mov	r4, r0
 800335a:	d158      	bne.n	800340e <_malloc_r+0xf6>
 800335c:	f8d8 4000 	ldr.w	r4, [r8]
 8003360:	4627      	mov	r7, r4
 8003362:	2f00      	cmp	r7, #0
 8003364:	d143      	bne.n	80033ee <_malloc_r+0xd6>
 8003366:	2c00      	cmp	r4, #0
 8003368:	d04b      	beq.n	8003402 <_malloc_r+0xea>
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	4639      	mov	r1, r7
 800336e:	4630      	mov	r0, r6
 8003370:	eb04 0903 	add.w	r9, r4, r3
 8003374:	f000 fc6c 	bl	8003c50 <_sbrk_r>
 8003378:	4581      	cmp	r9, r0
 800337a:	d142      	bne.n	8003402 <_malloc_r+0xea>
 800337c:	6821      	ldr	r1, [r4, #0]
 800337e:	1a6d      	subs	r5, r5, r1
 8003380:	4629      	mov	r1, r5
 8003382:	4630      	mov	r0, r6
 8003384:	f7ff ffa6 	bl	80032d4 <sbrk_aligned>
 8003388:	3001      	adds	r0, #1
 800338a:	d03a      	beq.n	8003402 <_malloc_r+0xea>
 800338c:	6823      	ldr	r3, [r4, #0]
 800338e:	442b      	add	r3, r5
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	f8d8 3000 	ldr.w	r3, [r8]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	bb62      	cbnz	r2, 80033f4 <_malloc_r+0xdc>
 800339a:	f8c8 7000 	str.w	r7, [r8]
 800339e:	e00f      	b.n	80033c0 <_malloc_r+0xa8>
 80033a0:	6822      	ldr	r2, [r4, #0]
 80033a2:	1b52      	subs	r2, r2, r5
 80033a4:	d420      	bmi.n	80033e8 <_malloc_r+0xd0>
 80033a6:	2a0b      	cmp	r2, #11
 80033a8:	d917      	bls.n	80033da <_malloc_r+0xc2>
 80033aa:	1961      	adds	r1, r4, r5
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	6025      	str	r5, [r4, #0]
 80033b0:	bf18      	it	ne
 80033b2:	6059      	strne	r1, [r3, #4]
 80033b4:	6863      	ldr	r3, [r4, #4]
 80033b6:	bf08      	it	eq
 80033b8:	f8c8 1000 	streq.w	r1, [r8]
 80033bc:	5162      	str	r2, [r4, r5]
 80033be:	604b      	str	r3, [r1, #4]
 80033c0:	4630      	mov	r0, r6
 80033c2:	f000 f82f 	bl	8003424 <__malloc_unlock>
 80033c6:	f104 000b 	add.w	r0, r4, #11
 80033ca:	1d23      	adds	r3, r4, #4
 80033cc:	f020 0007 	bic.w	r0, r0, #7
 80033d0:	1ac2      	subs	r2, r0, r3
 80033d2:	bf1c      	itt	ne
 80033d4:	1a1b      	subne	r3, r3, r0
 80033d6:	50a3      	strne	r3, [r4, r2]
 80033d8:	e7af      	b.n	800333a <_malloc_r+0x22>
 80033da:	6862      	ldr	r2, [r4, #4]
 80033dc:	42a3      	cmp	r3, r4
 80033de:	bf0c      	ite	eq
 80033e0:	f8c8 2000 	streq.w	r2, [r8]
 80033e4:	605a      	strne	r2, [r3, #4]
 80033e6:	e7eb      	b.n	80033c0 <_malloc_r+0xa8>
 80033e8:	4623      	mov	r3, r4
 80033ea:	6864      	ldr	r4, [r4, #4]
 80033ec:	e7ae      	b.n	800334c <_malloc_r+0x34>
 80033ee:	463c      	mov	r4, r7
 80033f0:	687f      	ldr	r7, [r7, #4]
 80033f2:	e7b6      	b.n	8003362 <_malloc_r+0x4a>
 80033f4:	461a      	mov	r2, r3
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	d1fb      	bne.n	80033f4 <_malloc_r+0xdc>
 80033fc:	2300      	movs	r3, #0
 80033fe:	6053      	str	r3, [r2, #4]
 8003400:	e7de      	b.n	80033c0 <_malloc_r+0xa8>
 8003402:	230c      	movs	r3, #12
 8003404:	6033      	str	r3, [r6, #0]
 8003406:	4630      	mov	r0, r6
 8003408:	f000 f80c 	bl	8003424 <__malloc_unlock>
 800340c:	e794      	b.n	8003338 <_malloc_r+0x20>
 800340e:	6005      	str	r5, [r0, #0]
 8003410:	e7d6      	b.n	80033c0 <_malloc_r+0xa8>
 8003412:	bf00      	nop
 8003414:	20000344 	.word	0x20000344

08003418 <__malloc_lock>:
 8003418:	4801      	ldr	r0, [pc, #4]	@ (8003420 <__malloc_lock+0x8>)
 800341a:	f7ff bf0e 	b.w	800323a <__retarget_lock_acquire_recursive>
 800341e:	bf00      	nop
 8003420:	2000033c 	.word	0x2000033c

08003424 <__malloc_unlock>:
 8003424:	4801      	ldr	r0, [pc, #4]	@ (800342c <__malloc_unlock+0x8>)
 8003426:	f7ff bf09 	b.w	800323c <__retarget_lock_release_recursive>
 800342a:	bf00      	nop
 800342c:	2000033c 	.word	0x2000033c

08003430 <__sfputc_r>:
 8003430:	6893      	ldr	r3, [r2, #8]
 8003432:	3b01      	subs	r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	b410      	push	{r4}
 8003438:	6093      	str	r3, [r2, #8]
 800343a:	da08      	bge.n	800344e <__sfputc_r+0x1e>
 800343c:	6994      	ldr	r4, [r2, #24]
 800343e:	42a3      	cmp	r3, r4
 8003440:	db01      	blt.n	8003446 <__sfputc_r+0x16>
 8003442:	290a      	cmp	r1, #10
 8003444:	d103      	bne.n	800344e <__sfputc_r+0x1e>
 8003446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800344a:	f000 bb6d 	b.w	8003b28 <__swbuf_r>
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	1c58      	adds	r0, r3, #1
 8003452:	6010      	str	r0, [r2, #0]
 8003454:	7019      	strb	r1, [r3, #0]
 8003456:	4608      	mov	r0, r1
 8003458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800345c:	4770      	bx	lr

0800345e <__sfputs_r>:
 800345e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003460:	4606      	mov	r6, r0
 8003462:	460f      	mov	r7, r1
 8003464:	4614      	mov	r4, r2
 8003466:	18d5      	adds	r5, r2, r3
 8003468:	42ac      	cmp	r4, r5
 800346a:	d101      	bne.n	8003470 <__sfputs_r+0x12>
 800346c:	2000      	movs	r0, #0
 800346e:	e007      	b.n	8003480 <__sfputs_r+0x22>
 8003470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003474:	463a      	mov	r2, r7
 8003476:	4630      	mov	r0, r6
 8003478:	f7ff ffda 	bl	8003430 <__sfputc_r>
 800347c:	1c43      	adds	r3, r0, #1
 800347e:	d1f3      	bne.n	8003468 <__sfputs_r+0xa>
 8003480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003484 <_vfiprintf_r>:
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003488:	460d      	mov	r5, r1
 800348a:	b09d      	sub	sp, #116	@ 0x74
 800348c:	4614      	mov	r4, r2
 800348e:	4698      	mov	r8, r3
 8003490:	4606      	mov	r6, r0
 8003492:	b118      	cbz	r0, 800349c <_vfiprintf_r+0x18>
 8003494:	6a03      	ldr	r3, [r0, #32]
 8003496:	b90b      	cbnz	r3, 800349c <_vfiprintf_r+0x18>
 8003498:	f7ff fdca 	bl	8003030 <__sinit>
 800349c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800349e:	07d9      	lsls	r1, r3, #31
 80034a0:	d405      	bmi.n	80034ae <_vfiprintf_r+0x2a>
 80034a2:	89ab      	ldrh	r3, [r5, #12]
 80034a4:	059a      	lsls	r2, r3, #22
 80034a6:	d402      	bmi.n	80034ae <_vfiprintf_r+0x2a>
 80034a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034aa:	f7ff fec6 	bl	800323a <__retarget_lock_acquire_recursive>
 80034ae:	89ab      	ldrh	r3, [r5, #12]
 80034b0:	071b      	lsls	r3, r3, #28
 80034b2:	d501      	bpl.n	80034b8 <_vfiprintf_r+0x34>
 80034b4:	692b      	ldr	r3, [r5, #16]
 80034b6:	b99b      	cbnz	r3, 80034e0 <_vfiprintf_r+0x5c>
 80034b8:	4629      	mov	r1, r5
 80034ba:	4630      	mov	r0, r6
 80034bc:	f000 fb72 	bl	8003ba4 <__swsetup_r>
 80034c0:	b170      	cbz	r0, 80034e0 <_vfiprintf_r+0x5c>
 80034c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034c4:	07dc      	lsls	r4, r3, #31
 80034c6:	d504      	bpl.n	80034d2 <_vfiprintf_r+0x4e>
 80034c8:	f04f 30ff 	mov.w	r0, #4294967295
 80034cc:	b01d      	add	sp, #116	@ 0x74
 80034ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d2:	89ab      	ldrh	r3, [r5, #12]
 80034d4:	0598      	lsls	r0, r3, #22
 80034d6:	d4f7      	bmi.n	80034c8 <_vfiprintf_r+0x44>
 80034d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034da:	f7ff feaf 	bl	800323c <__retarget_lock_release_recursive>
 80034de:	e7f3      	b.n	80034c8 <_vfiprintf_r+0x44>
 80034e0:	2300      	movs	r3, #0
 80034e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80034e4:	2320      	movs	r3, #32
 80034e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80034ee:	2330      	movs	r3, #48	@ 0x30
 80034f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80036a0 <_vfiprintf_r+0x21c>
 80034f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80034f8:	f04f 0901 	mov.w	r9, #1
 80034fc:	4623      	mov	r3, r4
 80034fe:	469a      	mov	sl, r3
 8003500:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003504:	b10a      	cbz	r2, 800350a <_vfiprintf_r+0x86>
 8003506:	2a25      	cmp	r2, #37	@ 0x25
 8003508:	d1f9      	bne.n	80034fe <_vfiprintf_r+0x7a>
 800350a:	ebba 0b04 	subs.w	fp, sl, r4
 800350e:	d00b      	beq.n	8003528 <_vfiprintf_r+0xa4>
 8003510:	465b      	mov	r3, fp
 8003512:	4622      	mov	r2, r4
 8003514:	4629      	mov	r1, r5
 8003516:	4630      	mov	r0, r6
 8003518:	f7ff ffa1 	bl	800345e <__sfputs_r>
 800351c:	3001      	adds	r0, #1
 800351e:	f000 80a7 	beq.w	8003670 <_vfiprintf_r+0x1ec>
 8003522:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003524:	445a      	add	r2, fp
 8003526:	9209      	str	r2, [sp, #36]	@ 0x24
 8003528:	f89a 3000 	ldrb.w	r3, [sl]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 809f 	beq.w	8003670 <_vfiprintf_r+0x1ec>
 8003532:	2300      	movs	r3, #0
 8003534:	f04f 32ff 	mov.w	r2, #4294967295
 8003538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800353c:	f10a 0a01 	add.w	sl, sl, #1
 8003540:	9304      	str	r3, [sp, #16]
 8003542:	9307      	str	r3, [sp, #28]
 8003544:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003548:	931a      	str	r3, [sp, #104]	@ 0x68
 800354a:	4654      	mov	r4, sl
 800354c:	2205      	movs	r2, #5
 800354e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003552:	4853      	ldr	r0, [pc, #332]	@ (80036a0 <_vfiprintf_r+0x21c>)
 8003554:	f7fc fe4c 	bl	80001f0 <memchr>
 8003558:	9a04      	ldr	r2, [sp, #16]
 800355a:	b9d8      	cbnz	r0, 8003594 <_vfiprintf_r+0x110>
 800355c:	06d1      	lsls	r1, r2, #27
 800355e:	bf44      	itt	mi
 8003560:	2320      	movmi	r3, #32
 8003562:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003566:	0713      	lsls	r3, r2, #28
 8003568:	bf44      	itt	mi
 800356a:	232b      	movmi	r3, #43	@ 0x2b
 800356c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003570:	f89a 3000 	ldrb.w	r3, [sl]
 8003574:	2b2a      	cmp	r3, #42	@ 0x2a
 8003576:	d015      	beq.n	80035a4 <_vfiprintf_r+0x120>
 8003578:	9a07      	ldr	r2, [sp, #28]
 800357a:	4654      	mov	r4, sl
 800357c:	2000      	movs	r0, #0
 800357e:	f04f 0c0a 	mov.w	ip, #10
 8003582:	4621      	mov	r1, r4
 8003584:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003588:	3b30      	subs	r3, #48	@ 0x30
 800358a:	2b09      	cmp	r3, #9
 800358c:	d94b      	bls.n	8003626 <_vfiprintf_r+0x1a2>
 800358e:	b1b0      	cbz	r0, 80035be <_vfiprintf_r+0x13a>
 8003590:	9207      	str	r2, [sp, #28]
 8003592:	e014      	b.n	80035be <_vfiprintf_r+0x13a>
 8003594:	eba0 0308 	sub.w	r3, r0, r8
 8003598:	fa09 f303 	lsl.w	r3, r9, r3
 800359c:	4313      	orrs	r3, r2
 800359e:	9304      	str	r3, [sp, #16]
 80035a0:	46a2      	mov	sl, r4
 80035a2:	e7d2      	b.n	800354a <_vfiprintf_r+0xc6>
 80035a4:	9b03      	ldr	r3, [sp, #12]
 80035a6:	1d19      	adds	r1, r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	9103      	str	r1, [sp, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bfbb      	ittet	lt
 80035b0:	425b      	neglt	r3, r3
 80035b2:	f042 0202 	orrlt.w	r2, r2, #2
 80035b6:	9307      	strge	r3, [sp, #28]
 80035b8:	9307      	strlt	r3, [sp, #28]
 80035ba:	bfb8      	it	lt
 80035bc:	9204      	strlt	r2, [sp, #16]
 80035be:	7823      	ldrb	r3, [r4, #0]
 80035c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80035c2:	d10a      	bne.n	80035da <_vfiprintf_r+0x156>
 80035c4:	7863      	ldrb	r3, [r4, #1]
 80035c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80035c8:	d132      	bne.n	8003630 <_vfiprintf_r+0x1ac>
 80035ca:	9b03      	ldr	r3, [sp, #12]
 80035cc:	1d1a      	adds	r2, r3, #4
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	9203      	str	r2, [sp, #12]
 80035d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035d6:	3402      	adds	r4, #2
 80035d8:	9305      	str	r3, [sp, #20]
 80035da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80036b0 <_vfiprintf_r+0x22c>
 80035de:	7821      	ldrb	r1, [r4, #0]
 80035e0:	2203      	movs	r2, #3
 80035e2:	4650      	mov	r0, sl
 80035e4:	f7fc fe04 	bl	80001f0 <memchr>
 80035e8:	b138      	cbz	r0, 80035fa <_vfiprintf_r+0x176>
 80035ea:	9b04      	ldr	r3, [sp, #16]
 80035ec:	eba0 000a 	sub.w	r0, r0, sl
 80035f0:	2240      	movs	r2, #64	@ 0x40
 80035f2:	4082      	lsls	r2, r0
 80035f4:	4313      	orrs	r3, r2
 80035f6:	3401      	adds	r4, #1
 80035f8:	9304      	str	r3, [sp, #16]
 80035fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fe:	4829      	ldr	r0, [pc, #164]	@ (80036a4 <_vfiprintf_r+0x220>)
 8003600:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003604:	2206      	movs	r2, #6
 8003606:	f7fc fdf3 	bl	80001f0 <memchr>
 800360a:	2800      	cmp	r0, #0
 800360c:	d03f      	beq.n	800368e <_vfiprintf_r+0x20a>
 800360e:	4b26      	ldr	r3, [pc, #152]	@ (80036a8 <_vfiprintf_r+0x224>)
 8003610:	bb1b      	cbnz	r3, 800365a <_vfiprintf_r+0x1d6>
 8003612:	9b03      	ldr	r3, [sp, #12]
 8003614:	3307      	adds	r3, #7
 8003616:	f023 0307 	bic.w	r3, r3, #7
 800361a:	3308      	adds	r3, #8
 800361c:	9303      	str	r3, [sp, #12]
 800361e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003620:	443b      	add	r3, r7
 8003622:	9309      	str	r3, [sp, #36]	@ 0x24
 8003624:	e76a      	b.n	80034fc <_vfiprintf_r+0x78>
 8003626:	fb0c 3202 	mla	r2, ip, r2, r3
 800362a:	460c      	mov	r4, r1
 800362c:	2001      	movs	r0, #1
 800362e:	e7a8      	b.n	8003582 <_vfiprintf_r+0xfe>
 8003630:	2300      	movs	r3, #0
 8003632:	3401      	adds	r4, #1
 8003634:	9305      	str	r3, [sp, #20]
 8003636:	4619      	mov	r1, r3
 8003638:	f04f 0c0a 	mov.w	ip, #10
 800363c:	4620      	mov	r0, r4
 800363e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003642:	3a30      	subs	r2, #48	@ 0x30
 8003644:	2a09      	cmp	r2, #9
 8003646:	d903      	bls.n	8003650 <_vfiprintf_r+0x1cc>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0c6      	beq.n	80035da <_vfiprintf_r+0x156>
 800364c:	9105      	str	r1, [sp, #20]
 800364e:	e7c4      	b.n	80035da <_vfiprintf_r+0x156>
 8003650:	fb0c 2101 	mla	r1, ip, r1, r2
 8003654:	4604      	mov	r4, r0
 8003656:	2301      	movs	r3, #1
 8003658:	e7f0      	b.n	800363c <_vfiprintf_r+0x1b8>
 800365a:	ab03      	add	r3, sp, #12
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	462a      	mov	r2, r5
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <_vfiprintf_r+0x228>)
 8003662:	a904      	add	r1, sp, #16
 8003664:	4630      	mov	r0, r6
 8003666:	f3af 8000 	nop.w
 800366a:	4607      	mov	r7, r0
 800366c:	1c78      	adds	r0, r7, #1
 800366e:	d1d6      	bne.n	800361e <_vfiprintf_r+0x19a>
 8003670:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003672:	07d9      	lsls	r1, r3, #31
 8003674:	d405      	bmi.n	8003682 <_vfiprintf_r+0x1fe>
 8003676:	89ab      	ldrh	r3, [r5, #12]
 8003678:	059a      	lsls	r2, r3, #22
 800367a:	d402      	bmi.n	8003682 <_vfiprintf_r+0x1fe>
 800367c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800367e:	f7ff fddd 	bl	800323c <__retarget_lock_release_recursive>
 8003682:	89ab      	ldrh	r3, [r5, #12]
 8003684:	065b      	lsls	r3, r3, #25
 8003686:	f53f af1f 	bmi.w	80034c8 <_vfiprintf_r+0x44>
 800368a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800368c:	e71e      	b.n	80034cc <_vfiprintf_r+0x48>
 800368e:	ab03      	add	r3, sp, #12
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	462a      	mov	r2, r5
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <_vfiprintf_r+0x228>)
 8003696:	a904      	add	r1, sp, #16
 8003698:	4630      	mov	r0, r6
 800369a:	f000 f879 	bl	8003790 <_printf_i>
 800369e:	e7e4      	b.n	800366a <_vfiprintf_r+0x1e6>
 80036a0:	08003de0 	.word	0x08003de0
 80036a4:	08003dea 	.word	0x08003dea
 80036a8:	00000000 	.word	0x00000000
 80036ac:	0800345f 	.word	0x0800345f
 80036b0:	08003de6 	.word	0x08003de6

080036b4 <_printf_common>:
 80036b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036b8:	4616      	mov	r6, r2
 80036ba:	4698      	mov	r8, r3
 80036bc:	688a      	ldr	r2, [r1, #8]
 80036be:	690b      	ldr	r3, [r1, #16]
 80036c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	bfb8      	it	lt
 80036c8:	4613      	movlt	r3, r2
 80036ca:	6033      	str	r3, [r6, #0]
 80036cc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036d0:	4607      	mov	r7, r0
 80036d2:	460c      	mov	r4, r1
 80036d4:	b10a      	cbz	r2, 80036da <_printf_common+0x26>
 80036d6:	3301      	adds	r3, #1
 80036d8:	6033      	str	r3, [r6, #0]
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	0699      	lsls	r1, r3, #26
 80036de:	bf42      	ittt	mi
 80036e0:	6833      	ldrmi	r3, [r6, #0]
 80036e2:	3302      	addmi	r3, #2
 80036e4:	6033      	strmi	r3, [r6, #0]
 80036e6:	6825      	ldr	r5, [r4, #0]
 80036e8:	f015 0506 	ands.w	r5, r5, #6
 80036ec:	d106      	bne.n	80036fc <_printf_common+0x48>
 80036ee:	f104 0a19 	add.w	sl, r4, #25
 80036f2:	68e3      	ldr	r3, [r4, #12]
 80036f4:	6832      	ldr	r2, [r6, #0]
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	42ab      	cmp	r3, r5
 80036fa:	dc26      	bgt.n	800374a <_printf_common+0x96>
 80036fc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	3b00      	subs	r3, #0
 8003704:	bf18      	it	ne
 8003706:	2301      	movne	r3, #1
 8003708:	0692      	lsls	r2, r2, #26
 800370a:	d42b      	bmi.n	8003764 <_printf_common+0xb0>
 800370c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003710:	4641      	mov	r1, r8
 8003712:	4638      	mov	r0, r7
 8003714:	47c8      	blx	r9
 8003716:	3001      	adds	r0, #1
 8003718:	d01e      	beq.n	8003758 <_printf_common+0xa4>
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	6922      	ldr	r2, [r4, #16]
 800371e:	f003 0306 	and.w	r3, r3, #6
 8003722:	2b04      	cmp	r3, #4
 8003724:	bf02      	ittt	eq
 8003726:	68e5      	ldreq	r5, [r4, #12]
 8003728:	6833      	ldreq	r3, [r6, #0]
 800372a:	1aed      	subeq	r5, r5, r3
 800372c:	68a3      	ldr	r3, [r4, #8]
 800372e:	bf0c      	ite	eq
 8003730:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003734:	2500      	movne	r5, #0
 8003736:	4293      	cmp	r3, r2
 8003738:	bfc4      	itt	gt
 800373a:	1a9b      	subgt	r3, r3, r2
 800373c:	18ed      	addgt	r5, r5, r3
 800373e:	2600      	movs	r6, #0
 8003740:	341a      	adds	r4, #26
 8003742:	42b5      	cmp	r5, r6
 8003744:	d11a      	bne.n	800377c <_printf_common+0xc8>
 8003746:	2000      	movs	r0, #0
 8003748:	e008      	b.n	800375c <_printf_common+0xa8>
 800374a:	2301      	movs	r3, #1
 800374c:	4652      	mov	r2, sl
 800374e:	4641      	mov	r1, r8
 8003750:	4638      	mov	r0, r7
 8003752:	47c8      	blx	r9
 8003754:	3001      	adds	r0, #1
 8003756:	d103      	bne.n	8003760 <_printf_common+0xac>
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003760:	3501      	adds	r5, #1
 8003762:	e7c6      	b.n	80036f2 <_printf_common+0x3e>
 8003764:	18e1      	adds	r1, r4, r3
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	2030      	movs	r0, #48	@ 0x30
 800376a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800376e:	4422      	add	r2, r4
 8003770:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003774:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003778:	3302      	adds	r3, #2
 800377a:	e7c7      	b.n	800370c <_printf_common+0x58>
 800377c:	2301      	movs	r3, #1
 800377e:	4622      	mov	r2, r4
 8003780:	4641      	mov	r1, r8
 8003782:	4638      	mov	r0, r7
 8003784:	47c8      	blx	r9
 8003786:	3001      	adds	r0, #1
 8003788:	d0e6      	beq.n	8003758 <_printf_common+0xa4>
 800378a:	3601      	adds	r6, #1
 800378c:	e7d9      	b.n	8003742 <_printf_common+0x8e>
	...

08003790 <_printf_i>:
 8003790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003794:	7e0f      	ldrb	r7, [r1, #24]
 8003796:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003798:	2f78      	cmp	r7, #120	@ 0x78
 800379a:	4691      	mov	r9, r2
 800379c:	4680      	mov	r8, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	469a      	mov	sl, r3
 80037a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037a6:	d807      	bhi.n	80037b8 <_printf_i+0x28>
 80037a8:	2f62      	cmp	r7, #98	@ 0x62
 80037aa:	d80a      	bhi.n	80037c2 <_printf_i+0x32>
 80037ac:	2f00      	cmp	r7, #0
 80037ae:	f000 80d2 	beq.w	8003956 <_printf_i+0x1c6>
 80037b2:	2f58      	cmp	r7, #88	@ 0x58
 80037b4:	f000 80b9 	beq.w	800392a <_printf_i+0x19a>
 80037b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037c0:	e03a      	b.n	8003838 <_printf_i+0xa8>
 80037c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037c6:	2b15      	cmp	r3, #21
 80037c8:	d8f6      	bhi.n	80037b8 <_printf_i+0x28>
 80037ca:	a101      	add	r1, pc, #4	@ (adr r1, 80037d0 <_printf_i+0x40>)
 80037cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037d0:	08003829 	.word	0x08003829
 80037d4:	0800383d 	.word	0x0800383d
 80037d8:	080037b9 	.word	0x080037b9
 80037dc:	080037b9 	.word	0x080037b9
 80037e0:	080037b9 	.word	0x080037b9
 80037e4:	080037b9 	.word	0x080037b9
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	080037b9 	.word	0x080037b9
 80037f0:	080037b9 	.word	0x080037b9
 80037f4:	080037b9 	.word	0x080037b9
 80037f8:	080037b9 	.word	0x080037b9
 80037fc:	0800393d 	.word	0x0800393d
 8003800:	08003867 	.word	0x08003867
 8003804:	080038f7 	.word	0x080038f7
 8003808:	080037b9 	.word	0x080037b9
 800380c:	080037b9 	.word	0x080037b9
 8003810:	0800395f 	.word	0x0800395f
 8003814:	080037b9 	.word	0x080037b9
 8003818:	08003867 	.word	0x08003867
 800381c:	080037b9 	.word	0x080037b9
 8003820:	080037b9 	.word	0x080037b9
 8003824:	080038ff 	.word	0x080038ff
 8003828:	6833      	ldr	r3, [r6, #0]
 800382a:	1d1a      	adds	r2, r3, #4
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6032      	str	r2, [r6, #0]
 8003830:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003834:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003838:	2301      	movs	r3, #1
 800383a:	e09d      	b.n	8003978 <_printf_i+0x1e8>
 800383c:	6833      	ldr	r3, [r6, #0]
 800383e:	6820      	ldr	r0, [r4, #0]
 8003840:	1d19      	adds	r1, r3, #4
 8003842:	6031      	str	r1, [r6, #0]
 8003844:	0606      	lsls	r6, r0, #24
 8003846:	d501      	bpl.n	800384c <_printf_i+0xbc>
 8003848:	681d      	ldr	r5, [r3, #0]
 800384a:	e003      	b.n	8003854 <_printf_i+0xc4>
 800384c:	0645      	lsls	r5, r0, #25
 800384e:	d5fb      	bpl.n	8003848 <_printf_i+0xb8>
 8003850:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003854:	2d00      	cmp	r5, #0
 8003856:	da03      	bge.n	8003860 <_printf_i+0xd0>
 8003858:	232d      	movs	r3, #45	@ 0x2d
 800385a:	426d      	negs	r5, r5
 800385c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003860:	4859      	ldr	r0, [pc, #356]	@ (80039c8 <_printf_i+0x238>)
 8003862:	230a      	movs	r3, #10
 8003864:	e011      	b.n	800388a <_printf_i+0xfa>
 8003866:	6821      	ldr	r1, [r4, #0]
 8003868:	6833      	ldr	r3, [r6, #0]
 800386a:	0608      	lsls	r0, r1, #24
 800386c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003870:	d402      	bmi.n	8003878 <_printf_i+0xe8>
 8003872:	0649      	lsls	r1, r1, #25
 8003874:	bf48      	it	mi
 8003876:	b2ad      	uxthmi	r5, r5
 8003878:	2f6f      	cmp	r7, #111	@ 0x6f
 800387a:	4853      	ldr	r0, [pc, #332]	@ (80039c8 <_printf_i+0x238>)
 800387c:	6033      	str	r3, [r6, #0]
 800387e:	bf14      	ite	ne
 8003880:	230a      	movne	r3, #10
 8003882:	2308      	moveq	r3, #8
 8003884:	2100      	movs	r1, #0
 8003886:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800388a:	6866      	ldr	r6, [r4, #4]
 800388c:	60a6      	str	r6, [r4, #8]
 800388e:	2e00      	cmp	r6, #0
 8003890:	bfa2      	ittt	ge
 8003892:	6821      	ldrge	r1, [r4, #0]
 8003894:	f021 0104 	bicge.w	r1, r1, #4
 8003898:	6021      	strge	r1, [r4, #0]
 800389a:	b90d      	cbnz	r5, 80038a0 <_printf_i+0x110>
 800389c:	2e00      	cmp	r6, #0
 800389e:	d04b      	beq.n	8003938 <_printf_i+0x1a8>
 80038a0:	4616      	mov	r6, r2
 80038a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80038a6:	fb03 5711 	mls	r7, r3, r1, r5
 80038aa:	5dc7      	ldrb	r7, [r0, r7]
 80038ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038b0:	462f      	mov	r7, r5
 80038b2:	42bb      	cmp	r3, r7
 80038b4:	460d      	mov	r5, r1
 80038b6:	d9f4      	bls.n	80038a2 <_printf_i+0x112>
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d10b      	bne.n	80038d4 <_printf_i+0x144>
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	07df      	lsls	r7, r3, #31
 80038c0:	d508      	bpl.n	80038d4 <_printf_i+0x144>
 80038c2:	6923      	ldr	r3, [r4, #16]
 80038c4:	6861      	ldr	r1, [r4, #4]
 80038c6:	4299      	cmp	r1, r3
 80038c8:	bfde      	ittt	le
 80038ca:	2330      	movle	r3, #48	@ 0x30
 80038cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038d4:	1b92      	subs	r2, r2, r6
 80038d6:	6122      	str	r2, [r4, #16]
 80038d8:	f8cd a000 	str.w	sl, [sp]
 80038dc:	464b      	mov	r3, r9
 80038de:	aa03      	add	r2, sp, #12
 80038e0:	4621      	mov	r1, r4
 80038e2:	4640      	mov	r0, r8
 80038e4:	f7ff fee6 	bl	80036b4 <_printf_common>
 80038e8:	3001      	adds	r0, #1
 80038ea:	d14a      	bne.n	8003982 <_printf_i+0x1f2>
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	b004      	add	sp, #16
 80038f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f043 0320 	orr.w	r3, r3, #32
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	4833      	ldr	r0, [pc, #204]	@ (80039cc <_printf_i+0x23c>)
 8003900:	2778      	movs	r7, #120	@ 0x78
 8003902:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	6831      	ldr	r1, [r6, #0]
 800390a:	061f      	lsls	r7, r3, #24
 800390c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003910:	d402      	bmi.n	8003918 <_printf_i+0x188>
 8003912:	065f      	lsls	r7, r3, #25
 8003914:	bf48      	it	mi
 8003916:	b2ad      	uxthmi	r5, r5
 8003918:	6031      	str	r1, [r6, #0]
 800391a:	07d9      	lsls	r1, r3, #31
 800391c:	bf44      	itt	mi
 800391e:	f043 0320 	orrmi.w	r3, r3, #32
 8003922:	6023      	strmi	r3, [r4, #0]
 8003924:	b11d      	cbz	r5, 800392e <_printf_i+0x19e>
 8003926:	2310      	movs	r3, #16
 8003928:	e7ac      	b.n	8003884 <_printf_i+0xf4>
 800392a:	4827      	ldr	r0, [pc, #156]	@ (80039c8 <_printf_i+0x238>)
 800392c:	e7e9      	b.n	8003902 <_printf_i+0x172>
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	f023 0320 	bic.w	r3, r3, #32
 8003934:	6023      	str	r3, [r4, #0]
 8003936:	e7f6      	b.n	8003926 <_printf_i+0x196>
 8003938:	4616      	mov	r6, r2
 800393a:	e7bd      	b.n	80038b8 <_printf_i+0x128>
 800393c:	6833      	ldr	r3, [r6, #0]
 800393e:	6825      	ldr	r5, [r4, #0]
 8003940:	6961      	ldr	r1, [r4, #20]
 8003942:	1d18      	adds	r0, r3, #4
 8003944:	6030      	str	r0, [r6, #0]
 8003946:	062e      	lsls	r6, r5, #24
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	d501      	bpl.n	8003950 <_printf_i+0x1c0>
 800394c:	6019      	str	r1, [r3, #0]
 800394e:	e002      	b.n	8003956 <_printf_i+0x1c6>
 8003950:	0668      	lsls	r0, r5, #25
 8003952:	d5fb      	bpl.n	800394c <_printf_i+0x1bc>
 8003954:	8019      	strh	r1, [r3, #0]
 8003956:	2300      	movs	r3, #0
 8003958:	6123      	str	r3, [r4, #16]
 800395a:	4616      	mov	r6, r2
 800395c:	e7bc      	b.n	80038d8 <_printf_i+0x148>
 800395e:	6833      	ldr	r3, [r6, #0]
 8003960:	1d1a      	adds	r2, r3, #4
 8003962:	6032      	str	r2, [r6, #0]
 8003964:	681e      	ldr	r6, [r3, #0]
 8003966:	6862      	ldr	r2, [r4, #4]
 8003968:	2100      	movs	r1, #0
 800396a:	4630      	mov	r0, r6
 800396c:	f7fc fc40 	bl	80001f0 <memchr>
 8003970:	b108      	cbz	r0, 8003976 <_printf_i+0x1e6>
 8003972:	1b80      	subs	r0, r0, r6
 8003974:	6060      	str	r0, [r4, #4]
 8003976:	6863      	ldr	r3, [r4, #4]
 8003978:	6123      	str	r3, [r4, #16]
 800397a:	2300      	movs	r3, #0
 800397c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003980:	e7aa      	b.n	80038d8 <_printf_i+0x148>
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	4632      	mov	r2, r6
 8003986:	4649      	mov	r1, r9
 8003988:	4640      	mov	r0, r8
 800398a:	47d0      	blx	sl
 800398c:	3001      	adds	r0, #1
 800398e:	d0ad      	beq.n	80038ec <_printf_i+0x15c>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	079b      	lsls	r3, r3, #30
 8003994:	d413      	bmi.n	80039be <_printf_i+0x22e>
 8003996:	68e0      	ldr	r0, [r4, #12]
 8003998:	9b03      	ldr	r3, [sp, #12]
 800399a:	4298      	cmp	r0, r3
 800399c:	bfb8      	it	lt
 800399e:	4618      	movlt	r0, r3
 80039a0:	e7a6      	b.n	80038f0 <_printf_i+0x160>
 80039a2:	2301      	movs	r3, #1
 80039a4:	4632      	mov	r2, r6
 80039a6:	4649      	mov	r1, r9
 80039a8:	4640      	mov	r0, r8
 80039aa:	47d0      	blx	sl
 80039ac:	3001      	adds	r0, #1
 80039ae:	d09d      	beq.n	80038ec <_printf_i+0x15c>
 80039b0:	3501      	adds	r5, #1
 80039b2:	68e3      	ldr	r3, [r4, #12]
 80039b4:	9903      	ldr	r1, [sp, #12]
 80039b6:	1a5b      	subs	r3, r3, r1
 80039b8:	42ab      	cmp	r3, r5
 80039ba:	dcf2      	bgt.n	80039a2 <_printf_i+0x212>
 80039bc:	e7eb      	b.n	8003996 <_printf_i+0x206>
 80039be:	2500      	movs	r5, #0
 80039c0:	f104 0619 	add.w	r6, r4, #25
 80039c4:	e7f5      	b.n	80039b2 <_printf_i+0x222>
 80039c6:	bf00      	nop
 80039c8:	08003df1 	.word	0x08003df1
 80039cc:	08003e02 	.word	0x08003e02

080039d0 <__sflush_r>:
 80039d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d8:	0716      	lsls	r6, r2, #28
 80039da:	4605      	mov	r5, r0
 80039dc:	460c      	mov	r4, r1
 80039de:	d454      	bmi.n	8003a8a <__sflush_r+0xba>
 80039e0:	684b      	ldr	r3, [r1, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	dc02      	bgt.n	80039ec <__sflush_r+0x1c>
 80039e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	dd48      	ble.n	8003a7e <__sflush_r+0xae>
 80039ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039ee:	2e00      	cmp	r6, #0
 80039f0:	d045      	beq.n	8003a7e <__sflush_r+0xae>
 80039f2:	2300      	movs	r3, #0
 80039f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039f8:	682f      	ldr	r7, [r5, #0]
 80039fa:	6a21      	ldr	r1, [r4, #32]
 80039fc:	602b      	str	r3, [r5, #0]
 80039fe:	d030      	beq.n	8003a62 <__sflush_r+0x92>
 8003a00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a02:	89a3      	ldrh	r3, [r4, #12]
 8003a04:	0759      	lsls	r1, r3, #29
 8003a06:	d505      	bpl.n	8003a14 <__sflush_r+0x44>
 8003a08:	6863      	ldr	r3, [r4, #4]
 8003a0a:	1ad2      	subs	r2, r2, r3
 8003a0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a0e:	b10b      	cbz	r3, 8003a14 <__sflush_r+0x44>
 8003a10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a12:	1ad2      	subs	r2, r2, r3
 8003a14:	2300      	movs	r3, #0
 8003a16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a18:	6a21      	ldr	r1, [r4, #32]
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	47b0      	blx	r6
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	89a3      	ldrh	r3, [r4, #12]
 8003a22:	d106      	bne.n	8003a32 <__sflush_r+0x62>
 8003a24:	6829      	ldr	r1, [r5, #0]
 8003a26:	291d      	cmp	r1, #29
 8003a28:	d82b      	bhi.n	8003a82 <__sflush_r+0xb2>
 8003a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad4 <__sflush_r+0x104>)
 8003a2c:	410a      	asrs	r2, r1
 8003a2e:	07d6      	lsls	r6, r2, #31
 8003a30:	d427      	bmi.n	8003a82 <__sflush_r+0xb2>
 8003a32:	2200      	movs	r2, #0
 8003a34:	6062      	str	r2, [r4, #4]
 8003a36:	04d9      	lsls	r1, r3, #19
 8003a38:	6922      	ldr	r2, [r4, #16]
 8003a3a:	6022      	str	r2, [r4, #0]
 8003a3c:	d504      	bpl.n	8003a48 <__sflush_r+0x78>
 8003a3e:	1c42      	adds	r2, r0, #1
 8003a40:	d101      	bne.n	8003a46 <__sflush_r+0x76>
 8003a42:	682b      	ldr	r3, [r5, #0]
 8003a44:	b903      	cbnz	r3, 8003a48 <__sflush_r+0x78>
 8003a46:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a4a:	602f      	str	r7, [r5, #0]
 8003a4c:	b1b9      	cbz	r1, 8003a7e <__sflush_r+0xae>
 8003a4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a52:	4299      	cmp	r1, r3
 8003a54:	d002      	beq.n	8003a5c <__sflush_r+0x8c>
 8003a56:	4628      	mov	r0, r5
 8003a58:	f7ff fbf2 	bl	8003240 <_free_r>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a60:	e00d      	b.n	8003a7e <__sflush_r+0xae>
 8003a62:	2301      	movs	r3, #1
 8003a64:	4628      	mov	r0, r5
 8003a66:	47b0      	blx	r6
 8003a68:	4602      	mov	r2, r0
 8003a6a:	1c50      	adds	r0, r2, #1
 8003a6c:	d1c9      	bne.n	8003a02 <__sflush_r+0x32>
 8003a6e:	682b      	ldr	r3, [r5, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0c6      	beq.n	8003a02 <__sflush_r+0x32>
 8003a74:	2b1d      	cmp	r3, #29
 8003a76:	d001      	beq.n	8003a7c <__sflush_r+0xac>
 8003a78:	2b16      	cmp	r3, #22
 8003a7a:	d11e      	bne.n	8003aba <__sflush_r+0xea>
 8003a7c:	602f      	str	r7, [r5, #0]
 8003a7e:	2000      	movs	r0, #0
 8003a80:	e022      	b.n	8003ac8 <__sflush_r+0xf8>
 8003a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a86:	b21b      	sxth	r3, r3
 8003a88:	e01b      	b.n	8003ac2 <__sflush_r+0xf2>
 8003a8a:	690f      	ldr	r7, [r1, #16]
 8003a8c:	2f00      	cmp	r7, #0
 8003a8e:	d0f6      	beq.n	8003a7e <__sflush_r+0xae>
 8003a90:	0793      	lsls	r3, r2, #30
 8003a92:	680e      	ldr	r6, [r1, #0]
 8003a94:	bf08      	it	eq
 8003a96:	694b      	ldreq	r3, [r1, #20]
 8003a98:	600f      	str	r7, [r1, #0]
 8003a9a:	bf18      	it	ne
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	eba6 0807 	sub.w	r8, r6, r7
 8003aa2:	608b      	str	r3, [r1, #8]
 8003aa4:	f1b8 0f00 	cmp.w	r8, #0
 8003aa8:	dde9      	ble.n	8003a7e <__sflush_r+0xae>
 8003aaa:	6a21      	ldr	r1, [r4, #32]
 8003aac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003aae:	4643      	mov	r3, r8
 8003ab0:	463a      	mov	r2, r7
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	47b0      	blx	r6
 8003ab6:	2800      	cmp	r0, #0
 8003ab8:	dc08      	bgt.n	8003acc <__sflush_r+0xfc>
 8003aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003acc:	4407      	add	r7, r0
 8003ace:	eba8 0800 	sub.w	r8, r8, r0
 8003ad2:	e7e7      	b.n	8003aa4 <__sflush_r+0xd4>
 8003ad4:	dfbffffe 	.word	0xdfbffffe

08003ad8 <_fflush_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	690b      	ldr	r3, [r1, #16]
 8003adc:	4605      	mov	r5, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	b913      	cbnz	r3, 8003ae8 <_fflush_r+0x10>
 8003ae2:	2500      	movs	r5, #0
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	bd38      	pop	{r3, r4, r5, pc}
 8003ae8:	b118      	cbz	r0, 8003af2 <_fflush_r+0x1a>
 8003aea:	6a03      	ldr	r3, [r0, #32]
 8003aec:	b90b      	cbnz	r3, 8003af2 <_fflush_r+0x1a>
 8003aee:	f7ff fa9f 	bl	8003030 <__sinit>
 8003af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f3      	beq.n	8003ae2 <_fflush_r+0xa>
 8003afa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003afc:	07d0      	lsls	r0, r2, #31
 8003afe:	d404      	bmi.n	8003b0a <_fflush_r+0x32>
 8003b00:	0599      	lsls	r1, r3, #22
 8003b02:	d402      	bmi.n	8003b0a <_fflush_r+0x32>
 8003b04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b06:	f7ff fb98 	bl	800323a <__retarget_lock_acquire_recursive>
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	f7ff ff5f 	bl	80039d0 <__sflush_r>
 8003b12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b14:	07da      	lsls	r2, r3, #31
 8003b16:	4605      	mov	r5, r0
 8003b18:	d4e4      	bmi.n	8003ae4 <_fflush_r+0xc>
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	059b      	lsls	r3, r3, #22
 8003b1e:	d4e1      	bmi.n	8003ae4 <_fflush_r+0xc>
 8003b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b22:	f7ff fb8b 	bl	800323c <__retarget_lock_release_recursive>
 8003b26:	e7dd      	b.n	8003ae4 <_fflush_r+0xc>

08003b28 <__swbuf_r>:
 8003b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b2a:	460e      	mov	r6, r1
 8003b2c:	4614      	mov	r4, r2
 8003b2e:	4605      	mov	r5, r0
 8003b30:	b118      	cbz	r0, 8003b3a <__swbuf_r+0x12>
 8003b32:	6a03      	ldr	r3, [r0, #32]
 8003b34:	b90b      	cbnz	r3, 8003b3a <__swbuf_r+0x12>
 8003b36:	f7ff fa7b 	bl	8003030 <__sinit>
 8003b3a:	69a3      	ldr	r3, [r4, #24]
 8003b3c:	60a3      	str	r3, [r4, #8]
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	071a      	lsls	r2, r3, #28
 8003b42:	d501      	bpl.n	8003b48 <__swbuf_r+0x20>
 8003b44:	6923      	ldr	r3, [r4, #16]
 8003b46:	b943      	cbnz	r3, 8003b5a <__swbuf_r+0x32>
 8003b48:	4621      	mov	r1, r4
 8003b4a:	4628      	mov	r0, r5
 8003b4c:	f000 f82a 	bl	8003ba4 <__swsetup_r>
 8003b50:	b118      	cbz	r0, 8003b5a <__swbuf_r+0x32>
 8003b52:	f04f 37ff 	mov.w	r7, #4294967295
 8003b56:	4638      	mov	r0, r7
 8003b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	6922      	ldr	r2, [r4, #16]
 8003b5e:	1a98      	subs	r0, r3, r2
 8003b60:	6963      	ldr	r3, [r4, #20]
 8003b62:	b2f6      	uxtb	r6, r6
 8003b64:	4283      	cmp	r3, r0
 8003b66:	4637      	mov	r7, r6
 8003b68:	dc05      	bgt.n	8003b76 <__swbuf_r+0x4e>
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	f7ff ffb3 	bl	8003ad8 <_fflush_r>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d1ed      	bne.n	8003b52 <__swbuf_r+0x2a>
 8003b76:	68a3      	ldr	r3, [r4, #8]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	60a3      	str	r3, [r4, #8]
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	6022      	str	r2, [r4, #0]
 8003b82:	701e      	strb	r6, [r3, #0]
 8003b84:	6962      	ldr	r2, [r4, #20]
 8003b86:	1c43      	adds	r3, r0, #1
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d004      	beq.n	8003b96 <__swbuf_r+0x6e>
 8003b8c:	89a3      	ldrh	r3, [r4, #12]
 8003b8e:	07db      	lsls	r3, r3, #31
 8003b90:	d5e1      	bpl.n	8003b56 <__swbuf_r+0x2e>
 8003b92:	2e0a      	cmp	r6, #10
 8003b94:	d1df      	bne.n	8003b56 <__swbuf_r+0x2e>
 8003b96:	4621      	mov	r1, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f7ff ff9d 	bl	8003ad8 <_fflush_r>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d0d9      	beq.n	8003b56 <__swbuf_r+0x2e>
 8003ba2:	e7d6      	b.n	8003b52 <__swbuf_r+0x2a>

08003ba4 <__swsetup_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	4b29      	ldr	r3, [pc, #164]	@ (8003c4c <__swsetup_r+0xa8>)
 8003ba8:	4605      	mov	r5, r0
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	460c      	mov	r4, r1
 8003bae:	b118      	cbz	r0, 8003bb8 <__swsetup_r+0x14>
 8003bb0:	6a03      	ldr	r3, [r0, #32]
 8003bb2:	b90b      	cbnz	r3, 8003bb8 <__swsetup_r+0x14>
 8003bb4:	f7ff fa3c 	bl	8003030 <__sinit>
 8003bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbc:	0719      	lsls	r1, r3, #28
 8003bbe:	d422      	bmi.n	8003c06 <__swsetup_r+0x62>
 8003bc0:	06da      	lsls	r2, r3, #27
 8003bc2:	d407      	bmi.n	8003bd4 <__swsetup_r+0x30>
 8003bc4:	2209      	movs	r2, #9
 8003bc6:	602a      	str	r2, [r5, #0]
 8003bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bcc:	81a3      	strh	r3, [r4, #12]
 8003bce:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd2:	e033      	b.n	8003c3c <__swsetup_r+0x98>
 8003bd4:	0758      	lsls	r0, r3, #29
 8003bd6:	d512      	bpl.n	8003bfe <__swsetup_r+0x5a>
 8003bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bda:	b141      	cbz	r1, 8003bee <__swsetup_r+0x4a>
 8003bdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003be0:	4299      	cmp	r1, r3
 8003be2:	d002      	beq.n	8003bea <__swsetup_r+0x46>
 8003be4:	4628      	mov	r0, r5
 8003be6:	f7ff fb2b 	bl	8003240 <_free_r>
 8003bea:	2300      	movs	r3, #0
 8003bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bee:	89a3      	ldrh	r3, [r4, #12]
 8003bf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003bf4:	81a3      	strh	r3, [r4, #12]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	6063      	str	r3, [r4, #4]
 8003bfa:	6923      	ldr	r3, [r4, #16]
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f043 0308 	orr.w	r3, r3, #8
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	6923      	ldr	r3, [r4, #16]
 8003c08:	b94b      	cbnz	r3, 8003c1e <__swsetup_r+0x7a>
 8003c0a:	89a3      	ldrh	r3, [r4, #12]
 8003c0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c14:	d003      	beq.n	8003c1e <__swsetup_r+0x7a>
 8003c16:	4621      	mov	r1, r4
 8003c18:	4628      	mov	r0, r5
 8003c1a:	f000 f84f 	bl	8003cbc <__smakebuf_r>
 8003c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c22:	f013 0201 	ands.w	r2, r3, #1
 8003c26:	d00a      	beq.n	8003c3e <__swsetup_r+0x9a>
 8003c28:	2200      	movs	r2, #0
 8003c2a:	60a2      	str	r2, [r4, #8]
 8003c2c:	6962      	ldr	r2, [r4, #20]
 8003c2e:	4252      	negs	r2, r2
 8003c30:	61a2      	str	r2, [r4, #24]
 8003c32:	6922      	ldr	r2, [r4, #16]
 8003c34:	b942      	cbnz	r2, 8003c48 <__swsetup_r+0xa4>
 8003c36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c3a:	d1c5      	bne.n	8003bc8 <__swsetup_r+0x24>
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	0799      	lsls	r1, r3, #30
 8003c40:	bf58      	it	pl
 8003c42:	6962      	ldrpl	r2, [r4, #20]
 8003c44:	60a2      	str	r2, [r4, #8]
 8003c46:	e7f4      	b.n	8003c32 <__swsetup_r+0x8e>
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e7f7      	b.n	8003c3c <__swsetup_r+0x98>
 8003c4c:	20000018 	.word	0x20000018

08003c50 <_sbrk_r>:
 8003c50:	b538      	push	{r3, r4, r5, lr}
 8003c52:	4d06      	ldr	r5, [pc, #24]	@ (8003c6c <_sbrk_r+0x1c>)
 8003c54:	2300      	movs	r3, #0
 8003c56:	4604      	mov	r4, r0
 8003c58:	4608      	mov	r0, r1
 8003c5a:	602b      	str	r3, [r5, #0]
 8003c5c:	f7fd fb28 	bl	80012b0 <_sbrk>
 8003c60:	1c43      	adds	r3, r0, #1
 8003c62:	d102      	bne.n	8003c6a <_sbrk_r+0x1a>
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	b103      	cbz	r3, 8003c6a <_sbrk_r+0x1a>
 8003c68:	6023      	str	r3, [r4, #0]
 8003c6a:	bd38      	pop	{r3, r4, r5, pc}
 8003c6c:	20000338 	.word	0x20000338

08003c70 <__swhatbuf_r>:
 8003c70:	b570      	push	{r4, r5, r6, lr}
 8003c72:	460c      	mov	r4, r1
 8003c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	b096      	sub	sp, #88	@ 0x58
 8003c7c:	4615      	mov	r5, r2
 8003c7e:	461e      	mov	r6, r3
 8003c80:	da0d      	bge.n	8003c9e <__swhatbuf_r+0x2e>
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c88:	f04f 0100 	mov.w	r1, #0
 8003c8c:	bf14      	ite	ne
 8003c8e:	2340      	movne	r3, #64	@ 0x40
 8003c90:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003c94:	2000      	movs	r0, #0
 8003c96:	6031      	str	r1, [r6, #0]
 8003c98:	602b      	str	r3, [r5, #0]
 8003c9a:	b016      	add	sp, #88	@ 0x58
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	466a      	mov	r2, sp
 8003ca0:	f000 f848 	bl	8003d34 <_fstat_r>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	dbec      	blt.n	8003c82 <__swhatbuf_r+0x12>
 8003ca8:	9901      	ldr	r1, [sp, #4]
 8003caa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003cae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003cb2:	4259      	negs	r1, r3
 8003cb4:	4159      	adcs	r1, r3
 8003cb6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cba:	e7eb      	b.n	8003c94 <__swhatbuf_r+0x24>

08003cbc <__smakebuf_r>:
 8003cbc:	898b      	ldrh	r3, [r1, #12]
 8003cbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cc0:	079d      	lsls	r5, r3, #30
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	d507      	bpl.n	8003cd8 <__smakebuf_r+0x1c>
 8003cc8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ccc:	6023      	str	r3, [r4, #0]
 8003cce:	6123      	str	r3, [r4, #16]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	6163      	str	r3, [r4, #20]
 8003cd4:	b003      	add	sp, #12
 8003cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cd8:	ab01      	add	r3, sp, #4
 8003cda:	466a      	mov	r2, sp
 8003cdc:	f7ff ffc8 	bl	8003c70 <__swhatbuf_r>
 8003ce0:	9f00      	ldr	r7, [sp, #0]
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	4639      	mov	r1, r7
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f7ff fb16 	bl	8003318 <_malloc_r>
 8003cec:	b948      	cbnz	r0, 8003d02 <__smakebuf_r+0x46>
 8003cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf2:	059a      	lsls	r2, r3, #22
 8003cf4:	d4ee      	bmi.n	8003cd4 <__smakebuf_r+0x18>
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	f043 0302 	orr.w	r3, r3, #2
 8003cfe:	81a3      	strh	r3, [r4, #12]
 8003d00:	e7e2      	b.n	8003cc8 <__smakebuf_r+0xc>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	6020      	str	r0, [r4, #0]
 8003d06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d0a:	81a3      	strh	r3, [r4, #12]
 8003d0c:	9b01      	ldr	r3, [sp, #4]
 8003d0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d12:	b15b      	cbz	r3, 8003d2c <__smakebuf_r+0x70>
 8003d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d18:	4630      	mov	r0, r6
 8003d1a:	f000 f81d 	bl	8003d58 <_isatty_r>
 8003d1e:	b128      	cbz	r0, 8003d2c <__smakebuf_r+0x70>
 8003d20:	89a3      	ldrh	r3, [r4, #12]
 8003d22:	f023 0303 	bic.w	r3, r3, #3
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	81a3      	strh	r3, [r4, #12]
 8003d2c:	89a3      	ldrh	r3, [r4, #12]
 8003d2e:	431d      	orrs	r5, r3
 8003d30:	81a5      	strh	r5, [r4, #12]
 8003d32:	e7cf      	b.n	8003cd4 <__smakebuf_r+0x18>

08003d34 <_fstat_r>:
 8003d34:	b538      	push	{r3, r4, r5, lr}
 8003d36:	4d07      	ldr	r5, [pc, #28]	@ (8003d54 <_fstat_r+0x20>)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	602b      	str	r3, [r5, #0]
 8003d42:	f7ff f8be 	bl	8002ec2 <_fstat>
 8003d46:	1c43      	adds	r3, r0, #1
 8003d48:	d102      	bne.n	8003d50 <_fstat_r+0x1c>
 8003d4a:	682b      	ldr	r3, [r5, #0]
 8003d4c:	b103      	cbz	r3, 8003d50 <_fstat_r+0x1c>
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	bd38      	pop	{r3, r4, r5, pc}
 8003d52:	bf00      	nop
 8003d54:	20000338 	.word	0x20000338

08003d58 <_isatty_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	4d06      	ldr	r5, [pc, #24]	@ (8003d74 <_isatty_r+0x1c>)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4608      	mov	r0, r1
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	f7ff f8bb 	bl	8002ede <_isatty>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	d102      	bne.n	8003d72 <_isatty_r+0x1a>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	b103      	cbz	r3, 8003d72 <_isatty_r+0x1a>
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	bd38      	pop	{r3, r4, r5, pc}
 8003d74:	20000338 	.word	0x20000338

08003d78 <_init>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr

08003d84 <_fini>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	bf00      	nop
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr
