
SKadkhodayanLab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a6c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003c1c  08003c1c  00004c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc4  08003cc4  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ccc  08003ccc  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ccc  08003ccc  00004ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cd0  08003cd0  00004cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003cd4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005070  2**0
                  CONTENTS
 10 .bss          000002b8  20000070  20000070  00005070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  00005070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000782a  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b68  00000000  00000000  0000c8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000808  00000000  00000000  0000e438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d7  00000000  00000000  0000ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e7a  00000000  00000000  0000f217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab3d  00000000  00000000  00033091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d263d  00000000  00000000  0003dbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011020b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000286c  00000000  00000000  00110250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00112abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003c04 	.word	0x08003c04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003c04 	.word	0x08003c04

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <greenLEDInit>:
#include "stm32f4xx_hal.h"

// Create name array for AppDelay
uint32_t nameArray[NAMELENGTH] = {'S', 'E', 'A', 'N'};

void greenLEDInit() {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

    // Initialize the green LED
    LED_Init(LED_GREEN_PIN);
 8000594:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000598:	f000 fa90 	bl	8000abc <LED_Init>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <AppDelay>:
        // Turn off the green LED
        deactivateGreenLED();
    }
}

void AppDelay(uint32_t time) {
 80005a0:	b480      	push	{r7}
 80005a2:	b087      	sub	sp, #28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

	// Create two arrays to store the name
	char sean[NAMELENGTH] = {'S', 'E', 'A', 'N'};
 80005a8:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <AppDelay+0x58>)
 80005aa:	60fb      	str	r3, [r7, #12]
	[[maybe_unused]] char destinationArray[NAMELENGTH];

	// Iterate through the array to create a crude delay function
	for (int i = 0; i < time; i++) {
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	e016      	b.n	80005e0 <AppDelay+0x40>

		for (int j = 0; j < NAMELENGTH; j++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
 80005b6:	e00d      	b.n	80005d4 <AppDelay+0x34>

			destinationArray[j] = sean[j];
 80005b8:	f107 020c 	add.w	r2, r7, #12
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	4413      	add	r3, r2
 80005c0:	7819      	ldrb	r1, [r3, #0]
 80005c2:	f107 0208 	add.w	r2, r7, #8
 80005c6:	693b      	ldr	r3, [r7, #16]
 80005c8:	4413      	add	r3, r2
 80005ca:	460a      	mov	r2, r1
 80005cc:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < NAMELENGTH; j++) {
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	3301      	adds	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	ddee      	ble.n	80005b8 <AppDelay+0x18>
	for (int i = 0; i < time; i++) {
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d8e4      	bhi.n	80005b2 <AppDelay+0x12>
		}
	}
}
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	371c      	adds	r7, #28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	4e414553 	.word	0x4e414553

080005fc <applicationInit>:

void applicationInit() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

    // Initialize Gyro
    Gyro_Init();
 8000600:	f000 f87e 	bl	8000700 <Gyro_Init>

    //Initialize LED
    greenLEDInit();
 8000604:	f7ff ffc4 	bl	8000590 <greenLEDInit>

    // Initialize the GPIOA clock
	User_Button_Enable_Clock();
 8000608:	f000 f842 	bl	8000690 <User_Button_Enable_Clock>

    // Add Gyro ID event to scheduler
    addSchedulerEvent(APP_DELAY_FLAG_EVENT);
 800060c:	2010      	movs	r0, #16
 800060e:	f000 faab 	bl	8000b68 <addSchedulerEvent>

    // Add Gyro power on event to scheduler
    addSchedulerEvent(DEVICE_ID_AND_TEMP_EVENT);
 8000612:	2020      	movs	r0, #32
 8000614:	f000 faa8 	bl	8000b68 <addSchedulerEvent>

    // Compiler flags to only compile interrupt code if the flag is 1
    #if USE_INTERRUPT_FOR_BUTTON == 1

        // Initialize the user button as an interrupt
        InitializeUserButtonAsInterrupt();
 8000618:	f000 f802 	bl	8000620 <InitializeUserButtonAsInterrupt>
        // Add button polling event to scheduler
        addSchedulerEvent(POLL_BUTTON_EVENT);

    #endif

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}

08000620 <InitializeUserButtonAsInterrupt>:

// Compiler flags to only compile interrupt code if the flag is 1
#if USE_INTERRUPT_FOR_BUTTON == 1

void InitializeUserButtonAsInterrupt() {
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
    
    // Initialize the user button as an interrupt
    User_Button_Interrupt_Enable();
 8000624:	f000 f84e 	bl	80006c4 <User_Button_Interrupt_Enable>
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}

0800062c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler() {
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

    // Disable the interrupt so it doesn't trigger during execution
    NVIC_Disable_Interrupt(EXTI0_IRQ_NUM);
 8000630:	2006      	movs	r0, #6
 8000632:	f000 fa0f 	bl	8000a54 <NVIC_Disable_Interrupt>

    // Add the ID and Temperature print event to the scheduler
    addSchedulerEvent(DEVICE_ID_AND_TEMP_EVENT);
 8000636:	2020      	movs	r0, #32
 8000638:	f000 fa96 	bl	8000b68 <addSchedulerEvent>

    // Clear the pending bit to allow for another interrupt in the future
    NVIC_Clear_Pending_EXTI_Bit(USER_BUTTON_PIN);
 800063c:	2000      	movs	r0, #0
 800063e:	f000 fa25 	bl	8000a8c <NVIC_Clear_Pending_EXTI_Bit>

    // Clear the pending interrupt in the NVIC register to prevent another 
    NVIC_Clear_Pending_Interrupt(EXTI0_IRQ_NUM);
 8000642:	2006      	movs	r0, #6
 8000644:	f000 fa14 	bl	8000a70 <NVIC_Clear_Pending_Interrupt>

    // Re-enable the interrupt
    NVIC_Enable_Interrupt(EXTI0_IRQ_NUM);
 8000648:	2006      	movs	r0, #6
 800064a:	f000 f9f5 	bl	8000a38 <NVIC_Enable_Interrupt>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}

08000652 <getGyroID>:

#endif

void getGyroID(){
 8000652:	b580      	push	{r7, lr}
 8000654:	af00      	add	r7, sp, #0
    
    Gyro_GetID();
 8000656:	f000 f8d7 	bl	8000808 <Gyro_GetID>
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}

0800065e <powerOnGyro>:

void powerOnGyro(){
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
    
    Gyro_PowerON();
 8000662:	f000 f905 	bl	8000870 <Gyro_PowerON>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}

0800066a <getGyroTemperature>:

void getGyroTemperature(){
 800066a:	b580      	push	{r7, lr}
 800066c:	af00      	add	r7, sp, #0
    
    Gyro_GetTemperature();
 800066e:	f000 f917 	bl	80008a0 <Gyro_GetTemperature>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <configureGyro>:

void configureGyro(){
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
    
    Gyro_Config();
 800067a:	f000 f945 	bl	8000908 <Gyro_Config>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}

08000682 <getGyroConfiguration>:

void getGyroConfiguration(){
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0
    
    Gyro_ReadConfig();
 8000686:	f000 f965 	bl	8000954 <Gyro_ReadConfig>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <User_Button_Enable_Clock>:

//GPIO_PinConfig_t GPIOConfig = {0};

GPIO_InitTypeDef GPIOConfigH = {0};

void User_Button_Enable_Clock() {
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
    // Enable the clock for the user button
//    RCC->AHB1ENR |= (1 << USER_BUTTON_PORT);

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <User_Button_Enable_Clock+0x30>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <User_Button_Enable_Clock+0x30>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <User_Button_Enable_Clock+0x30>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800

080006c4 <User_Button_Interrupt_Enable>:
	else {
		return false;
	}
}

void User_Button_Interrupt_Enable() {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
//    GPIOConfig.PinMode = GPIO_PinMode_Input;
//    GPIOConfig.PinSpeed = GPIO_Speed_Medium;
//    GPIOConfig.PinPuPdControl = GPIO_PUPDR_PD;
//    GPIOConfig.PinInterruptMode = GPIO_PinInterrupt_RisingFallingEdge;

	GPIOConfigH.Pin = GPIO_PIN_0;
 80006c8:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <User_Button_Interrupt_Enable+0x34>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
	GPIOConfigH.Mode = GPIO_MODE_IT_RISING;
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <User_Button_Interrupt_Enable+0x34>)
 80006d0:	f44f 1288 	mov.w	r2, #1114112	@ 0x110000
 80006d4:	605a      	str	r2, [r3, #4]
	GPIOConfigH.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80006d6:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <User_Button_Interrupt_Enable+0x34>)
 80006d8:	2201      	movs	r2, #1
 80006da:	60da      	str	r2, [r3, #12]
	GPIOConfigH.Pull = GPIO_PULLDOWN;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <User_Button_Interrupt_Enable+0x34>)
 80006de:	2202      	movs	r2, #2
 80006e0:	609a      	str	r2, [r3, #8]

    // Enable the clock for the user button
    User_Button_Enable_Clock();
 80006e2:	f7ff ffd5 	bl	8000690 <User_Button_Enable_Clock>

    // Initialize the GPIO Pin
//    GPIO_Init(GPIOA, GPIOConfig);

    HAL_GPIO_Init(GPIOA, &GPIOConfigH);
 80006e6:	4904      	ldr	r1, [pc, #16]	@ (80006f8 <User_Button_Interrupt_Enable+0x34>)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <User_Button_Interrupt_Enable+0x38>)
 80006ea:	f000 fe31 	bl	8001350 <HAL_GPIO_Init>

    // Enable the interrupt in the EXTI register
//    GPIO_InterruptConfig(6, ENABLE);

    HAL_NVIC_EnableIRQ(EXTI0_IRQ_NUM);
 80006ee:	2006      	movs	r0, #6
 80006f0:	f000 fdf7 	bl	80012e2 <HAL_NVIC_EnableIRQ>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40020000 	.word	0x40020000

08000700 <Gyro_Init>:

// MSB First Bit Structure in uint16_t
// SPI Send Structure for Gyro |(DATA)|(READ/WRITE)|(MS)|(ADDRESS)|
//                  Bit Number | 16-9 |      8     |  7 |   6-0   |

void Gyro_Init(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0

	// Enable GPIOF Clock
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b38      	ldr	r3, [pc, #224]	@ (80007ec <Gyro_Init+0xec>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a37      	ldr	r2, [pc, #220]	@ (80007ec <Gyro_Init+0xec>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <Gyro_Init+0xec>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

	// GPIOF Configuration
	GPIOFstruct.Pin = SPI5_SCK_PIN | SPI5_MISO_PIN | SPI5_MOSI_PIN;
 8000722:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <Gyro_Init+0xf0>)
 8000724:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8000728:	601a      	str	r2, [r3, #0]
	GPIOFstruct.Mode = GPIO_MODE_AF_PP;
 800072a:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <Gyro_Init+0xf0>)
 800072c:	2202      	movs	r2, #2
 800072e:	605a      	str	r2, [r3, #4]
	GPIOFstruct.Alternate = GPIO_AF5_SPI5;
 8000730:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <Gyro_Init+0xf0>)
 8000732:	2205      	movs	r2, #5
 8000734:	611a      	str	r2, [r3, #16]
	GPIOFstruct.Pull = GPIO_NOPULL;
 8000736:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <Gyro_Init+0xf0>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
	GPIOFstruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <Gyro_Init+0xf0>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOF, &GPIOFstruct);
 8000742:	492b      	ldr	r1, [pc, #172]	@ (80007f0 <Gyro_Init+0xf0>)
 8000744:	482b      	ldr	r0, [pc, #172]	@ (80007f4 <Gyro_Init+0xf4>)
 8000746:	f000 fe03 	bl	8001350 <HAL_GPIO_Init>

	// Enable GPIOC Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b27      	ldr	r3, [pc, #156]	@ (80007ec <Gyro_Init+0xec>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a26      	ldr	r2, [pc, #152]	@ (80007ec <Gyro_Init+0xec>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <Gyro_Init+0xec>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

	// GPIOC Configuration
	GPIOCstruct.Pin = NCS_MEMS_SPI_PIN;
 8000766:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <Gyro_Init+0xf8>)
 8000768:	2202      	movs	r2, #2
 800076a:	601a      	str	r2, [r3, #0]
	GPIOCstruct.Mode = GPIO_MODE_OUTPUT_OD;
 800076c:	4b22      	ldr	r3, [pc, #136]	@ (80007f8 <Gyro_Init+0xf8>)
 800076e:	2211      	movs	r2, #17
 8000770:	605a      	str	r2, [r3, #4]
	GPIOCstruct.Alternate = GPIO_AF5_SPI5;
 8000772:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <Gyro_Init+0xf8>)
 8000774:	2205      	movs	r2, #5
 8000776:	611a      	str	r2, [r3, #16]
	GPIOCstruct.Pull = GPIO_PULLUP;
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <Gyro_Init+0xf8>)
 800077a:	2201      	movs	r2, #1
 800077c:	609a      	str	r2, [r3, #8]
	GPIOCstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <Gyro_Init+0xf8>)
 8000780:	2202      	movs	r2, #2
 8000782:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIOCstruct);
 8000784:	491c      	ldr	r1, [pc, #112]	@ (80007f8 <Gyro_Init+0xf8>)
 8000786:	481d      	ldr	r0, [pc, #116]	@ (80007fc <Gyro_Init+0xfc>)
 8000788:	f000 fde2 	bl	8001350 <HAL_GPIO_Init>
	Gyro_DisableSlaveComms();
 800078c:	f000 f948 	bl	8000a20 <Gyro_DisableSlaveComms>

	// SPI5 Configuration
	SPI.Instance = SPI5;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <Gyro_Init+0x100>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	@ (8000804 <Gyro_Init+0x104>)
 8000794:	601a      	str	r2, [r3, #0]
	SPI.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <Gyro_Init+0x100>)
 8000798:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800079c:	605a      	str	r2, [r3, #4]
	SPI.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <Gyro_Init+0x100>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
	SPI.Init.DataSize = SPI_DATASIZE_8BIT;					// 2 x 8bit package send
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <Gyro_Init+0x100>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
	SPI.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <Gyro_Init+0x100>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	611a      	str	r2, [r3, #16]
	SPI.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <Gyro_Init+0x100>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	615a      	str	r2, [r3, #20]
	SPI.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <Gyro_Init+0x100>)
 80007b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007bc:	619a      	str	r2, [r3, #24]
	SPI.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <Gyro_Init+0x100>)
 80007c0:	2228      	movs	r2, #40	@ 0x28
 80007c2:	61da      	str	r2, [r3, #28]
	SPI.Init.FirstBit = SPI_FIRSTBIT_MSB;					// MSB First bit reads from left to right
 80007c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <Gyro_Init+0x100>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
	SPI.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <Gyro_Init+0x100>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	@ 0x24
	SPI.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000800 <Gyro_Init+0x100>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	@ 0x28
	SPI.Init.CRCPolynomial = 0;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <Gyro_Init+0x100>)
 80007d8:	2200      	movs	r2, #0
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
	HAL_SPI_Init(&SPI);
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <Gyro_Init+0x100>)
 80007de:	f001 fbf9 	bl	8001fd4 <HAL_SPI_Init>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	200000a0 	.word	0x200000a0
 80007f4:	40021400 	.word	0x40021400
 80007f8:	200000b4 	.word	0x200000b4
 80007fc:	40020800 	.word	0x40020800
 8000800:	200000c8 	.word	0x200000c8
 8000804:	40015000 	.word	0x40015000

08000808 <Gyro_GetID>:

void Gyro_GetID() {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af02      	add	r7, sp, #8

	// Create Send Data to read the WHO_AM_I register
	uint16_t dataSend = (0 << 8) | (READ << 7) | (0 << 6) | (WHO_AM_I);		// Send |00000000|1|0|001111| to WHO_AM_I
 800080e:	238f      	movs	r3, #143	@ 0x8f
 8000810:	80bb      	strh	r3, [r7, #4]
	uint16_t dataReceive = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	807b      	strh	r3, [r7, #2]
	uint8_t parsedReceive;

	// Send data once the communication line is low
	Gyro_EnableSlaveComms();
 8000816:	f000 f8f7 	bl	8000a08 <Gyro_EnableSlaveComms>
	while (HAL_GPIO_ReadPin(GPIOC,NCS_MEMS_SPI_PIN) != GPIO_PIN_RESET);
 800081a:	bf00      	nop
 800081c:	2102      	movs	r1, #2
 800081e:	4810      	ldr	r0, [pc, #64]	@ (8000860 <Gyro_GetID+0x58>)
 8000820:	f000 ff42 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f8      	bne.n	800081c <Gyro_GetID+0x14>
	HALStatus = HAL_SPI_TransmitReceive(&SPI, (uint8_t*) &dataSend, (uint8_t*) &dataReceive, 2, TIMEOUT);
 800082a:	1cba      	adds	r2, r7, #2
 800082c:	1d39      	adds	r1, r7, #4
 800082e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2302      	movs	r3, #2
 8000836:	480b      	ldr	r0, [pc, #44]	@ (8000864 <Gyro_GetID+0x5c>)
 8000838:	f001 fd99 	bl	800236e <HAL_SPI_TransmitReceive>
 800083c:	4603      	mov	r3, r0
 800083e:	461a      	mov	r2, r3
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <Gyro_GetID+0x60>)
 8000842:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 8000844:	f000 f8ec 	bl	8000a20 <Gyro_DisableSlaveComms>

	// Parse the Incoming Data by taking the second byte(data)
	parsedReceive = ((uint8_t*)&dataReceive)[1];
 8000848:	78fb      	ldrb	r3, [r7, #3]
 800084a:	71fb      	strb	r3, [r7, #7]

	// Print ID in hex format
	printf("\nDevice ID: %x \n", parsedReceive);
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4619      	mov	r1, r3
 8000850:	4806      	ldr	r0, [pc, #24]	@ (800086c <Gyro_GetID+0x64>)
 8000852:	f002 fb69 	bl	8002f28 <iprintf>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020800 	.word	0x40020800
 8000864:	200000c8 	.word	0x200000c8
 8000868:	20000120 	.word	0x20000120
 800086c:	08003c1c 	.word	0x08003c1c

08000870 <Gyro_PowerON>:

void Gyro_PowerON() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

	// Create Send Data to enable Power Down Mode (1000)
	uint16_t dataSend = (0x8 << 8) | (WRITE << 7) | (0 << 6) | (CTRL_REG1);		// Send |00001000|0|0|100000| to CTRL_REG1
 8000876:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 800087a:	80fb      	strh	r3, [r7, #6]

	Gyro_EnableSlaveComms();
 800087c:	f000 f8c4 	bl	8000a08 <Gyro_EnableSlaveComms>
	HAL_SPI_Transmit(&SPI, (uint8_t*)&dataSend, 2, TIMEOUT);
 8000880:	1db9      	adds	r1, r7, #6
 8000882:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000886:	2202      	movs	r2, #2
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <Gyro_PowerON+0x2c>)
 800088a:	f001 fc2c 	bl	80020e6 <HAL_SPI_Transmit>
	Gyro_DisableSlaveComms();
 800088e:	f000 f8c7 	bl	8000a20 <Gyro_DisableSlaveComms>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000c8 	.word	0x200000c8

080008a0 <Gyro_GetTemperature>:

void Gyro_GetTemperature() {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b084      	sub	sp, #16
 80008a4:	af02      	add	r7, sp, #8
	// Create Send Data to read the OUT_TEMP register
	uint16_t dataSend = (0 << 8) | (READ << 7) | (0 << 6) | (OUT_TEMP);		// Send |00000000|1|0|001111| to OUT_TEMP
 80008a6:	23a6      	movs	r3, #166	@ 0xa6
 80008a8:	80bb      	strh	r3, [r7, #4]
	uint16_t dataReceive = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	807b      	strh	r3, [r7, #2]
	uint8_t parsedReceive;

	// Send data once the communication line is low
	Gyro_EnableSlaveComms();
 80008ae:	f000 f8ab 	bl	8000a08 <Gyro_EnableSlaveComms>
	while (HAL_GPIO_ReadPin(GPIOC,NCS_MEMS_SPI_PIN) != GPIO_PIN_RESET);
 80008b2:	bf00      	nop
 80008b4:	2102      	movs	r1, #2
 80008b6:	4810      	ldr	r0, [pc, #64]	@ (80008f8 <Gyro_GetTemperature+0x58>)
 80008b8:	f000 fef6 	bl	80016a8 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1f8      	bne.n	80008b4 <Gyro_GetTemperature+0x14>
	HALStatus = HAL_SPI_TransmitReceive(&SPI, (uint8_t*) &dataSend, (uint8_t*) &dataReceive, 2, TIMEOUT);
 80008c2:	1cba      	adds	r2, r7, #2
 80008c4:	1d39      	adds	r1, r7, #4
 80008c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2302      	movs	r3, #2
 80008ce:	480b      	ldr	r0, [pc, #44]	@ (80008fc <Gyro_GetTemperature+0x5c>)
 80008d0:	f001 fd4d 	bl	800236e <HAL_SPI_TransmitReceive>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <Gyro_GetTemperature+0x60>)
 80008da:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 80008dc:	f000 f8a0 	bl	8000a20 <Gyro_DisableSlaveComms>

	// Parse the Incoming Data by taking the second byte(data)
	parsedReceive = ((uint8_t*)&dataReceive)[1];
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	71fb      	strb	r3, [r7, #7]

	// Print ID in hex format
	printf("Temperature: %d \n", parsedReceive);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4619      	mov	r1, r3
 80008e8:	4806      	ldr	r0, [pc, #24]	@ (8000904 <Gyro_GetTemperature+0x64>)
 80008ea:	f002 fb1d 	bl	8002f28 <iprintf>

}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40020800 	.word	0x40020800
 80008fc:	200000c8 	.word	0x200000c8
 8000900:	20000120 	.word	0x20000120
 8000904:	08003c30 	.word	0x08003c30

08000908 <Gyro_Config>:

void Gyro_Config() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

	// Create Send Data to put module in normal mode
	uint16_t dataSend = (0x8 << 8) | (WRITE << 7) | (0 << 6) | (CTRL_REG1);		// Send |00001000|0|0|100000| to CTRL_REG1
 800090e:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8000912:	80fb      	strh	r3, [r7, #6]

	Gyro_EnableSlaveComms();
 8000914:	f000 f878 	bl	8000a08 <Gyro_EnableSlaveComms>
	HAL_SPI_Transmit(&SPI, (uint8_t*) &dataSend, 2, TIMEOUT);
 8000918:	1db9      	adds	r1, r7, #6
 800091a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800091e:	2202      	movs	r2, #2
 8000920:	480b      	ldr	r0, [pc, #44]	@ (8000950 <Gyro_Config+0x48>)
 8000922:	f001 fbe0 	bl	80020e6 <HAL_SPI_Transmit>
	Gyro_DisableSlaveComms();
 8000926:	f000 f87b 	bl	8000a20 <Gyro_DisableSlaveComms>


	// Create Send Data to reboot memory content
	dataSend = (0x80 << 8) | (WRITE << 7) | (0 << 6) | (CTRL_REG5);				// Send |10000000|0|0|100100| to CTRL_REG5
 800092a:	f248 0324 	movw	r3, #32804	@ 0x8024
 800092e:	80fb      	strh	r3, [r7, #6]

	Gyro_EnableSlaveComms();
 8000930:	f000 f86a 	bl	8000a08 <Gyro_EnableSlaveComms>
	HAL_SPI_Transmit(&SPI, (uint8_t*) &dataSend, 2, TIMEOUT);
 8000934:	1db9      	adds	r1, r7, #6
 8000936:	f241 3388 	movw	r3, #5000	@ 0x1388
 800093a:	2202      	movs	r2, #2
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <Gyro_Config+0x48>)
 800093e:	f001 fbd2 	bl	80020e6 <HAL_SPI_Transmit>
	Gyro_DisableSlaveComms();
 8000942:	f000 f86d 	bl	8000a20 <Gyro_DisableSlaveComms>

}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000c8 	.word	0x200000c8

08000954 <Gyro_ReadConfig>:

void Gyro_ReadConfig() {
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af02      	add	r7, sp, #8
	// Create Send Data to read the CTRL_REG1 register
	uint16_t dataSend = (0) | (READ << 7) | (0 << 6) | (CTRL_REG1);		// Send |00000000|1|0|100000| to CTRL_REG1
 800095a:	23a0      	movs	r3, #160	@ 0xa0
 800095c:	80bb      	strh	r3, [r7, #4]
	uint16_t dataReceive = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	807b      	strh	r3, [r7, #2]
	uint8_t parsedReceive;

	// Send data once the communication line is low
	Gyro_EnableSlaveComms();
 8000962:	f000 f851 	bl	8000a08 <Gyro_EnableSlaveComms>
	while (HAL_GPIO_ReadPin(GPIOC,NCS_MEMS_SPI_PIN) != GPIO_PIN_RESET);
 8000966:	bf00      	nop
 8000968:	2102      	movs	r1, #2
 800096a:	4822      	ldr	r0, [pc, #136]	@ (80009f4 <Gyro_ReadConfig+0xa0>)
 800096c:	f000 fe9c 	bl	80016a8 <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f8      	bne.n	8000968 <Gyro_ReadConfig+0x14>
	HALStatus = HAL_SPI_TransmitReceive(&SPI, (uint8_t*) &dataSend, (uint8_t*) &dataReceive, 2, TIMEOUT);
 8000976:	1cba      	adds	r2, r7, #2
 8000978:	1d39      	adds	r1, r7, #4
 800097a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	481d      	ldr	r0, [pc, #116]	@ (80009f8 <Gyro_ReadConfig+0xa4>)
 8000984:	f001 fcf3 	bl	800236e <HAL_SPI_TransmitReceive>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <Gyro_ReadConfig+0xa8>)
 800098e:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 8000990:	f000 f846 	bl	8000a20 <Gyro_DisableSlaveComms>

	// Parse the Incoming Data by taking the second byte(data)
	parsedReceive = ((uint8_t*)&dataReceive)[1];
 8000994:	78fb      	ldrb	r3, [r7, #3]
 8000996:	71fb      	strb	r3, [r7, #7]

	// Print ID in hex format
	printf("CTRL_REG1: %x \n", parsedReceive);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4619      	mov	r1, r3
 800099c:	4818      	ldr	r0, [pc, #96]	@ (8000a00 <Gyro_ReadConfig+0xac>)
 800099e:	f002 fac3 	bl	8002f28 <iprintf>


	// Create Send Data to read the CTRL_REG5 register
	dataSend = (0) | (READ << 7) | (0 << 6) | (CTRL_REG5);		// Send |00000000|1|0|100100| to CTRL_REG5
 80009a2:	23a4      	movs	r3, #164	@ 0xa4
 80009a4:	80bb      	strh	r3, [r7, #4]
	dataReceive = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	807b      	strh	r3, [r7, #2]

	// Send data once the communication line is low
	Gyro_EnableSlaveComms();
 80009aa:	f000 f82d 	bl	8000a08 <Gyro_EnableSlaveComms>
	while (HAL_GPIO_ReadPin(GPIOC,NCS_MEMS_SPI_PIN) != GPIO_PIN_RESET);
 80009ae:	bf00      	nop
 80009b0:	2102      	movs	r1, #2
 80009b2:	4810      	ldr	r0, [pc, #64]	@ (80009f4 <Gyro_ReadConfig+0xa0>)
 80009b4:	f000 fe78 	bl	80016a8 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1f8      	bne.n	80009b0 <Gyro_ReadConfig+0x5c>
	HALStatus = HAL_SPI_TransmitReceive(&SPI, (uint8_t*) &dataSend, (uint8_t*) &dataReceive, 2, TIMEOUT);
 80009be:	1cba      	adds	r2, r7, #2
 80009c0:	1d39      	adds	r1, r7, #4
 80009c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	2302      	movs	r3, #2
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <Gyro_ReadConfig+0xa4>)
 80009cc:	f001 fccf 	bl	800236e <HAL_SPI_TransmitReceive>
 80009d0:	4603      	mov	r3, r0
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <Gyro_ReadConfig+0xa8>)
 80009d6:	701a      	strb	r2, [r3, #0]
	Gyro_DisableSlaveComms();
 80009d8:	f000 f822 	bl	8000a20 <Gyro_DisableSlaveComms>

	// Parse the Incoming Data by taking the second byte(data)
	parsedReceive = ((uint8_t*)&dataReceive)[1];
 80009dc:	78fb      	ldrb	r3, [r7, #3]
 80009de:	71fb      	strb	r3, [r7, #7]

	// Print ID in hex format
	printf("CTRL_REG5: %x \n", parsedReceive);
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4619      	mov	r1, r3
 80009e4:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <Gyro_ReadConfig+0xb0>)
 80009e6:	f002 fa9f 	bl	8002f28 <iprintf>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40020800 	.word	0x40020800
 80009f8:	200000c8 	.word	0x200000c8
 80009fc:	20000120 	.word	0x20000120
 8000a00:	08003c44 	.word	0x08003c44
 8000a04:	08003c54 	.word	0x08003c54

08000a08 <Gyro_EnableSlaveComms>:
	if(HALStatus != HAL_OK){
		APPLICATION_ASSERT(false);
	}
}

void Gyro_EnableSlaveComms() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_PIN, GPIO_PIN_RESET); // Set to LOW to enable SPI mode Pin PC1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4802      	ldr	r0, [pc, #8]	@ (8000a1c <Gyro_EnableSlaveComms+0x14>)
 8000a12:	f000 fe61 	bl	80016d8 <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40020800 	.word	0x40020800

08000a20 <Gyro_DisableSlaveComms>:

void Gyro_DisableSlaveComms() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_PIN, GPIO_PIN_SET); 	// Set to HIGH to disable SPI mode Pin PC1
 8000a24:	2201      	movs	r2, #1
 8000a26:	2102      	movs	r1, #2
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <Gyro_DisableSlaveComms+0x14>)
 8000a2a:	f000 fe55 	bl	80016d8 <HAL_GPIO_WritePin>
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40020800 	.word	0x40020800

08000a38 <NVIC_Enable_Interrupt>:
 *      Author: seank
 */

#include "InterruptControl.h"

void NVIC_Enable_Interrupt(uint8_t IRQnum) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
//    else {
//        // Enable the interrupt in the NVIC_ISER0 register
//        *NVIC_ISER1 |= (1 << (IRQnum % 32));
//    }

	HAL_NVIC_EnableIRQ(IRQnum);
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fc4b 	bl	80012e2 <HAL_NVIC_EnableIRQ>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <NVIC_Disable_Interrupt>:

void NVIC_Disable_Interrupt(uint8_t IRQnum) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
//    else {
//        // Disable the interrupt in the NVIC_ICER0 register
//        *NVIC_ICER1 |= (1 << (IRQnum % 32));
//    }

	HAL_NVIC_DisableIRQ(IRQnum);
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fc4b 	bl	80012fe <HAL_NVIC_DisableIRQ>

}
 8000a68:	bf00      	nop
 8000a6a:	3708      	adds	r7, #8
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <NVIC_Clear_Pending_Interrupt>:

void NVIC_Clear_Pending_Interrupt(uint8_t IRQnum) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
//    else {
//        // Clear the pending interrupt in the NVIC_ICPR0 register
//        *NVIC_ICPR1 |= (1 << (IRQnum % 32));
//    }

	HAL_NVIC_ClearPendingIRQ(IRQnum);
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fc57 	bl	8001332 <HAL_NVIC_ClearPendingIRQ>

}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <NVIC_Clear_Pending_EXTI_Bit>:

	HAL_NVIC_SetPendingIRQ(IRQnum);

}

void NVIC_Clear_Pending_EXTI_Bit(uint8_t pinNum) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]

    // Clear the pending bit in the EXTI register
    EXTI->PR |= (1 << pinNum);
 8000a96:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <NVIC_Clear_Pending_EXTI_Bit+0x2c>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4a04      	ldr	r2, [pc, #16]	@ (8000ab8 <NVIC_Clear_Pending_EXTI_Bit+0x2c>)
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	6153      	str	r3, [r2, #20]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40013c00 	.word	0x40013c00

08000abc <LED_Init>:
 *      Author: seank
 */

#include "LED_Driver.h"

void LED_Init(uint16_t LEDPin) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	80fb      	strh	r3, [r7, #6]

	// Instantiate a GPIO_PinConfig_t struct
	GPIO_InitTypeDef* GPIOConfigH = {0};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]

	switch(LEDPin) {
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ad0:	d022      	beq.n	8000b18 <LED_Init+0x5c>
 8000ad2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ad6:	d13f      	bne.n	8000b58 <LED_Init+0x9c>

	// Configure for Red LED
	case LED_RED_PIN:

		// Configure the GPIO struct to drive the red LED
		GPIOConfigH->Pin = LED_RED_PIN;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ade:	601a      	str	r2, [r3, #0]
		GPIOConfigH->Mode = GPIO_MODE_OUTPUT_PP;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	605a      	str	r2, [r3, #4]
		GPIOConfigH->Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	60da      	str	r2, [r3, #12]
		GPIOConfigH->Pull = GPIO_NOPULL;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]

		// Enable Corresponding GPIOG Clock
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <LED_Init+0xa4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a19      	ldr	r2, [pc, #100]	@ (8000b60 <LED_Init+0xa4>)
 8000afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <LED_Init+0xa4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

		// Initialize the GPIO Pin
		HAL_GPIO_Init(GPIOG, GPIOConfigH);
 8000b0e:	6979      	ldr	r1, [r7, #20]
 8000b10:	4814      	ldr	r0, [pc, #80]	@ (8000b64 <LED_Init+0xa8>)
 8000b12:	f000 fc1d 	bl	8001350 <HAL_GPIO_Init>

		break;
 8000b16:	e01f      	b.n	8000b58 <LED_Init+0x9c>

	// Configure for Green LED
	case LED_GREEN_PIN:

		// Configure the GPIO struct to drive the green LED
		GPIOConfigH->Pin = LED_GREEN_PIN;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b1e:	601a      	str	r2, [r3, #0]
		GPIOConfigH->Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	2201      	movs	r2, #1
 8000b24:	605a      	str	r2, [r3, #4]
		GPIOConfigH->Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	60da      	str	r2, [r3, #12]
		GPIOConfigH->Pull = GPIO_NOPULL;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]

		// Enable Corresponding GPIOG Clock
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <LED_Init+0xa4>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a09      	ldr	r2, [pc, #36]	@ (8000b60 <LED_Init+0xa4>)
 8000b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <LED_Init+0xa4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]

		// Initialize the GPIO Pin
		HAL_GPIO_Init(GPIOG, GPIOConfigH);
 8000b4e:	6979      	ldr	r1, [r7, #20]
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <LED_Init+0xa8>)
 8000b52:	f000 fbfd 	bl	8001350 <HAL_GPIO_Init>

		break;
 8000b56:	bf00      	nop
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40021800 	.word	0x40021800

08000b68 <addSchedulerEvent>:

#include "Scheduler.h"

uint32_t ScheduledEvents = 0;

void addSchedulerEvent(uint32_t event) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

    // Add the event to the scheduled events
    ScheduledEvents |= event;
 8000b70:	4b05      	ldr	r3, [pc, #20]	@ (8000b88 <addSchedulerEvent+0x20>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	4a03      	ldr	r2, [pc, #12]	@ (8000b88 <addSchedulerEvent+0x20>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20000124 	.word	0x20000124

08000b8c <removeScheduledEvent>:

void removeScheduledEvent(uint32_t event) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]

    // Remove the event from the scheduled events
    ScheduledEvents &= ~event;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	43da      	mvns	r2, r3
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <removeScheduledEvent+0x24>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <removeScheduledEvent+0x24>)
 8000ba0:	6013      	str	r3, [r2, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000124 	.word	0x20000124

08000bb4 <getScheduledEvents>:

uint32_t getScheduledEvents() {
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

    // Return the scheduled events
    return ScheduledEvents;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <getScheduledEvents+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000124 	.word	0x20000124

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  // monitor handles to use printf()
	initialise_monitor_handles();
 8000bd2:	f002 f869 	bl	8002ca8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd6:	f000 f9b5 	bl	8000f44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bda:	f000 f82f 	bl	8000c3c <SystemClock_Config>
  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */

  // Initialize peripherals
  applicationInit();
 8000bde:	f7ff fd0d 	bl	80005fc <applicationInit>

  // Power on Gyro and wait for startup
  powerOnGyro();
 8000be2:	f7ff fd3c 	bl	800065e <powerOnGyro>
  HAL_Delay(1000);
 8000be6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bea:	f000 fa1d 	bl	8001028 <HAL_Delay>

  // Configure Gyro and get details
  getGyroID();
 8000bee:	f7ff fd30 	bl	8000652 <getGyroID>
  configureGyro();
 8000bf2:	f7ff fd40 	bl	8000676 <configureGyro>
  getGyroConfiguration();
 8000bf6:	f7ff fd44 	bl	8000682 <getGyroConfiguration>
  getGyroTemperature();
 8000bfa:	f7ff fd36 	bl	800066a <getGyroTemperature>

  uint32_t eventsToRun;
  eventsToRun = getScheduledEvents();
 8000bfe:	f7ff ffd9 	bl	8000bb4 <getScheduledEvents>
 8000c02:	6078      	str	r0, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    // Continuously check the scheduler for events to run
    eventsToRun = getScheduledEvents();
 8000c04:	f7ff ffd6 	bl	8000bb4 <getScheduledEvents>
 8000c08:	6078      	str	r0, [r7, #4]

    if (eventsToRun & APP_DELAY_FLAG_EVENT) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d006      	beq.n	8000c22 <main+0x56>
      AppDelay(DELAYMAGNIFIER);
 8000c14:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000c18:	f7ff fcc2 	bl	80005a0 <AppDelay>
      removeScheduledEvent(APP_DELAY_FLAG_EVENT);
 8000c1c:	2010      	movs	r0, #16
 8000c1e:	f7ff ffb5 	bl	8000b8c <removeScheduledEvent>
    }

    if (eventsToRun & DEVICE_ID_AND_TEMP_EVENT) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	f003 0320 	and.w	r3, r3, #32
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0eb      	beq.n	8000c04 <main+0x38>
      getGyroID();
 8000c2c:	f7ff fd11 	bl	8000652 <getGyroID>
      getGyroTemperature();
 8000c30:	f7ff fd1b 	bl	800066a <getGyroTemperature>
      removeScheduledEvent(DEVICE_ID_AND_TEMP_EVENT);
 8000c34:	2020      	movs	r0, #32
 8000c36:	f7ff ffa9 	bl	8000b8c <removeScheduledEvent>
    eventsToRun = getScheduledEvents();
 8000c3a:	e7e3      	b.n	8000c04 <main+0x38>

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	@ 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2230      	movs	r2, #48	@ 0x30
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 f9c1 	bl	8002fd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	4b29      	ldr	r3, [pc, #164]	@ (8000d0c <SystemClock_Config+0xd0>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	4a28      	ldr	r2, [pc, #160]	@ (8000d0c <SystemClock_Config+0xd0>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c70:	4b26      	ldr	r3, [pc, #152]	@ (8000d0c <SystemClock_Config+0xd0>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <SystemClock_Config+0xd4>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c88:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <SystemClock_Config+0xd4>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <SystemClock_Config+0xd4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca4:	2310      	movs	r3, #16
 8000ca6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cac:	2300      	movs	r3, #0
 8000cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000cb4:	2332      	movs	r3, #50	@ 0x32
 8000cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 fd21 	bl	800170c <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd0:	f000 f820 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000ce0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ce6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 ff82 	bl	8001bfc <HAL_RCC_ClockConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cfe:	f000 f809 	bl	8000d14 <Error_Handler>
  }
}
 8000d02:	bf00      	nop
 8000d04:	3750      	adds	r7, #80	@ 0x50
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40007000 	.word	0x40007000

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f000 fa98 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a19      	ldr	r2, [pc, #100]	@ (8000df4 <HAL_SPI_MspInit+0x84>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d12c      	bne.n	8000dec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b18      	ldr	r3, [pc, #96]	@ (8000df8 <HAL_SPI_MspInit+0x88>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a17      	ldr	r2, [pc, #92]	@ (8000df8 <HAL_SPI_MspInit+0x88>)
 8000d9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <HAL_SPI_MspInit+0x88>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <HAL_SPI_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <HAL_SPI_MspInit+0x88>)
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <HAL_SPI_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0320 	and.w	r3, r3, #32
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000dca:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000ddc:	2305      	movs	r3, #5
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <HAL_SPI_MspInit+0x8c>)
 8000de8:	f000 fab2 	bl	8001350 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	@ 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40015000 	.word	0x40015000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40021400 	.word	0x40021400

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e56:	f000 f8c7 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	@ (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f002 f8ee 	bl	8003070 <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	@ (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20030000 	.word	0x20030000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000128 	.word	0x20000128
 8000ec8:	20000328 	.word	0x20000328

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	@ (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ef0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef4:	f7ff ffea 	bl	8000ecc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef8:	480c      	ldr	r0, [pc, #48]	@ (8000f2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000efa:	490d      	ldr	r1, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000efc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f00:	e002      	b.n	8000f08 <LoopCopyDataInit>

08000f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f06:	3304      	adds	r3, #4

08000f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f0c:	d3f9      	bcc.n	8000f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f10:	4c0a      	ldr	r4, [pc, #40]	@ (8000f3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f14:	e001      	b.n	8000f1a <LoopFillZerobss>

08000f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f18:	3204      	adds	r2, #4

08000f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f1c:	d3fb      	bcc.n	8000f16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f1e:	f002 f8ad 	bl	800307c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f22:	f7ff fe53 	bl	8000bcc <main>
  bx  lr    
 8000f26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f34:	08003cd4 	.word	0x08003cd4
  ldr r2, =_sbss
 8000f38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f3c:	20000328 	.word	0x20000328

08000f40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f40:	e7fe      	b.n	8000f40 <ADC_IRQHandler>
	...

08000f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f48:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <HAL_Init+0x40>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <HAL_Init+0x40>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f54:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <HAL_Init+0x40>)
 8000f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <HAL_Init+0x40>)
 8000f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6c:	2003      	movs	r0, #3
 8000f6e:	f000 f991 	bl	8001294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f72:	2000      	movs	r0, #0
 8000f74:	f000 f808 	bl	8000f88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f78:	f7ff fed2 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023c00 	.word	0x40023c00

08000f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <HAL_InitTick+0x54>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <HAL_InitTick+0x58>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f9b7 	bl	800131a <HAL_SYSTICK_Config>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00e      	b.n	8000fd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d80a      	bhi.n	8000fd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f971 	bl	80012aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc8:	4a06      	ldr	r2, [pc, #24]	@ (8000fe4 <HAL_InitTick+0x5c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e000      	b.n	8000fd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	@ (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	2000012c 	.word	0x2000012c

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000012c 	.word	0x2000012c

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	@ (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	@ (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	@ (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	2b00      	cmp	r3, #0
 8001120:	db12      	blt.n	8001148 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	f003 021f 	and.w	r2, r3, #31
 8001128:	490a      	ldr	r1, [pc, #40]	@ (8001154 <__NVIC_DisableIRQ+0x44>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	095b      	lsrs	r3, r3, #5
 8001130:	2001      	movs	r0, #1
 8001132:	fa00 f202 	lsl.w	r2, r0, r2
 8001136:	3320      	adds	r3, #32
 8001138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800113c:	f3bf 8f4f 	dsb	sy
}
 8001140:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001142:	f3bf 8f6f 	isb	sy
}
 8001146:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100

08001158 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0c      	blt.n	8001184 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	@ (8001190 <__NVIC_ClearPendingIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	3360      	adds	r3, #96	@ 0x60
 8001180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	@ (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	@ (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	@ 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	@ 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001260:	d301      	bcc.n	8001266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001262:	2301      	movs	r3, #1
 8001264:	e00f      	b.n	8001286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <SysTick_Config+0x40>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126e:	210f      	movs	r1, #15
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	f7ff ff8e 	bl	8001194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <SysTick_Config+0x40>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <SysTick_Config+0x40>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fee7 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff fefc 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff8e 	bl	80011e8 <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5d 	bl	8001194 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff feef 	bl	80010d4 <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff feff 	bl	8001110 <__NVIC_DisableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff94 	bl	8001250 <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff09 	bl	8001158 <__NVIC_ClearPendingIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e177      	b.n	800165c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800136c:	2201      	movs	r2, #1
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	429a      	cmp	r2, r3
 8001386:	f040 8166 	bne.w	8001656 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d005      	beq.n	80013a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d130      	bne.n	8001404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68da      	ldr	r2, [r3, #12]
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d8:	2201      	movs	r2, #1
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 0201 	and.w	r2, r3, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0303 	and.w	r3, r3, #3
 800140c:	2b03      	cmp	r3, #3
 800140e:	d017      	beq.n	8001440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d123      	bne.n	8001494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	220f      	movs	r2, #15
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	08da      	lsrs	r2, r3, #3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3208      	adds	r2, #8
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80c0 	beq.w	8001656 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <HAL_GPIO_Init+0x324>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	4a65      	ldr	r2, [pc, #404]	@ (8001674 <HAL_GPIO_Init+0x324>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e6:	4b63      	ldr	r3, [pc, #396]	@ (8001674 <HAL_GPIO_Init+0x324>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014f2:	4a61      	ldr	r2, [pc, #388]	@ (8001678 <HAL_GPIO_Init+0x328>)
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	3302      	adds	r3, #2
 80014fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	220f      	movs	r2, #15
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a58      	ldr	r2, [pc, #352]	@ (800167c <HAL_GPIO_Init+0x32c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d037      	beq.n	800158e <HAL_GPIO_Init+0x23e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a57      	ldr	r2, [pc, #348]	@ (8001680 <HAL_GPIO_Init+0x330>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d031      	beq.n	800158a <HAL_GPIO_Init+0x23a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a56      	ldr	r2, [pc, #344]	@ (8001684 <HAL_GPIO_Init+0x334>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d02b      	beq.n	8001586 <HAL_GPIO_Init+0x236>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a55      	ldr	r2, [pc, #340]	@ (8001688 <HAL_GPIO_Init+0x338>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_Init+0x232>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a54      	ldr	r2, [pc, #336]	@ (800168c <HAL_GPIO_Init+0x33c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_Init+0x22e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a53      	ldr	r2, [pc, #332]	@ (8001690 <HAL_GPIO_Init+0x340>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_Init+0x22a>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a52      	ldr	r2, [pc, #328]	@ (8001694 <HAL_GPIO_Init+0x344>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0x226>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a51      	ldr	r2, [pc, #324]	@ (8001698 <HAL_GPIO_Init+0x348>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_Init+0x222>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a50      	ldr	r2, [pc, #320]	@ (800169c <HAL_GPIO_Init+0x34c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_Init+0x21e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4f      	ldr	r2, [pc, #316]	@ (80016a0 <HAL_GPIO_Init+0x350>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_Init+0x21a>
 8001566:	2309      	movs	r3, #9
 8001568:	e012      	b.n	8001590 <HAL_GPIO_Init+0x240>
 800156a:	230a      	movs	r3, #10
 800156c:	e010      	b.n	8001590 <HAL_GPIO_Init+0x240>
 800156e:	2308      	movs	r3, #8
 8001570:	e00e      	b.n	8001590 <HAL_GPIO_Init+0x240>
 8001572:	2307      	movs	r3, #7
 8001574:	e00c      	b.n	8001590 <HAL_GPIO_Init+0x240>
 8001576:	2306      	movs	r3, #6
 8001578:	e00a      	b.n	8001590 <HAL_GPIO_Init+0x240>
 800157a:	2305      	movs	r3, #5
 800157c:	e008      	b.n	8001590 <HAL_GPIO_Init+0x240>
 800157e:	2304      	movs	r3, #4
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x240>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_Init+0x240>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_Init+0x240>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_Init+0x240>
 800158e:	2300      	movs	r3, #0
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	4093      	lsls	r3, r2
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a0:	4935      	ldr	r1, [pc, #212]	@ (8001678 <HAL_GPIO_Init+0x328>)
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ae:	4b3d      	ldr	r3, [pc, #244]	@ (80016a4 <HAL_GPIO_Init+0x354>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015d2:	4a34      	ldr	r2, [pc, #208]	@ (80016a4 <HAL_GPIO_Init+0x354>)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d8:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <HAL_GPIO_Init+0x354>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015fc:	4a29      	ldr	r2, [pc, #164]	@ (80016a4 <HAL_GPIO_Init+0x354>)
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001602:	4b28      	ldr	r3, [pc, #160]	@ (80016a4 <HAL_GPIO_Init+0x354>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001626:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <HAL_GPIO_Init+0x354>)
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <HAL_GPIO_Init+0x354>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001650:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <HAL_GPIO_Init+0x354>)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3301      	adds	r3, #1
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	2b0f      	cmp	r3, #15
 8001660:	f67f ae84 	bls.w	800136c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3724      	adds	r7, #36	@ 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40023800 	.word	0x40023800
 8001678:	40013800 	.word	0x40013800
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40021000 	.word	0x40021000
 8001690:	40021400 	.word	0x40021400
 8001694:	40021800 	.word	0x40021800
 8001698:	40021c00 	.word	0x40021c00
 800169c:	40022000 	.word	0x40022000
 80016a0:	40022400 	.word	0x40022400
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e267      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d075      	beq.n	8001816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800172a:	4b88      	ldr	r3, [pc, #544]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d00c      	beq.n	8001750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b85      	ldr	r3, [pc, #532]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800173e:	2b08      	cmp	r3, #8
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b82      	ldr	r3, [pc, #520]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800174e:	d10b      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4b7e      	ldr	r3, [pc, #504]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d157      	bne.n	8001814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e242      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x74>
 8001772:	4b76      	ldr	r3, [pc, #472]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a75      	ldr	r2, [pc, #468]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x98>
 800178a:	4b70      	ldr	r3, [pc, #448]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6f      	ldr	r2, [pc, #444]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b6d      	ldr	r3, [pc, #436]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6c      	ldr	r2, [pc, #432]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 80017a4:	4b69      	ldr	r3, [pc, #420]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a68      	ldr	r2, [pc, #416]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b66      	ldr	r3, [pc, #408]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a65      	ldr	r2, [pc, #404]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fc24 	bl	8001010 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fc20 	bl	8001010 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	@ 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e207      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xc0>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc10 	bl	8001010 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fc0c 	bl	8001010 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1f3      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b51      	ldr	r3, [pc, #324]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0xe8>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001822:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b47      	ldr	r3, [pc, #284]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b44      	ldr	r3, [pc, #272]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b41      	ldr	r3, [pc, #260]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1c7      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4937      	ldr	r1, [pc, #220]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fbc5 	bl	8001010 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fbc1 	bl	8001010 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1a8      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4925      	ldr	r1, [pc, #148]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fba4 	bl	8001010 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff fba0 	bl	8001010 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e187      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d036      	beq.n	8001964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fb84 	bl	8001010 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fb80 	bl	8001010 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e167      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x200>
 800192a:	e01b      	b.n	8001964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb6d 	bl	8001010 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e00e      	b.n	8001958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fb69 	bl	8001010 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d907      	bls.n	8001958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e150      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 800194c:	40023800 	.word	0x40023800
 8001950:	42470000 	.word	0x42470000
 8001954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b88      	ldr	r3, [pc, #544]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ea      	bne.n	800193a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8097 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b81      	ldr	r3, [pc, #516]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b7d      	ldr	r3, [pc, #500]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b7a      	ldr	r3, [pc, #488]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b77      	ldr	r3, [pc, #476]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a73      	ldr	r2, [pc, #460]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb29 	bl	8001010 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fb25 	bl	8001010 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e10c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2ea>
 80019e8:	4b64      	ldr	r3, [pc, #400]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ec:	4a63      	ldr	r2, [pc, #396]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f4:	e01c      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x30c>
 80019fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a02:	4a5e      	ldr	r2, [pc, #376]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1c:	4a57      	ldr	r2, [pc, #348]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a24:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a28:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d015      	beq.n	8001a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff faea 	bl	8001010 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff fae6 	bl	8001010 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0cb      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	4b49      	ldr	r3, [pc, #292]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ee      	beq.n	8001a40 <HAL_RCC_OscConfig+0x334>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff fad4 	bl	8001010 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fad0 	bl	8001010 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0b5      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a38      	ldr	r2, [pc, #224]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a1 	beq.w	8001bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d05c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d141      	bne.n	8001b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff faa4 	bl	8001010 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff faa0 	bl	8001010 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e087      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	491b      	ldr	r1, [pc, #108]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fa79 	bl	8001010 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff fa75 	bl	8001010 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e05c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x416>
 8001b40:	e054      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fa62 	bl	8001010 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fa5e 	bl	8001010 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e045      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x444>
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e038      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000
 8001b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ec>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d028      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d121      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d11a      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0cc      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b68      	ldr	r3, [pc, #416]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d90c      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b65      	ldr	r3, [pc, #404]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a58      	ldr	r2, [pc, #352]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d044      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e067      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4934      	ldr	r1, [pc, #208]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f990 	bl	8001010 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff f98c 	bl	8001010 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d20c      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490a      	ldr	r1, [pc, #40]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f8f0 	bl	8000f88 <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08003c64 	.word	0x08003c64
 8001dc0:	20000000 	.word	0x20000000
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b094      	sub	sp, #80	@ 0x50
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de0:	4b79      	ldr	r3, [pc, #484]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d00d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x40>
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	f200 80e1 	bhi.w	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfa:	e0db      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b73      	ldr	r3, [pc, #460]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e00:	e0db      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e02:	4b73      	ldr	r3, [pc, #460]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e06:	e0d8      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e12:	4b6d      	ldr	r3, [pc, #436]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	2200      	movs	r2, #0
 8001e26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e32:	2300      	movs	r3, #0
 8001e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	462b      	mov	r3, r5
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	f04f 0100 	mov.w	r1, #0
 8001e46:	0159      	lsls	r1, r3, #5
 8001e48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e4c:	0150      	lsls	r0, r2, #5
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4621      	mov	r1, r4
 8001e54:	1a51      	subs	r1, r2, r1
 8001e56:	6139      	str	r1, [r7, #16]
 8001e58:	4629      	mov	r1, r5
 8001e5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	f04f 0300 	mov.w	r3, #0
 8001e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e6c:	4659      	mov	r1, fp
 8001e6e:	018b      	lsls	r3, r1, #6
 8001e70:	4651      	mov	r1, sl
 8001e72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e76:	4651      	mov	r1, sl
 8001e78:	018a      	lsls	r2, r1, #6
 8001e7a:	4651      	mov	r1, sl
 8001e7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001e80:	4659      	mov	r1, fp
 8001e82:	eb63 0901 	sbc.w	r9, r3, r1
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e9a:	4690      	mov	r8, r2
 8001e9c:	4699      	mov	r9, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	eb18 0303 	adds.w	r3, r8, r3
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	eb49 0303 	adc.w	r3, r9, r3
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001eba:	4629      	mov	r1, r5
 8001ebc:	024b      	lsls	r3, r1, #9
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ec4:	4621      	mov	r1, r4
 8001ec6:	024a      	lsls	r2, r1, #9
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ed2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ed8:	f7fe f9e2 	bl	80002a0 <__aeabi_uldivmod>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ee4:	e058      	b.n	8001f98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee6:	4b38      	ldr	r3, [pc, #224]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	099b      	lsrs	r3, r3, #6
 8001eec:	2200      	movs	r2, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f00:	4642      	mov	r2, r8
 8001f02:	464b      	mov	r3, r9
 8001f04:	f04f 0000 	mov.w	r0, #0
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	0159      	lsls	r1, r3, #5
 8001f0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f12:	0150      	lsls	r0, r2, #5
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4641      	mov	r1, r8
 8001f1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f1e:	4649      	mov	r1, r9
 8001f20:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f38:	ebb2 040a 	subs.w	r4, r2, sl
 8001f3c:	eb63 050b 	sbc.w	r5, r3, fp
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	00eb      	lsls	r3, r5, #3
 8001f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f4e:	00e2      	lsls	r2, r4, #3
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	4643      	mov	r3, r8
 8001f56:	18e3      	adds	r3, r4, r3
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	464b      	mov	r3, r9
 8001f5c:	eb45 0303 	adc.w	r3, r5, r3
 8001f60:	607b      	str	r3, [r7, #4]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	028b      	lsls	r3, r1, #10
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f78:	4621      	mov	r1, r4
 8001f7a:	028a      	lsls	r2, r1, #10
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	61bb      	str	r3, [r7, #24]
 8001f86:	61fa      	str	r2, [r7, #28]
 8001f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8c:	f7fe f988 	bl	80002a0 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb2:	e002      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3750      	adds	r7, #80	@ 0x50
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	00f42400 	.word	0x00f42400
 8001fd0:	007a1200 	.word	0x007a1200

08001fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e07b      	b.n	80020de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d108      	bne.n	8002000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ff6:	d009      	beq.n	800200c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
 8001ffe:	e005      	b.n	800200c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d106      	bne.n	800202c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fea2 	bl	8000d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	431a      	orrs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002090:	ea42 0103 	orr.w	r1, r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	f003 0104 	and.w	r1, r3, #4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b2:	f003 0210 	and.w	r2, r3, #16
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	69da      	ldr	r2, [r3, #28]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b088      	sub	sp, #32
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	60f8      	str	r0, [r7, #12]
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020f6:	f7fe ff8b 	bl	8001010 <HAL_GetTick>
 80020fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d001      	beq.n	8002110 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
 800210e:	e12a      	b.n	8002366 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_SPI_Transmit+0x36>
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e122      	b.n	8002366 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_SPI_Transmit+0x48>
 800212a:	2302      	movs	r3, #2
 800212c:	e11b      	b.n	8002366 <HAL_SPI_Transmit+0x280>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2203      	movs	r2, #3
 800213a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	88fa      	ldrh	r2, [r7, #6]
 800214e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800217c:	d10f      	bne.n	800219e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800218c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800219c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d007      	beq.n	80021bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021c4:	d152      	bne.n	800226c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_SPI_Transmit+0xee>
 80021ce:	8b7b      	ldrh	r3, [r7, #26]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d145      	bne.n	8002260 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	881a      	ldrh	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	1c9a      	adds	r2, r3, #2
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021f8:	e032      	b.n	8002260 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b02      	cmp	r3, #2
 8002206:	d112      	bne.n	800222e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220c:	881a      	ldrh	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	1c9a      	adds	r2, r3, #2
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800222c:	e018      	b.n	8002260 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800222e:	f7fe feef 	bl	8001010 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d803      	bhi.n	8002246 <HAL_SPI_Transmit+0x160>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d102      	bne.n	800224c <HAL_SPI_Transmit+0x166>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e082      	b.n	8002366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1c7      	bne.n	80021fa <HAL_SPI_Transmit+0x114>
 800226a:	e053      	b.n	8002314 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_SPI_Transmit+0x194>
 8002274:	8b7b      	ldrh	r3, [r7, #26]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d147      	bne.n	800230a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	330c      	adds	r3, #12
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022a0:	e033      	b.n	800230a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d113      	bne.n	80022d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022d6:	e018      	b.n	800230a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022d8:	f7fe fe9a 	bl	8001010 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d803      	bhi.n	80022f0 <HAL_SPI_Transmit+0x20a>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d102      	bne.n	80022f6 <HAL_SPI_Transmit+0x210>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e02d      	b.n	8002366 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800230e:	b29b      	uxth	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1c6      	bne.n	80022a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	6839      	ldr	r1, [r7, #0]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 fa59 	bl	80027d0 <SPI_EndRxTxTransaction>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2220      	movs	r2, #32
 8002328:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10a      	bne.n	8002348 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002364:	2300      	movs	r3, #0
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3720      	adds	r7, #32
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b08a      	sub	sp, #40	@ 0x28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800237c:	2301      	movs	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002380:	f7fe fe46 	bl	8001010 <HAL_GetTick>
 8002384:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800238c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002398:	7ffb      	ldrb	r3, [r7, #31]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d00c      	beq.n	80023b8 <HAL_SPI_TransmitReceive+0x4a>
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023a4:	d106      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <HAL_SPI_TransmitReceive+0x46>
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d001      	beq.n	80023b8 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	e17f      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d005      	beq.n	80023ca <HAL_SPI_TransmitReceive+0x5c>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_SPI_TransmitReceive+0x5c>
 80023c4:	887b      	ldrh	r3, [r7, #2]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e174      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_SPI_TransmitReceive+0x6e>
 80023d8:	2302      	movs	r3, #2
 80023da:	e16d      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x34a>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d003      	beq.n	80023f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2205      	movs	r2, #5
 80023f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	887a      	ldrh	r2, [r7, #2]
 800240e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d007      	beq.n	800244c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002454:	d17e      	bne.n	8002554 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d002      	beq.n	8002464 <HAL_SPI_TransmitReceive+0xf6>
 800245e:	8afb      	ldrh	r3, [r7, #22]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d16c      	bne.n	800253e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	881a      	ldrh	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	1c9a      	adds	r2, r3, #2
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002488:	e059      	b.n	800253e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b02      	cmp	r3, #2
 8002496:	d11b      	bne.n	80024d0 <HAL_SPI_TransmitReceive+0x162>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d016      	beq.n	80024d0 <HAL_SPI_TransmitReceive+0x162>
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d113      	bne.n	80024d0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b8:	1c9a      	adds	r2, r3, #2
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d119      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x1a4>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d014      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f2:	b292      	uxth	r2, r2
 80024f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fa:	1c9a      	adds	r2, r3, #2
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800250e:	2301      	movs	r3, #1
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002512:	f7fe fd7d 	bl	8001010 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800251e:	429a      	cmp	r2, r3
 8002520:	d80d      	bhi.n	800253e <HAL_SPI_TransmitReceive+0x1d0>
 8002522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d009      	beq.n	800253e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0bc      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1a0      	bne.n	800248a <HAL_SPI_TransmitReceive+0x11c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d19b      	bne.n	800248a <HAL_SPI_TransmitReceive+0x11c>
 8002552:	e082      	b.n	800265a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_SPI_TransmitReceive+0x1f4>
 800255c:	8afb      	ldrh	r3, [r7, #22]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d171      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	330c      	adds	r3, #12
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002588:	e05d      	b.n	8002646 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d11c      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x264>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d017      	beq.n	80025d2 <HAL_SPI_TransmitReceive+0x264>
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d114      	bne.n	80025d2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	1c5a      	adds	r2, r3, #1
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d119      	bne.n	8002614 <HAL_SPI_TransmitReceive+0x2a6>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d014      	beq.n	8002614 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002610:	2301      	movs	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002614:	f7fe fcfc 	bl	8001010 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002620:	429a      	cmp	r2, r3
 8002622:	d803      	bhi.n	800262c <HAL_SPI_TransmitReceive+0x2be>
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d102      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x2c4>
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e038      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d19c      	bne.n	800258a <HAL_SPI_TransmitReceive+0x21c>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d197      	bne.n	800258a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800265a:	6a3a      	ldr	r2, [r7, #32]
 800265c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f8b6 	bl	80027d0 <SPI_EndRxTxTransaction>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2220      	movs	r2, #32
 800266e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01d      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80026b6:	2300      	movs	r3, #0
  }
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3728      	adds	r7, #40	@ 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	603b      	str	r3, [r7, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026d0:	f7fe fc9e 	bl	8001010 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026e0:	f7fe fc96 	bl	8001010 <HAL_GetTick>
 80026e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026e6:	4b39      	ldr	r3, [pc, #228]	@ (80027cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	015b      	lsls	r3, r3, #5
 80026ec:	0d1b      	lsrs	r3, r3, #20
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026f6:	e054      	b.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fe:	d050      	beq.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002700:	f7fe fc86 	bl	8001010 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	429a      	cmp	r2, r3
 800270e:	d902      	bls.n	8002716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d13d      	bne.n	8002792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800272e:	d111      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002738:	d004      	beq.n	8002744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002742:	d107      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800275c:	d10f      	bne.n	800277e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800277c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e017      	b.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3b01      	subs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d19b      	bne.n	80026f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000000 	.word	0x20000000

080027d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2201      	movs	r2, #1
 80027e4:	2102      	movs	r1, #2
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff ff6a 	bl	80026c0 <SPI_WaitFlagStateUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e032      	b.n	8002868 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002802:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <SPI_EndRxTxTransaction+0xa0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1b      	ldr	r2, [pc, #108]	@ (8002874 <SPI_EndRxTxTransaction+0xa4>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	0d5b      	lsrs	r3, r3, #21
 800280e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002820:	d112      	bne.n	8002848 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	@ 0x80
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ff47 	bl	80026c0 <SPI_WaitFlagStateUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d016      	beq.n	8002866 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283c:	f043 0220 	orr.w	r2, r3, #32
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e00f      	b.n	8002868 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	3b01      	subs	r3, #1
 8002852:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b80      	cmp	r3, #128	@ 0x80
 8002860:	d0f2      	beq.n	8002848 <SPI_EndRxTxTransaction+0x78>
 8002862:	e000      	b.n	8002866 <SPI_EndRxTxTransaction+0x96>
        break;
 8002864:	bf00      	nop
  }

  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000000 	.word	0x20000000
 8002874:	165e9f81 	.word	0x165e9f81

08002878 <findslot>:
 8002878:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <findslot+0x2c>)
 800287a:	b510      	push	{r4, lr}
 800287c:	4604      	mov	r4, r0
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	b118      	cbz	r0, 800288a <findslot+0x12>
 8002882:	6a03      	ldr	r3, [r0, #32]
 8002884:	b90b      	cbnz	r3, 800288a <findslot+0x12>
 8002886:	f000 fb19 	bl	8002ebc <__sinit>
 800288a:	2c13      	cmp	r4, #19
 800288c:	d807      	bhi.n	800289e <findslot+0x26>
 800288e:	4806      	ldr	r0, [pc, #24]	@ (80028a8 <findslot+0x30>)
 8002890:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002894:	3201      	adds	r2, #1
 8002896:	d002      	beq.n	800289e <findslot+0x26>
 8002898:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800289c:	bd10      	pop	{r4, pc}
 800289e:	2000      	movs	r0, #0
 80028a0:	e7fc      	b.n	800289c <findslot+0x24>
 80028a2:	bf00      	nop
 80028a4:	20000020 	.word	0x20000020
 80028a8:	2000013c 	.word	0x2000013c

080028ac <error>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	4604      	mov	r4, r0
 80028b0:	f000 fbde 	bl	8003070 <__errno>
 80028b4:	2613      	movs	r6, #19
 80028b6:	4605      	mov	r5, r0
 80028b8:	2700      	movs	r7, #0
 80028ba:	4630      	mov	r0, r6
 80028bc:	4639      	mov	r1, r7
 80028be:	beab      	bkpt	0x00ab
 80028c0:	4606      	mov	r6, r0
 80028c2:	602e      	str	r6, [r5, #0]
 80028c4:	4620      	mov	r0, r4
 80028c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080028c8 <checkerror>:
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d101      	bne.n	80028d0 <checkerror+0x8>
 80028cc:	f7ff bfee 	b.w	80028ac <error>
 80028d0:	4770      	bx	lr

080028d2 <_swiread>:
 80028d2:	b530      	push	{r4, r5, lr}
 80028d4:	b085      	sub	sp, #20
 80028d6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80028da:	9203      	str	r2, [sp, #12]
 80028dc:	2406      	movs	r4, #6
 80028de:	ad01      	add	r5, sp, #4
 80028e0:	4620      	mov	r0, r4
 80028e2:	4629      	mov	r1, r5
 80028e4:	beab      	bkpt	0x00ab
 80028e6:	4604      	mov	r4, r0
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff ffed 	bl	80028c8 <checkerror>
 80028ee:	b005      	add	sp, #20
 80028f0:	bd30      	pop	{r4, r5, pc}

080028f2 <_read>:
 80028f2:	b570      	push	{r4, r5, r6, lr}
 80028f4:	460e      	mov	r6, r1
 80028f6:	4614      	mov	r4, r2
 80028f8:	f7ff ffbe 	bl	8002878 <findslot>
 80028fc:	4605      	mov	r5, r0
 80028fe:	b930      	cbnz	r0, 800290e <_read+0x1c>
 8002900:	f000 fbb6 	bl	8003070 <__errno>
 8002904:	2309      	movs	r3, #9
 8002906:	6003      	str	r3, [r0, #0]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	bd70      	pop	{r4, r5, r6, pc}
 800290e:	6800      	ldr	r0, [r0, #0]
 8002910:	4622      	mov	r2, r4
 8002912:	4631      	mov	r1, r6
 8002914:	f7ff ffdd 	bl	80028d2 <_swiread>
 8002918:	1c43      	adds	r3, r0, #1
 800291a:	d0f5      	beq.n	8002908 <_read+0x16>
 800291c:	686b      	ldr	r3, [r5, #4]
 800291e:	1a20      	subs	r0, r4, r0
 8002920:	4403      	add	r3, r0
 8002922:	606b      	str	r3, [r5, #4]
 8002924:	e7f2      	b.n	800290c <_read+0x1a>

08002926 <_swilseek>:
 8002926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002928:	460c      	mov	r4, r1
 800292a:	4616      	mov	r6, r2
 800292c:	f7ff ffa4 	bl	8002878 <findslot>
 8002930:	4605      	mov	r5, r0
 8002932:	b940      	cbnz	r0, 8002946 <_swilseek+0x20>
 8002934:	f000 fb9c 	bl	8003070 <__errno>
 8002938:	2309      	movs	r3, #9
 800293a:	6003      	str	r3, [r0, #0]
 800293c:	f04f 34ff 	mov.w	r4, #4294967295
 8002940:	4620      	mov	r0, r4
 8002942:	b003      	add	sp, #12
 8002944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002946:	2e02      	cmp	r6, #2
 8002948:	d903      	bls.n	8002952 <_swilseek+0x2c>
 800294a:	f000 fb91 	bl	8003070 <__errno>
 800294e:	2316      	movs	r3, #22
 8002950:	e7f3      	b.n	800293a <_swilseek+0x14>
 8002952:	2e01      	cmp	r6, #1
 8002954:	d112      	bne.n	800297c <_swilseek+0x56>
 8002956:	6843      	ldr	r3, [r0, #4]
 8002958:	18e4      	adds	r4, r4, r3
 800295a:	d4f6      	bmi.n	800294a <_swilseek+0x24>
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	260a      	movs	r6, #10
 8002960:	e9cd 3400 	strd	r3, r4, [sp]
 8002964:	466f      	mov	r7, sp
 8002966:	4630      	mov	r0, r6
 8002968:	4639      	mov	r1, r7
 800296a:	beab      	bkpt	0x00ab
 800296c:	4606      	mov	r6, r0
 800296e:	4630      	mov	r0, r6
 8002970:	f7ff ffaa 	bl	80028c8 <checkerror>
 8002974:	2800      	cmp	r0, #0
 8002976:	dbe1      	blt.n	800293c <_swilseek+0x16>
 8002978:	606c      	str	r4, [r5, #4]
 800297a:	e7e1      	b.n	8002940 <_swilseek+0x1a>
 800297c:	2e02      	cmp	r6, #2
 800297e:	6803      	ldr	r3, [r0, #0]
 8002980:	d1ec      	bne.n	800295c <_swilseek+0x36>
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	260c      	movs	r6, #12
 8002986:	466f      	mov	r7, sp
 8002988:	4630      	mov	r0, r6
 800298a:	4639      	mov	r1, r7
 800298c:	beab      	bkpt	0x00ab
 800298e:	4606      	mov	r6, r0
 8002990:	4630      	mov	r0, r6
 8002992:	f7ff ff99 	bl	80028c8 <checkerror>
 8002996:	1c43      	adds	r3, r0, #1
 8002998:	d0d0      	beq.n	800293c <_swilseek+0x16>
 800299a:	4404      	add	r4, r0
 800299c:	e7de      	b.n	800295c <_swilseek+0x36>

0800299e <_lseek>:
 800299e:	f7ff bfc2 	b.w	8002926 <_swilseek>

080029a2 <_swiwrite>:
 80029a2:	b530      	push	{r4, r5, lr}
 80029a4:	b085      	sub	sp, #20
 80029a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80029aa:	9203      	str	r2, [sp, #12]
 80029ac:	2405      	movs	r4, #5
 80029ae:	ad01      	add	r5, sp, #4
 80029b0:	4620      	mov	r0, r4
 80029b2:	4629      	mov	r1, r5
 80029b4:	beab      	bkpt	0x00ab
 80029b6:	4604      	mov	r4, r0
 80029b8:	4620      	mov	r0, r4
 80029ba:	f7ff ff85 	bl	80028c8 <checkerror>
 80029be:	b005      	add	sp, #20
 80029c0:	bd30      	pop	{r4, r5, pc}

080029c2 <_write>:
 80029c2:	b570      	push	{r4, r5, r6, lr}
 80029c4:	460e      	mov	r6, r1
 80029c6:	4615      	mov	r5, r2
 80029c8:	f7ff ff56 	bl	8002878 <findslot>
 80029cc:	4604      	mov	r4, r0
 80029ce:	b930      	cbnz	r0, 80029de <_write+0x1c>
 80029d0:	f000 fb4e 	bl	8003070 <__errno>
 80029d4:	2309      	movs	r3, #9
 80029d6:	6003      	str	r3, [r0, #0]
 80029d8:	f04f 30ff 	mov.w	r0, #4294967295
 80029dc:	bd70      	pop	{r4, r5, r6, pc}
 80029de:	6800      	ldr	r0, [r0, #0]
 80029e0:	462a      	mov	r2, r5
 80029e2:	4631      	mov	r1, r6
 80029e4:	f7ff ffdd 	bl	80029a2 <_swiwrite>
 80029e8:	1e03      	subs	r3, r0, #0
 80029ea:	dbf5      	blt.n	80029d8 <_write+0x16>
 80029ec:	6862      	ldr	r2, [r4, #4]
 80029ee:	1ae8      	subs	r0, r5, r3
 80029f0:	4402      	add	r2, r0
 80029f2:	42ab      	cmp	r3, r5
 80029f4:	6062      	str	r2, [r4, #4]
 80029f6:	d1f1      	bne.n	80029dc <_write+0x1a>
 80029f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff bf55 	b.w	80028ac <error>

08002a02 <_swiclose>:
 8002a02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a04:	2402      	movs	r4, #2
 8002a06:	9001      	str	r0, [sp, #4]
 8002a08:	ad01      	add	r5, sp, #4
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	beab      	bkpt	0x00ab
 8002a10:	4604      	mov	r4, r0
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff ff58 	bl	80028c8 <checkerror>
 8002a18:	b003      	add	sp, #12
 8002a1a:	bd30      	pop	{r4, r5, pc}

08002a1c <_close>:
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4605      	mov	r5, r0
 8002a20:	f7ff ff2a 	bl	8002878 <findslot>
 8002a24:	4604      	mov	r4, r0
 8002a26:	b930      	cbnz	r0, 8002a36 <_close+0x1a>
 8002a28:	f000 fb22 	bl	8003070 <__errno>
 8002a2c:	2309      	movs	r3, #9
 8002a2e:	6003      	str	r3, [r0, #0]
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	bd38      	pop	{r3, r4, r5, pc}
 8002a36:	3d01      	subs	r5, #1
 8002a38:	2d01      	cmp	r5, #1
 8002a3a:	d809      	bhi.n	8002a50 <_close+0x34>
 8002a3c:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <_close+0x40>)
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d104      	bne.n	8002a50 <_close+0x34>
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	6023      	str	r3, [r4, #0]
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e7f1      	b.n	8002a34 <_close+0x18>
 8002a50:	6820      	ldr	r0, [r4, #0]
 8002a52:	f7ff ffd6 	bl	8002a02 <_swiclose>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d0f5      	beq.n	8002a46 <_close+0x2a>
 8002a5a:	e7eb      	b.n	8002a34 <_close+0x18>
 8002a5c:	2000013c 	.word	0x2000013c

08002a60 <_swistat>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	460c      	mov	r4, r1
 8002a64:	f7ff ff08 	bl	8002878 <findslot>
 8002a68:	4605      	mov	r5, r0
 8002a6a:	b930      	cbnz	r0, 8002a7a <_swistat+0x1a>
 8002a6c:	f000 fb00 	bl	8003070 <__errno>
 8002a70:	2309      	movs	r3, #9
 8002a72:	6003      	str	r3, [r0, #0]
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
 8002a7a:	6863      	ldr	r3, [r4, #4]
 8002a7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a80:	6063      	str	r3, [r4, #4]
 8002a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a86:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002a88:	260c      	movs	r6, #12
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	beab      	bkpt	0x00ab
 8002a90:	4605      	mov	r5, r0
 8002a92:	4628      	mov	r0, r5
 8002a94:	f7ff ff18 	bl	80028c8 <checkerror>
 8002a98:	1c43      	adds	r3, r0, #1
 8002a9a:	d0eb      	beq.n	8002a74 <_swistat+0x14>
 8002a9c:	6120      	str	r0, [r4, #16]
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	e7ea      	b.n	8002a78 <_swistat+0x18>

08002aa2 <_fstat>:
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	b510      	push	{r4, lr}
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	2258      	movs	r2, #88	@ 0x58
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fa90 	bl	8002fd2 <memset>
 8002ab2:	4601      	mov	r1, r0
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aba:	f7ff bfd1 	b.w	8002a60 <_swistat>

08002abe <_stat>:
 8002abe:	b538      	push	{r3, r4, r5, lr}
 8002ac0:	460d      	mov	r5, r1
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	2258      	movs	r2, #88	@ 0x58
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	4628      	mov	r0, r5
 8002aca:	f000 fa82 	bl	8002fd2 <memset>
 8002ace:	4620      	mov	r0, r4
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f000 f811 	bl	8002af8 <_swiopen>
 8002ad6:	1c43      	adds	r3, r0, #1
 8002ad8:	4604      	mov	r4, r0
 8002ada:	d00b      	beq.n	8002af4 <_stat+0x36>
 8002adc:	686b      	ldr	r3, [r5, #4]
 8002ade:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002ae2:	606b      	str	r3, [r5, #4]
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	f7ff ffbb 	bl	8002a60 <_swistat>
 8002aea:	4605      	mov	r5, r0
 8002aec:	4620      	mov	r0, r4
 8002aee:	f7ff ff95 	bl	8002a1c <_close>
 8002af2:	462c      	mov	r4, r5
 8002af4:	4620      	mov	r0, r4
 8002af6:	bd38      	pop	{r3, r4, r5, pc}

08002af8 <_swiopen>:
 8002af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002afc:	4f29      	ldr	r7, [pc, #164]	@ (8002ba4 <_swiopen+0xac>)
 8002afe:	b096      	sub	sp, #88	@ 0x58
 8002b00:	4682      	mov	sl, r0
 8002b02:	460e      	mov	r6, r1
 8002b04:	2400      	movs	r4, #0
 8002b06:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002b10:	d00c      	beq.n	8002b2c <_swiopen+0x34>
 8002b12:	3401      	adds	r4, #1
 8002b14:	2c14      	cmp	r4, #20
 8002b16:	d1f6      	bne.n	8002b06 <_swiopen+0xe>
 8002b18:	f000 faaa 	bl	8003070 <__errno>
 8002b1c:	2318      	movs	r3, #24
 8002b1e:	6003      	str	r3, [r0, #0]
 8002b20:	f04f 34ff 	mov.w	r4, #4294967295
 8002b24:	4620      	mov	r0, r4
 8002b26:	b016      	add	sp, #88	@ 0x58
 8002b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b2c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002b30:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002b34:	46e9      	mov	r9, sp
 8002b36:	d109      	bne.n	8002b4c <_swiopen+0x54>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	4650      	mov	r0, sl
 8002b3c:	f7ff ffbf 	bl	8002abe <_stat>
 8002b40:	3001      	adds	r0, #1
 8002b42:	d003      	beq.n	8002b4c <_swiopen+0x54>
 8002b44:	f000 fa94 	bl	8003070 <__errno>
 8002b48:	2311      	movs	r3, #17
 8002b4a:	e7e8      	b.n	8002b1e <_swiopen+0x26>
 8002b4c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002b50:	f240 6301 	movw	r3, #1537	@ 0x601
 8002b54:	07b2      	lsls	r2, r6, #30
 8002b56:	bf48      	it	mi
 8002b58:	f045 0502 	orrmi.w	r5, r5, #2
 8002b5c:	421e      	tst	r6, r3
 8002b5e:	bf18      	it	ne
 8002b60:	f045 0504 	orrne.w	r5, r5, #4
 8002b64:	0733      	lsls	r3, r6, #28
 8002b66:	bf48      	it	mi
 8002b68:	f025 0504 	bicmi.w	r5, r5, #4
 8002b6c:	4650      	mov	r0, sl
 8002b6e:	bf48      	it	mi
 8002b70:	f045 0508 	orrmi.w	r5, r5, #8
 8002b74:	f8cd a000 	str.w	sl, [sp]
 8002b78:	f7fd fb3a 	bl	80001f0 <strlen>
 8002b7c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002b80:	2501      	movs	r5, #1
 8002b82:	4628      	mov	r0, r5
 8002b84:	4649      	mov	r1, r9
 8002b86:	beab      	bkpt	0x00ab
 8002b88:	4605      	mov	r5, r0
 8002b8a:	2d00      	cmp	r5, #0
 8002b8c:	db05      	blt.n	8002b9a <_swiopen+0xa2>
 8002b8e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002b92:	4447      	add	r7, r8
 8002b94:	2300      	movs	r3, #0
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	e7c4      	b.n	8002b24 <_swiopen+0x2c>
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f7ff fe86 	bl	80028ac <error>
 8002ba0:	4604      	mov	r4, r0
 8002ba2:	e7bf      	b.n	8002b24 <_swiopen+0x2c>
 8002ba4:	2000013c 	.word	0x2000013c

08002ba8 <_get_semihosting_exts>:
 8002ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bac:	4606      	mov	r6, r0
 8002bae:	460f      	mov	r7, r1
 8002bb0:	4829      	ldr	r0, [pc, #164]	@ (8002c58 <_get_semihosting_exts+0xb0>)
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4615      	mov	r5, r2
 8002bb6:	f7ff ff9f 	bl	8002af8 <_swiopen>
 8002bba:	462a      	mov	r2, r5
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	f000 fa06 	bl	8002fd2 <memset>
 8002bc6:	1c63      	adds	r3, r4, #1
 8002bc8:	d014      	beq.n	8002bf4 <_get_semihosting_exts+0x4c>
 8002bca:	4620      	mov	r0, r4
 8002bcc:	f7ff fe54 	bl	8002878 <findslot>
 8002bd0:	f04f 080c 	mov.w	r8, #12
 8002bd4:	4681      	mov	r9, r0
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	4649      	mov	r1, r9
 8002bda:	beab      	bkpt	0x00ab
 8002bdc:	4680      	mov	r8, r0
 8002bde:	4640      	mov	r0, r8
 8002be0:	f7ff fe72 	bl	80028c8 <checkerror>
 8002be4:	2803      	cmp	r0, #3
 8002be6:	dd02      	ble.n	8002bee <_get_semihosting_exts+0x46>
 8002be8:	1ec3      	subs	r3, r0, #3
 8002bea:	42ab      	cmp	r3, r5
 8002bec:	dc07      	bgt.n	8002bfe <_get_semihosting_exts+0x56>
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f7ff ff14 	bl	8002a1c <_close>
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	b003      	add	sp, #12
 8002bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bfe:	2204      	movs	r2, #4
 8002c00:	eb0d 0102 	add.w	r1, sp, r2
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fe74 	bl	80028f2 <_read>
 8002c0a:	2803      	cmp	r0, #3
 8002c0c:	ddef      	ble.n	8002bee <_get_semihosting_exts+0x46>
 8002c0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c12:	2b53      	cmp	r3, #83	@ 0x53
 8002c14:	d1eb      	bne.n	8002bee <_get_semihosting_exts+0x46>
 8002c16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c1a:	2b48      	cmp	r3, #72	@ 0x48
 8002c1c:	d1e7      	bne.n	8002bee <_get_semihosting_exts+0x46>
 8002c1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002c22:	2b46      	cmp	r3, #70	@ 0x46
 8002c24:	d1e3      	bne.n	8002bee <_get_semihosting_exts+0x46>
 8002c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c2a:	2b42      	cmp	r3, #66	@ 0x42
 8002c2c:	d1df      	bne.n	8002bee <_get_semihosting_exts+0x46>
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4639      	mov	r1, r7
 8002c32:	4620      	mov	r0, r4
 8002c34:	f7ff fe77 	bl	8002926 <_swilseek>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	dbd8      	blt.n	8002bee <_get_semihosting_exts+0x46>
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	4631      	mov	r1, r6
 8002c40:	4620      	mov	r0, r4
 8002c42:	f7ff fe56 	bl	80028f2 <_read>
 8002c46:	4605      	mov	r5, r0
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f7ff fee7 	bl	8002a1c <_close>
 8002c4e:	4628      	mov	r0, r5
 8002c50:	f7ff fe3a 	bl	80028c8 <checkerror>
 8002c54:	e7d0      	b.n	8002bf8 <_get_semihosting_exts+0x50>
 8002c56:	bf00      	nop
 8002c58:	08003c74 	.word	0x08003c74

08002c5c <initialise_semihosting_exts>:
 8002c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c5e:	4d0a      	ldr	r5, [pc, #40]	@ (8002c88 <initialise_semihosting_exts+0x2c>)
 8002c60:	4c0a      	ldr	r4, [pc, #40]	@ (8002c8c <initialise_semihosting_exts+0x30>)
 8002c62:	2100      	movs	r1, #0
 8002c64:	2201      	movs	r2, #1
 8002c66:	a801      	add	r0, sp, #4
 8002c68:	6029      	str	r1, [r5, #0]
 8002c6a:	6022      	str	r2, [r4, #0]
 8002c6c:	f7ff ff9c 	bl	8002ba8 <_get_semihosting_exts>
 8002c70:	2800      	cmp	r0, #0
 8002c72:	dd07      	ble.n	8002c84 <initialise_semihosting_exts+0x28>
 8002c74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002c78:	f003 0201 	and.w	r2, r3, #1
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	602a      	str	r2, [r5, #0]
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	b003      	add	sp, #12
 8002c86:	bd30      	pop	{r4, r5, pc}
 8002c88:	20000010 	.word	0x20000010
 8002c8c:	2000000c 	.word	0x2000000c

08002c90 <_has_ext_stdout_stderr>:
 8002c90:	b510      	push	{r4, lr}
 8002c92:	4c04      	ldr	r4, [pc, #16]	@ (8002ca4 <_has_ext_stdout_stderr+0x14>)
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	da01      	bge.n	8002c9e <_has_ext_stdout_stderr+0xe>
 8002c9a:	f7ff ffdf 	bl	8002c5c <initialise_semihosting_exts>
 8002c9e:	6820      	ldr	r0, [r4, #0]
 8002ca0:	bd10      	pop	{r4, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000000c 	.word	0x2000000c

08002ca8 <initialise_monitor_handles>:
 8002ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cac:	b085      	sub	sp, #20
 8002cae:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8002d60 <initialise_monitor_handles+0xb8>
 8002cb2:	f8cd 9004 	str.w	r9, [sp, #4]
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	2400      	movs	r4, #0
 8002cba:	9303      	str	r3, [sp, #12]
 8002cbc:	af01      	add	r7, sp, #4
 8002cbe:	9402      	str	r4, [sp, #8]
 8002cc0:	2501      	movs	r5, #1
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	4639      	mov	r1, r7
 8002cc6:	beab      	bkpt	0x00ab
 8002cc8:	4605      	mov	r5, r0
 8002cca:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002d64 <initialise_monitor_handles+0xbc>
 8002cce:	4623      	mov	r3, r4
 8002cd0:	4c20      	ldr	r4, [pc, #128]	@ (8002d54 <initialise_monitor_handles+0xac>)
 8002cd2:	f8c8 5000 	str.w	r5, [r8]
 8002cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cda:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	2b14      	cmp	r3, #20
 8002ce2:	d1fa      	bne.n	8002cda <initialise_monitor_handles+0x32>
 8002ce4:	f7ff ffd4 	bl	8002c90 <_has_ext_stdout_stderr>
 8002ce8:	4d1b      	ldr	r5, [pc, #108]	@ (8002d58 <initialise_monitor_handles+0xb0>)
 8002cea:	b1d0      	cbz	r0, 8002d22 <initialise_monitor_handles+0x7a>
 8002cec:	f04f 0a03 	mov.w	sl, #3
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	f8cd 9004 	str.w	r9, [sp, #4]
 8002cf6:	2601      	movs	r6, #1
 8002cf8:	f8cd a00c 	str.w	sl, [sp, #12]
 8002cfc:	9302      	str	r3, [sp, #8]
 8002cfe:	4630      	mov	r0, r6
 8002d00:	4639      	mov	r1, r7
 8002d02:	beab      	bkpt	0x00ab
 8002d04:	4683      	mov	fp, r0
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <initialise_monitor_handles+0xb4>)
 8002d08:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d0c:	f8c3 b000 	str.w	fp, [r3]
 8002d10:	2308      	movs	r3, #8
 8002d12:	f8cd a00c 	str.w	sl, [sp, #12]
 8002d16:	9302      	str	r3, [sp, #8]
 8002d18:	4630      	mov	r0, r6
 8002d1a:	4639      	mov	r1, r7
 8002d1c:	beab      	bkpt	0x00ab
 8002d1e:	4606      	mov	r6, r0
 8002d20:	602e      	str	r6, [r5, #0]
 8002d22:	682b      	ldr	r3, [r5, #0]
 8002d24:	3301      	adds	r3, #1
 8002d26:	bf02      	ittt	eq
 8002d28:	4b0c      	ldreq	r3, [pc, #48]	@ (8002d5c <initialise_monitor_handles+0xb4>)
 8002d2a:	681b      	ldreq	r3, [r3, #0]
 8002d2c:	602b      	streq	r3, [r5, #0]
 8002d2e:	2600      	movs	r6, #0
 8002d30:	f8d8 3000 	ldr.w	r3, [r8]
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	6066      	str	r6, [r4, #4]
 8002d38:	f7ff ffaa 	bl	8002c90 <_has_ext_stdout_stderr>
 8002d3c:	b130      	cbz	r0, 8002d4c <initialise_monitor_handles+0xa4>
 8002d3e:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <initialise_monitor_handles+0xb4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002d46:	682b      	ldr	r3, [r5, #0]
 8002d48:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002d4c:	b005      	add	sp, #20
 8002d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d52:	bf00      	nop
 8002d54:	2000013c 	.word	0x2000013c
 8002d58:	20000130 	.word	0x20000130
 8002d5c:	20000134 	.word	0x20000134
 8002d60:	08003c8a 	.word	0x08003c8a
 8002d64:	20000138 	.word	0x20000138

08002d68 <_isatty>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	f7ff fd85 	bl	8002878 <findslot>
 8002d6e:	2409      	movs	r4, #9
 8002d70:	4605      	mov	r5, r0
 8002d72:	b920      	cbnz	r0, 8002d7e <_isatty+0x16>
 8002d74:	f000 f97c 	bl	8003070 <__errno>
 8002d78:	6004      	str	r4, [r0, #0]
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	beab      	bkpt	0x00ab
 8002d84:	4604      	mov	r4, r0
 8002d86:	2c01      	cmp	r4, #1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	d0f7      	beq.n	8002d7c <_isatty+0x14>
 8002d8c:	f000 f970 	bl	8003070 <__errno>
 8002d90:	2513      	movs	r5, #19
 8002d92:	4604      	mov	r4, r0
 8002d94:	2600      	movs	r6, #0
 8002d96:	4628      	mov	r0, r5
 8002d98:	4631      	mov	r1, r6
 8002d9a:	beab      	bkpt	0x00ab
 8002d9c:	4605      	mov	r5, r0
 8002d9e:	6025      	str	r5, [r4, #0]
 8002da0:	e7eb      	b.n	8002d7a <_isatty+0x12>
	...

08002da4 <std>:
 8002da4:	2300      	movs	r3, #0
 8002da6:	b510      	push	{r4, lr}
 8002da8:	4604      	mov	r4, r0
 8002daa:	e9c0 3300 	strd	r3, r3, [r0]
 8002dae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002db2:	6083      	str	r3, [r0, #8]
 8002db4:	8181      	strh	r1, [r0, #12]
 8002db6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002db8:	81c2      	strh	r2, [r0, #14]
 8002dba:	6183      	str	r3, [r0, #24]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	305c      	adds	r0, #92	@ 0x5c
 8002dc2:	f000 f906 	bl	8002fd2 <memset>
 8002dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dfc <std+0x58>)
 8002dc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8002dca:	4b0d      	ldr	r3, [pc, #52]	@ (8002e00 <std+0x5c>)
 8002dcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <std+0x60>)
 8002dd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <std+0x64>)
 8002dd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <std+0x68>)
 8002dd8:	6224      	str	r4, [r4, #32]
 8002dda:	429c      	cmp	r4, r3
 8002ddc:	d006      	beq.n	8002dec <std+0x48>
 8002dde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002de2:	4294      	cmp	r4, r2
 8002de4:	d002      	beq.n	8002dec <std+0x48>
 8002de6:	33d0      	adds	r3, #208	@ 0xd0
 8002de8:	429c      	cmp	r4, r3
 8002dea:	d105      	bne.n	8002df8 <std+0x54>
 8002dec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df4:	f000 b966 	b.w	80030c4 <__retarget_lock_init_recursive>
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	bf00      	nop
 8002dfc:	08002f4d 	.word	0x08002f4d
 8002e00:	08002f6f 	.word	0x08002f6f
 8002e04:	08002fa7 	.word	0x08002fa7
 8002e08:	08002fcb 	.word	0x08002fcb
 8002e0c:	200001dc 	.word	0x200001dc

08002e10 <stdio_exit_handler>:
 8002e10:	4a02      	ldr	r2, [pc, #8]	@ (8002e1c <stdio_exit_handler+0xc>)
 8002e12:	4903      	ldr	r1, [pc, #12]	@ (8002e20 <stdio_exit_handler+0x10>)
 8002e14:	4803      	ldr	r0, [pc, #12]	@ (8002e24 <stdio_exit_handler+0x14>)
 8002e16:	f000 b869 	b.w	8002eec <_fwalk_sglue>
 8002e1a:	bf00      	nop
 8002e1c:	20000014 	.word	0x20000014
 8002e20:	08003965 	.word	0x08003965
 8002e24:	20000024 	.word	0x20000024

08002e28 <cleanup_stdio>:
 8002e28:	6841      	ldr	r1, [r0, #4]
 8002e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e5c <cleanup_stdio+0x34>)
 8002e2c:	4299      	cmp	r1, r3
 8002e2e:	b510      	push	{r4, lr}
 8002e30:	4604      	mov	r4, r0
 8002e32:	d001      	beq.n	8002e38 <cleanup_stdio+0x10>
 8002e34:	f000 fd96 	bl	8003964 <_fflush_r>
 8002e38:	68a1      	ldr	r1, [r4, #8]
 8002e3a:	4b09      	ldr	r3, [pc, #36]	@ (8002e60 <cleanup_stdio+0x38>)
 8002e3c:	4299      	cmp	r1, r3
 8002e3e:	d002      	beq.n	8002e46 <cleanup_stdio+0x1e>
 8002e40:	4620      	mov	r0, r4
 8002e42:	f000 fd8f 	bl	8003964 <_fflush_r>
 8002e46:	68e1      	ldr	r1, [r4, #12]
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <cleanup_stdio+0x3c>)
 8002e4a:	4299      	cmp	r1, r3
 8002e4c:	d004      	beq.n	8002e58 <cleanup_stdio+0x30>
 8002e4e:	4620      	mov	r0, r4
 8002e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e54:	f000 bd86 	b.w	8003964 <_fflush_r>
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	bf00      	nop
 8002e5c:	200001dc 	.word	0x200001dc
 8002e60:	20000244 	.word	0x20000244
 8002e64:	200002ac 	.word	0x200002ac

08002e68 <global_stdio_init.part.0>:
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <global_stdio_init.part.0+0x30>)
 8002e6c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e9c <global_stdio_init.part.0+0x34>)
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea0 <global_stdio_init.part.0+0x38>)
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	4620      	mov	r0, r4
 8002e74:	2200      	movs	r2, #0
 8002e76:	2104      	movs	r1, #4
 8002e78:	f7ff ff94 	bl	8002da4 <std>
 8002e7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e80:	2201      	movs	r2, #1
 8002e82:	2109      	movs	r1, #9
 8002e84:	f7ff ff8e 	bl	8002da4 <std>
 8002e88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e92:	2112      	movs	r1, #18
 8002e94:	f7ff bf86 	b.w	8002da4 <std>
 8002e98:	20000314 	.word	0x20000314
 8002e9c:	200001dc 	.word	0x200001dc
 8002ea0:	08002e11 	.word	0x08002e11

08002ea4 <__sfp_lock_acquire>:
 8002ea4:	4801      	ldr	r0, [pc, #4]	@ (8002eac <__sfp_lock_acquire+0x8>)
 8002ea6:	f000 b90e 	b.w	80030c6 <__retarget_lock_acquire_recursive>
 8002eaa:	bf00      	nop
 8002eac:	2000031d 	.word	0x2000031d

08002eb0 <__sfp_lock_release>:
 8002eb0:	4801      	ldr	r0, [pc, #4]	@ (8002eb8 <__sfp_lock_release+0x8>)
 8002eb2:	f000 b909 	b.w	80030c8 <__retarget_lock_release_recursive>
 8002eb6:	bf00      	nop
 8002eb8:	2000031d 	.word	0x2000031d

08002ebc <__sinit>:
 8002ebc:	b510      	push	{r4, lr}
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	f7ff fff0 	bl	8002ea4 <__sfp_lock_acquire>
 8002ec4:	6a23      	ldr	r3, [r4, #32]
 8002ec6:	b11b      	cbz	r3, 8002ed0 <__sinit+0x14>
 8002ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ecc:	f7ff bff0 	b.w	8002eb0 <__sfp_lock_release>
 8002ed0:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <__sinit+0x28>)
 8002ed2:	6223      	str	r3, [r4, #32]
 8002ed4:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <__sinit+0x2c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f5      	bne.n	8002ec8 <__sinit+0xc>
 8002edc:	f7ff ffc4 	bl	8002e68 <global_stdio_init.part.0>
 8002ee0:	e7f2      	b.n	8002ec8 <__sinit+0xc>
 8002ee2:	bf00      	nop
 8002ee4:	08002e29 	.word	0x08002e29
 8002ee8:	20000314 	.word	0x20000314

08002eec <_fwalk_sglue>:
 8002eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef0:	4607      	mov	r7, r0
 8002ef2:	4688      	mov	r8, r1
 8002ef4:	4614      	mov	r4, r2
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002efc:	f1b9 0901 	subs.w	r9, r9, #1
 8002f00:	d505      	bpl.n	8002f0e <_fwalk_sglue+0x22>
 8002f02:	6824      	ldr	r4, [r4, #0]
 8002f04:	2c00      	cmp	r4, #0
 8002f06:	d1f7      	bne.n	8002ef8 <_fwalk_sglue+0xc>
 8002f08:	4630      	mov	r0, r6
 8002f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f0e:	89ab      	ldrh	r3, [r5, #12]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d907      	bls.n	8002f24 <_fwalk_sglue+0x38>
 8002f14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	d003      	beq.n	8002f24 <_fwalk_sglue+0x38>
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	4638      	mov	r0, r7
 8002f20:	47c0      	blx	r8
 8002f22:	4306      	orrs	r6, r0
 8002f24:	3568      	adds	r5, #104	@ 0x68
 8002f26:	e7e9      	b.n	8002efc <_fwalk_sglue+0x10>

08002f28 <iprintf>:
 8002f28:	b40f      	push	{r0, r1, r2, r3}
 8002f2a:	b507      	push	{r0, r1, r2, lr}
 8002f2c:	4906      	ldr	r1, [pc, #24]	@ (8002f48 <iprintf+0x20>)
 8002f2e:	ab04      	add	r3, sp, #16
 8002f30:	6808      	ldr	r0, [r1, #0]
 8002f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f36:	6881      	ldr	r1, [r0, #8]
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	f000 f9e9 	bl	8003310 <_vfiprintf_r>
 8002f3e:	b003      	add	sp, #12
 8002f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f44:	b004      	add	sp, #16
 8002f46:	4770      	bx	lr
 8002f48:	20000020 	.word	0x20000020

08002f4c <__sread>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	460c      	mov	r4, r1
 8002f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f54:	f000 f868 	bl	8003028 <_read_r>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	bfab      	itete	ge
 8002f5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f5e:	89a3      	ldrhlt	r3, [r4, #12]
 8002f60:	181b      	addge	r3, r3, r0
 8002f62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f66:	bfac      	ite	ge
 8002f68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f6a:	81a3      	strhlt	r3, [r4, #12]
 8002f6c:	bd10      	pop	{r4, pc}

08002f6e <__swrite>:
 8002f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f72:	461f      	mov	r7, r3
 8002f74:	898b      	ldrh	r3, [r1, #12]
 8002f76:	05db      	lsls	r3, r3, #23
 8002f78:	4605      	mov	r5, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	4616      	mov	r6, r2
 8002f7e:	d505      	bpl.n	8002f8c <__swrite+0x1e>
 8002f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f84:	2302      	movs	r3, #2
 8002f86:	2200      	movs	r2, #0
 8002f88:	f000 f83c 	bl	8003004 <_lseek_r>
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f96:	81a3      	strh	r3, [r4, #12]
 8002f98:	4632      	mov	r2, r6
 8002f9a:	463b      	mov	r3, r7
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa2:	f000 b853 	b.w	800304c <_write_r>

08002fa6 <__sseek>:
 8002fa6:	b510      	push	{r4, lr}
 8002fa8:	460c      	mov	r4, r1
 8002faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fae:	f000 f829 	bl	8003004 <_lseek_r>
 8002fb2:	1c43      	adds	r3, r0, #1
 8002fb4:	89a3      	ldrh	r3, [r4, #12]
 8002fb6:	bf15      	itete	ne
 8002fb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002fba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fc2:	81a3      	strheq	r3, [r4, #12]
 8002fc4:	bf18      	it	ne
 8002fc6:	81a3      	strhne	r3, [r4, #12]
 8002fc8:	bd10      	pop	{r4, pc}

08002fca <__sclose>:
 8002fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fce:	f000 b809 	b.w	8002fe4 <_close_r>

08002fd2 <memset>:
 8002fd2:	4402      	add	r2, r0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d100      	bne.n	8002fdc <memset+0xa>
 8002fda:	4770      	bx	lr
 8002fdc:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe0:	e7f9      	b.n	8002fd6 <memset+0x4>
	...

08002fe4 <_close_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	4d06      	ldr	r5, [pc, #24]	@ (8003000 <_close_r+0x1c>)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	4604      	mov	r4, r0
 8002fec:	4608      	mov	r0, r1
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	f7ff fd14 	bl	8002a1c <_close>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d102      	bne.n	8002ffe <_close_r+0x1a>
 8002ff8:	682b      	ldr	r3, [r5, #0]
 8002ffa:	b103      	cbz	r3, 8002ffe <_close_r+0x1a>
 8002ffc:	6023      	str	r3, [r4, #0]
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	20000318 	.word	0x20000318

08003004 <_lseek_r>:
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	4d07      	ldr	r5, [pc, #28]	@ (8003024 <_lseek_r+0x20>)
 8003008:	4604      	mov	r4, r0
 800300a:	4608      	mov	r0, r1
 800300c:	4611      	mov	r1, r2
 800300e:	2200      	movs	r2, #0
 8003010:	602a      	str	r2, [r5, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	f7ff fcc3 	bl	800299e <_lseek>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d102      	bne.n	8003022 <_lseek_r+0x1e>
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	b103      	cbz	r3, 8003022 <_lseek_r+0x1e>
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	20000318 	.word	0x20000318

08003028 <_read_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4d07      	ldr	r5, [pc, #28]	@ (8003048 <_read_r+0x20>)
 800302c:	4604      	mov	r4, r0
 800302e:	4608      	mov	r0, r1
 8003030:	4611      	mov	r1, r2
 8003032:	2200      	movs	r2, #0
 8003034:	602a      	str	r2, [r5, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	f7ff fc5b 	bl	80028f2 <_read>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d102      	bne.n	8003046 <_read_r+0x1e>
 8003040:	682b      	ldr	r3, [r5, #0]
 8003042:	b103      	cbz	r3, 8003046 <_read_r+0x1e>
 8003044:	6023      	str	r3, [r4, #0]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	20000318 	.word	0x20000318

0800304c <_write_r>:
 800304c:	b538      	push	{r3, r4, r5, lr}
 800304e:	4d07      	ldr	r5, [pc, #28]	@ (800306c <_write_r+0x20>)
 8003050:	4604      	mov	r4, r0
 8003052:	4608      	mov	r0, r1
 8003054:	4611      	mov	r1, r2
 8003056:	2200      	movs	r2, #0
 8003058:	602a      	str	r2, [r5, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	f7ff fcb1 	bl	80029c2 <_write>
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	d102      	bne.n	800306a <_write_r+0x1e>
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	b103      	cbz	r3, 800306a <_write_r+0x1e>
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	bd38      	pop	{r3, r4, r5, pc}
 800306c:	20000318 	.word	0x20000318

08003070 <__errno>:
 8003070:	4b01      	ldr	r3, [pc, #4]	@ (8003078 <__errno+0x8>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000020 	.word	0x20000020

0800307c <__libc_init_array>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4d0d      	ldr	r5, [pc, #52]	@ (80030b4 <__libc_init_array+0x38>)
 8003080:	4c0d      	ldr	r4, [pc, #52]	@ (80030b8 <__libc_init_array+0x3c>)
 8003082:	1b64      	subs	r4, r4, r5
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	2600      	movs	r6, #0
 8003088:	42a6      	cmp	r6, r4
 800308a:	d109      	bne.n	80030a0 <__libc_init_array+0x24>
 800308c:	4d0b      	ldr	r5, [pc, #44]	@ (80030bc <__libc_init_array+0x40>)
 800308e:	4c0c      	ldr	r4, [pc, #48]	@ (80030c0 <__libc_init_array+0x44>)
 8003090:	f000 fdb8 	bl	8003c04 <_init>
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	2600      	movs	r6, #0
 800309a:	42a6      	cmp	r6, r4
 800309c:	d105      	bne.n	80030aa <__libc_init_array+0x2e>
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a4:	4798      	blx	r3
 80030a6:	3601      	adds	r6, #1
 80030a8:	e7ee      	b.n	8003088 <__libc_init_array+0xc>
 80030aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ae:	4798      	blx	r3
 80030b0:	3601      	adds	r6, #1
 80030b2:	e7f2      	b.n	800309a <__libc_init_array+0x1e>
 80030b4:	08003ccc 	.word	0x08003ccc
 80030b8:	08003ccc 	.word	0x08003ccc
 80030bc:	08003ccc 	.word	0x08003ccc
 80030c0:	08003cd0 	.word	0x08003cd0

080030c4 <__retarget_lock_init_recursive>:
 80030c4:	4770      	bx	lr

080030c6 <__retarget_lock_acquire_recursive>:
 80030c6:	4770      	bx	lr

080030c8 <__retarget_lock_release_recursive>:
 80030c8:	4770      	bx	lr
	...

080030cc <_free_r>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4605      	mov	r5, r0
 80030d0:	2900      	cmp	r1, #0
 80030d2:	d041      	beq.n	8003158 <_free_r+0x8c>
 80030d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d8:	1f0c      	subs	r4, r1, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bfb8      	it	lt
 80030de:	18e4      	addlt	r4, r4, r3
 80030e0:	f000 f8e0 	bl	80032a4 <__malloc_lock>
 80030e4:	4a1d      	ldr	r2, [pc, #116]	@ (800315c <_free_r+0x90>)
 80030e6:	6813      	ldr	r3, [r2, #0]
 80030e8:	b933      	cbnz	r3, 80030f8 <_free_r+0x2c>
 80030ea:	6063      	str	r3, [r4, #4]
 80030ec:	6014      	str	r4, [r2, #0]
 80030ee:	4628      	mov	r0, r5
 80030f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030f4:	f000 b8dc 	b.w	80032b0 <__malloc_unlock>
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	d908      	bls.n	800310e <_free_r+0x42>
 80030fc:	6820      	ldr	r0, [r4, #0]
 80030fe:	1821      	adds	r1, r4, r0
 8003100:	428b      	cmp	r3, r1
 8003102:	bf01      	itttt	eq
 8003104:	6819      	ldreq	r1, [r3, #0]
 8003106:	685b      	ldreq	r3, [r3, #4]
 8003108:	1809      	addeq	r1, r1, r0
 800310a:	6021      	streq	r1, [r4, #0]
 800310c:	e7ed      	b.n	80030ea <_free_r+0x1e>
 800310e:	461a      	mov	r2, r3
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	b10b      	cbz	r3, 8003118 <_free_r+0x4c>
 8003114:	42a3      	cmp	r3, r4
 8003116:	d9fa      	bls.n	800310e <_free_r+0x42>
 8003118:	6811      	ldr	r1, [r2, #0]
 800311a:	1850      	adds	r0, r2, r1
 800311c:	42a0      	cmp	r0, r4
 800311e:	d10b      	bne.n	8003138 <_free_r+0x6c>
 8003120:	6820      	ldr	r0, [r4, #0]
 8003122:	4401      	add	r1, r0
 8003124:	1850      	adds	r0, r2, r1
 8003126:	4283      	cmp	r3, r0
 8003128:	6011      	str	r1, [r2, #0]
 800312a:	d1e0      	bne.n	80030ee <_free_r+0x22>
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	6053      	str	r3, [r2, #4]
 8003132:	4408      	add	r0, r1
 8003134:	6010      	str	r0, [r2, #0]
 8003136:	e7da      	b.n	80030ee <_free_r+0x22>
 8003138:	d902      	bls.n	8003140 <_free_r+0x74>
 800313a:	230c      	movs	r3, #12
 800313c:	602b      	str	r3, [r5, #0]
 800313e:	e7d6      	b.n	80030ee <_free_r+0x22>
 8003140:	6820      	ldr	r0, [r4, #0]
 8003142:	1821      	adds	r1, r4, r0
 8003144:	428b      	cmp	r3, r1
 8003146:	bf04      	itt	eq
 8003148:	6819      	ldreq	r1, [r3, #0]
 800314a:	685b      	ldreq	r3, [r3, #4]
 800314c:	6063      	str	r3, [r4, #4]
 800314e:	bf04      	itt	eq
 8003150:	1809      	addeq	r1, r1, r0
 8003152:	6021      	streq	r1, [r4, #0]
 8003154:	6054      	str	r4, [r2, #4]
 8003156:	e7ca      	b.n	80030ee <_free_r+0x22>
 8003158:	bd38      	pop	{r3, r4, r5, pc}
 800315a:	bf00      	nop
 800315c:	20000324 	.word	0x20000324

08003160 <sbrk_aligned>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	4e0f      	ldr	r6, [pc, #60]	@ (80031a0 <sbrk_aligned+0x40>)
 8003164:	460c      	mov	r4, r1
 8003166:	6831      	ldr	r1, [r6, #0]
 8003168:	4605      	mov	r5, r0
 800316a:	b911      	cbnz	r1, 8003172 <sbrk_aligned+0x12>
 800316c:	f000 fcb6 	bl	8003adc <_sbrk_r>
 8003170:	6030      	str	r0, [r6, #0]
 8003172:	4621      	mov	r1, r4
 8003174:	4628      	mov	r0, r5
 8003176:	f000 fcb1 	bl	8003adc <_sbrk_r>
 800317a:	1c43      	adds	r3, r0, #1
 800317c:	d103      	bne.n	8003186 <sbrk_aligned+0x26>
 800317e:	f04f 34ff 	mov.w	r4, #4294967295
 8003182:	4620      	mov	r0, r4
 8003184:	bd70      	pop	{r4, r5, r6, pc}
 8003186:	1cc4      	adds	r4, r0, #3
 8003188:	f024 0403 	bic.w	r4, r4, #3
 800318c:	42a0      	cmp	r0, r4
 800318e:	d0f8      	beq.n	8003182 <sbrk_aligned+0x22>
 8003190:	1a21      	subs	r1, r4, r0
 8003192:	4628      	mov	r0, r5
 8003194:	f000 fca2 	bl	8003adc <_sbrk_r>
 8003198:	3001      	adds	r0, #1
 800319a:	d1f2      	bne.n	8003182 <sbrk_aligned+0x22>
 800319c:	e7ef      	b.n	800317e <sbrk_aligned+0x1e>
 800319e:	bf00      	nop
 80031a0:	20000320 	.word	0x20000320

080031a4 <_malloc_r>:
 80031a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031a8:	1ccd      	adds	r5, r1, #3
 80031aa:	f025 0503 	bic.w	r5, r5, #3
 80031ae:	3508      	adds	r5, #8
 80031b0:	2d0c      	cmp	r5, #12
 80031b2:	bf38      	it	cc
 80031b4:	250c      	movcc	r5, #12
 80031b6:	2d00      	cmp	r5, #0
 80031b8:	4606      	mov	r6, r0
 80031ba:	db01      	blt.n	80031c0 <_malloc_r+0x1c>
 80031bc:	42a9      	cmp	r1, r5
 80031be:	d904      	bls.n	80031ca <_malloc_r+0x26>
 80031c0:	230c      	movs	r3, #12
 80031c2:	6033      	str	r3, [r6, #0]
 80031c4:	2000      	movs	r0, #0
 80031c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032a0 <_malloc_r+0xfc>
 80031ce:	f000 f869 	bl	80032a4 <__malloc_lock>
 80031d2:	f8d8 3000 	ldr.w	r3, [r8]
 80031d6:	461c      	mov	r4, r3
 80031d8:	bb44      	cbnz	r4, 800322c <_malloc_r+0x88>
 80031da:	4629      	mov	r1, r5
 80031dc:	4630      	mov	r0, r6
 80031de:	f7ff ffbf 	bl	8003160 <sbrk_aligned>
 80031e2:	1c43      	adds	r3, r0, #1
 80031e4:	4604      	mov	r4, r0
 80031e6:	d158      	bne.n	800329a <_malloc_r+0xf6>
 80031e8:	f8d8 4000 	ldr.w	r4, [r8]
 80031ec:	4627      	mov	r7, r4
 80031ee:	2f00      	cmp	r7, #0
 80031f0:	d143      	bne.n	800327a <_malloc_r+0xd6>
 80031f2:	2c00      	cmp	r4, #0
 80031f4:	d04b      	beq.n	800328e <_malloc_r+0xea>
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	4639      	mov	r1, r7
 80031fa:	4630      	mov	r0, r6
 80031fc:	eb04 0903 	add.w	r9, r4, r3
 8003200:	f000 fc6c 	bl	8003adc <_sbrk_r>
 8003204:	4581      	cmp	r9, r0
 8003206:	d142      	bne.n	800328e <_malloc_r+0xea>
 8003208:	6821      	ldr	r1, [r4, #0]
 800320a:	1a6d      	subs	r5, r5, r1
 800320c:	4629      	mov	r1, r5
 800320e:	4630      	mov	r0, r6
 8003210:	f7ff ffa6 	bl	8003160 <sbrk_aligned>
 8003214:	3001      	adds	r0, #1
 8003216:	d03a      	beq.n	800328e <_malloc_r+0xea>
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	442b      	add	r3, r5
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	f8d8 3000 	ldr.w	r3, [r8]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	bb62      	cbnz	r2, 8003280 <_malloc_r+0xdc>
 8003226:	f8c8 7000 	str.w	r7, [r8]
 800322a:	e00f      	b.n	800324c <_malloc_r+0xa8>
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	1b52      	subs	r2, r2, r5
 8003230:	d420      	bmi.n	8003274 <_malloc_r+0xd0>
 8003232:	2a0b      	cmp	r2, #11
 8003234:	d917      	bls.n	8003266 <_malloc_r+0xc2>
 8003236:	1961      	adds	r1, r4, r5
 8003238:	42a3      	cmp	r3, r4
 800323a:	6025      	str	r5, [r4, #0]
 800323c:	bf18      	it	ne
 800323e:	6059      	strne	r1, [r3, #4]
 8003240:	6863      	ldr	r3, [r4, #4]
 8003242:	bf08      	it	eq
 8003244:	f8c8 1000 	streq.w	r1, [r8]
 8003248:	5162      	str	r2, [r4, r5]
 800324a:	604b      	str	r3, [r1, #4]
 800324c:	4630      	mov	r0, r6
 800324e:	f000 f82f 	bl	80032b0 <__malloc_unlock>
 8003252:	f104 000b 	add.w	r0, r4, #11
 8003256:	1d23      	adds	r3, r4, #4
 8003258:	f020 0007 	bic.w	r0, r0, #7
 800325c:	1ac2      	subs	r2, r0, r3
 800325e:	bf1c      	itt	ne
 8003260:	1a1b      	subne	r3, r3, r0
 8003262:	50a3      	strne	r3, [r4, r2]
 8003264:	e7af      	b.n	80031c6 <_malloc_r+0x22>
 8003266:	6862      	ldr	r2, [r4, #4]
 8003268:	42a3      	cmp	r3, r4
 800326a:	bf0c      	ite	eq
 800326c:	f8c8 2000 	streq.w	r2, [r8]
 8003270:	605a      	strne	r2, [r3, #4]
 8003272:	e7eb      	b.n	800324c <_malloc_r+0xa8>
 8003274:	4623      	mov	r3, r4
 8003276:	6864      	ldr	r4, [r4, #4]
 8003278:	e7ae      	b.n	80031d8 <_malloc_r+0x34>
 800327a:	463c      	mov	r4, r7
 800327c:	687f      	ldr	r7, [r7, #4]
 800327e:	e7b6      	b.n	80031ee <_malloc_r+0x4a>
 8003280:	461a      	mov	r2, r3
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	42a3      	cmp	r3, r4
 8003286:	d1fb      	bne.n	8003280 <_malloc_r+0xdc>
 8003288:	2300      	movs	r3, #0
 800328a:	6053      	str	r3, [r2, #4]
 800328c:	e7de      	b.n	800324c <_malloc_r+0xa8>
 800328e:	230c      	movs	r3, #12
 8003290:	6033      	str	r3, [r6, #0]
 8003292:	4630      	mov	r0, r6
 8003294:	f000 f80c 	bl	80032b0 <__malloc_unlock>
 8003298:	e794      	b.n	80031c4 <_malloc_r+0x20>
 800329a:	6005      	str	r5, [r0, #0]
 800329c:	e7d6      	b.n	800324c <_malloc_r+0xa8>
 800329e:	bf00      	nop
 80032a0:	20000324 	.word	0x20000324

080032a4 <__malloc_lock>:
 80032a4:	4801      	ldr	r0, [pc, #4]	@ (80032ac <__malloc_lock+0x8>)
 80032a6:	f7ff bf0e 	b.w	80030c6 <__retarget_lock_acquire_recursive>
 80032aa:	bf00      	nop
 80032ac:	2000031c 	.word	0x2000031c

080032b0 <__malloc_unlock>:
 80032b0:	4801      	ldr	r0, [pc, #4]	@ (80032b8 <__malloc_unlock+0x8>)
 80032b2:	f7ff bf09 	b.w	80030c8 <__retarget_lock_release_recursive>
 80032b6:	bf00      	nop
 80032b8:	2000031c 	.word	0x2000031c

080032bc <__sfputc_r>:
 80032bc:	6893      	ldr	r3, [r2, #8]
 80032be:	3b01      	subs	r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	b410      	push	{r4}
 80032c4:	6093      	str	r3, [r2, #8]
 80032c6:	da08      	bge.n	80032da <__sfputc_r+0x1e>
 80032c8:	6994      	ldr	r4, [r2, #24]
 80032ca:	42a3      	cmp	r3, r4
 80032cc:	db01      	blt.n	80032d2 <__sfputc_r+0x16>
 80032ce:	290a      	cmp	r1, #10
 80032d0:	d103      	bne.n	80032da <__sfputc_r+0x1e>
 80032d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032d6:	f000 bb6d 	b.w	80039b4 <__swbuf_r>
 80032da:	6813      	ldr	r3, [r2, #0]
 80032dc:	1c58      	adds	r0, r3, #1
 80032de:	6010      	str	r0, [r2, #0]
 80032e0:	7019      	strb	r1, [r3, #0]
 80032e2:	4608      	mov	r0, r1
 80032e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <__sfputs_r>:
 80032ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ec:	4606      	mov	r6, r0
 80032ee:	460f      	mov	r7, r1
 80032f0:	4614      	mov	r4, r2
 80032f2:	18d5      	adds	r5, r2, r3
 80032f4:	42ac      	cmp	r4, r5
 80032f6:	d101      	bne.n	80032fc <__sfputs_r+0x12>
 80032f8:	2000      	movs	r0, #0
 80032fa:	e007      	b.n	800330c <__sfputs_r+0x22>
 80032fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003300:	463a      	mov	r2, r7
 8003302:	4630      	mov	r0, r6
 8003304:	f7ff ffda 	bl	80032bc <__sfputc_r>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d1f3      	bne.n	80032f4 <__sfputs_r+0xa>
 800330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003310 <_vfiprintf_r>:
 8003310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	460d      	mov	r5, r1
 8003316:	b09d      	sub	sp, #116	@ 0x74
 8003318:	4614      	mov	r4, r2
 800331a:	4698      	mov	r8, r3
 800331c:	4606      	mov	r6, r0
 800331e:	b118      	cbz	r0, 8003328 <_vfiprintf_r+0x18>
 8003320:	6a03      	ldr	r3, [r0, #32]
 8003322:	b90b      	cbnz	r3, 8003328 <_vfiprintf_r+0x18>
 8003324:	f7ff fdca 	bl	8002ebc <__sinit>
 8003328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800332a:	07d9      	lsls	r1, r3, #31
 800332c:	d405      	bmi.n	800333a <_vfiprintf_r+0x2a>
 800332e:	89ab      	ldrh	r3, [r5, #12]
 8003330:	059a      	lsls	r2, r3, #22
 8003332:	d402      	bmi.n	800333a <_vfiprintf_r+0x2a>
 8003334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003336:	f7ff fec6 	bl	80030c6 <__retarget_lock_acquire_recursive>
 800333a:	89ab      	ldrh	r3, [r5, #12]
 800333c:	071b      	lsls	r3, r3, #28
 800333e:	d501      	bpl.n	8003344 <_vfiprintf_r+0x34>
 8003340:	692b      	ldr	r3, [r5, #16]
 8003342:	b99b      	cbnz	r3, 800336c <_vfiprintf_r+0x5c>
 8003344:	4629      	mov	r1, r5
 8003346:	4630      	mov	r0, r6
 8003348:	f000 fb72 	bl	8003a30 <__swsetup_r>
 800334c:	b170      	cbz	r0, 800336c <_vfiprintf_r+0x5c>
 800334e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003350:	07dc      	lsls	r4, r3, #31
 8003352:	d504      	bpl.n	800335e <_vfiprintf_r+0x4e>
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	b01d      	add	sp, #116	@ 0x74
 800335a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800335e:	89ab      	ldrh	r3, [r5, #12]
 8003360:	0598      	lsls	r0, r3, #22
 8003362:	d4f7      	bmi.n	8003354 <_vfiprintf_r+0x44>
 8003364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003366:	f7ff feaf 	bl	80030c8 <__retarget_lock_release_recursive>
 800336a:	e7f3      	b.n	8003354 <_vfiprintf_r+0x44>
 800336c:	2300      	movs	r3, #0
 800336e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003370:	2320      	movs	r3, #32
 8003372:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003376:	f8cd 800c 	str.w	r8, [sp, #12]
 800337a:	2330      	movs	r3, #48	@ 0x30
 800337c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800352c <_vfiprintf_r+0x21c>
 8003380:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003384:	f04f 0901 	mov.w	r9, #1
 8003388:	4623      	mov	r3, r4
 800338a:	469a      	mov	sl, r3
 800338c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003390:	b10a      	cbz	r2, 8003396 <_vfiprintf_r+0x86>
 8003392:	2a25      	cmp	r2, #37	@ 0x25
 8003394:	d1f9      	bne.n	800338a <_vfiprintf_r+0x7a>
 8003396:	ebba 0b04 	subs.w	fp, sl, r4
 800339a:	d00b      	beq.n	80033b4 <_vfiprintf_r+0xa4>
 800339c:	465b      	mov	r3, fp
 800339e:	4622      	mov	r2, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	4630      	mov	r0, r6
 80033a4:	f7ff ffa1 	bl	80032ea <__sfputs_r>
 80033a8:	3001      	adds	r0, #1
 80033aa:	f000 80a7 	beq.w	80034fc <_vfiprintf_r+0x1ec>
 80033ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033b0:	445a      	add	r2, fp
 80033b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80033b4:	f89a 3000 	ldrb.w	r3, [sl]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 809f 	beq.w	80034fc <_vfiprintf_r+0x1ec>
 80033be:	2300      	movs	r3, #0
 80033c0:	f04f 32ff 	mov.w	r2, #4294967295
 80033c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c8:	f10a 0a01 	add.w	sl, sl, #1
 80033cc:	9304      	str	r3, [sp, #16]
 80033ce:	9307      	str	r3, [sp, #28]
 80033d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80033d6:	4654      	mov	r4, sl
 80033d8:	2205      	movs	r2, #5
 80033da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033de:	4853      	ldr	r0, [pc, #332]	@ (800352c <_vfiprintf_r+0x21c>)
 80033e0:	f7fc ff0e 	bl	8000200 <memchr>
 80033e4:	9a04      	ldr	r2, [sp, #16]
 80033e6:	b9d8      	cbnz	r0, 8003420 <_vfiprintf_r+0x110>
 80033e8:	06d1      	lsls	r1, r2, #27
 80033ea:	bf44      	itt	mi
 80033ec:	2320      	movmi	r3, #32
 80033ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033f2:	0713      	lsls	r3, r2, #28
 80033f4:	bf44      	itt	mi
 80033f6:	232b      	movmi	r3, #43	@ 0x2b
 80033f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033fc:	f89a 3000 	ldrb.w	r3, [sl]
 8003400:	2b2a      	cmp	r3, #42	@ 0x2a
 8003402:	d015      	beq.n	8003430 <_vfiprintf_r+0x120>
 8003404:	9a07      	ldr	r2, [sp, #28]
 8003406:	4654      	mov	r4, sl
 8003408:	2000      	movs	r0, #0
 800340a:	f04f 0c0a 	mov.w	ip, #10
 800340e:	4621      	mov	r1, r4
 8003410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003414:	3b30      	subs	r3, #48	@ 0x30
 8003416:	2b09      	cmp	r3, #9
 8003418:	d94b      	bls.n	80034b2 <_vfiprintf_r+0x1a2>
 800341a:	b1b0      	cbz	r0, 800344a <_vfiprintf_r+0x13a>
 800341c:	9207      	str	r2, [sp, #28]
 800341e:	e014      	b.n	800344a <_vfiprintf_r+0x13a>
 8003420:	eba0 0308 	sub.w	r3, r0, r8
 8003424:	fa09 f303 	lsl.w	r3, r9, r3
 8003428:	4313      	orrs	r3, r2
 800342a:	9304      	str	r3, [sp, #16]
 800342c:	46a2      	mov	sl, r4
 800342e:	e7d2      	b.n	80033d6 <_vfiprintf_r+0xc6>
 8003430:	9b03      	ldr	r3, [sp, #12]
 8003432:	1d19      	adds	r1, r3, #4
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	9103      	str	r1, [sp, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	bfbb      	ittet	lt
 800343c:	425b      	neglt	r3, r3
 800343e:	f042 0202 	orrlt.w	r2, r2, #2
 8003442:	9307      	strge	r3, [sp, #28]
 8003444:	9307      	strlt	r3, [sp, #28]
 8003446:	bfb8      	it	lt
 8003448:	9204      	strlt	r2, [sp, #16]
 800344a:	7823      	ldrb	r3, [r4, #0]
 800344c:	2b2e      	cmp	r3, #46	@ 0x2e
 800344e:	d10a      	bne.n	8003466 <_vfiprintf_r+0x156>
 8003450:	7863      	ldrb	r3, [r4, #1]
 8003452:	2b2a      	cmp	r3, #42	@ 0x2a
 8003454:	d132      	bne.n	80034bc <_vfiprintf_r+0x1ac>
 8003456:	9b03      	ldr	r3, [sp, #12]
 8003458:	1d1a      	adds	r2, r3, #4
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	9203      	str	r2, [sp, #12]
 800345e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003462:	3402      	adds	r4, #2
 8003464:	9305      	str	r3, [sp, #20]
 8003466:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800353c <_vfiprintf_r+0x22c>
 800346a:	7821      	ldrb	r1, [r4, #0]
 800346c:	2203      	movs	r2, #3
 800346e:	4650      	mov	r0, sl
 8003470:	f7fc fec6 	bl	8000200 <memchr>
 8003474:	b138      	cbz	r0, 8003486 <_vfiprintf_r+0x176>
 8003476:	9b04      	ldr	r3, [sp, #16]
 8003478:	eba0 000a 	sub.w	r0, r0, sl
 800347c:	2240      	movs	r2, #64	@ 0x40
 800347e:	4082      	lsls	r2, r0
 8003480:	4313      	orrs	r3, r2
 8003482:	3401      	adds	r4, #1
 8003484:	9304      	str	r3, [sp, #16]
 8003486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800348a:	4829      	ldr	r0, [pc, #164]	@ (8003530 <_vfiprintf_r+0x220>)
 800348c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003490:	2206      	movs	r2, #6
 8003492:	f7fc feb5 	bl	8000200 <memchr>
 8003496:	2800      	cmp	r0, #0
 8003498:	d03f      	beq.n	800351a <_vfiprintf_r+0x20a>
 800349a:	4b26      	ldr	r3, [pc, #152]	@ (8003534 <_vfiprintf_r+0x224>)
 800349c:	bb1b      	cbnz	r3, 80034e6 <_vfiprintf_r+0x1d6>
 800349e:	9b03      	ldr	r3, [sp, #12]
 80034a0:	3307      	adds	r3, #7
 80034a2:	f023 0307 	bic.w	r3, r3, #7
 80034a6:	3308      	adds	r3, #8
 80034a8:	9303      	str	r3, [sp, #12]
 80034aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ac:	443b      	add	r3, r7
 80034ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80034b0:	e76a      	b.n	8003388 <_vfiprintf_r+0x78>
 80034b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034b6:	460c      	mov	r4, r1
 80034b8:	2001      	movs	r0, #1
 80034ba:	e7a8      	b.n	800340e <_vfiprintf_r+0xfe>
 80034bc:	2300      	movs	r3, #0
 80034be:	3401      	adds	r4, #1
 80034c0:	9305      	str	r3, [sp, #20]
 80034c2:	4619      	mov	r1, r3
 80034c4:	f04f 0c0a 	mov.w	ip, #10
 80034c8:	4620      	mov	r0, r4
 80034ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034ce:	3a30      	subs	r2, #48	@ 0x30
 80034d0:	2a09      	cmp	r2, #9
 80034d2:	d903      	bls.n	80034dc <_vfiprintf_r+0x1cc>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0c6      	beq.n	8003466 <_vfiprintf_r+0x156>
 80034d8:	9105      	str	r1, [sp, #20]
 80034da:	e7c4      	b.n	8003466 <_vfiprintf_r+0x156>
 80034dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80034e0:	4604      	mov	r4, r0
 80034e2:	2301      	movs	r3, #1
 80034e4:	e7f0      	b.n	80034c8 <_vfiprintf_r+0x1b8>
 80034e6:	ab03      	add	r3, sp, #12
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	462a      	mov	r2, r5
 80034ec:	4b12      	ldr	r3, [pc, #72]	@ (8003538 <_vfiprintf_r+0x228>)
 80034ee:	a904      	add	r1, sp, #16
 80034f0:	4630      	mov	r0, r6
 80034f2:	f3af 8000 	nop.w
 80034f6:	4607      	mov	r7, r0
 80034f8:	1c78      	adds	r0, r7, #1
 80034fa:	d1d6      	bne.n	80034aa <_vfiprintf_r+0x19a>
 80034fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034fe:	07d9      	lsls	r1, r3, #31
 8003500:	d405      	bmi.n	800350e <_vfiprintf_r+0x1fe>
 8003502:	89ab      	ldrh	r3, [r5, #12]
 8003504:	059a      	lsls	r2, r3, #22
 8003506:	d402      	bmi.n	800350e <_vfiprintf_r+0x1fe>
 8003508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800350a:	f7ff fddd 	bl	80030c8 <__retarget_lock_release_recursive>
 800350e:	89ab      	ldrh	r3, [r5, #12]
 8003510:	065b      	lsls	r3, r3, #25
 8003512:	f53f af1f 	bmi.w	8003354 <_vfiprintf_r+0x44>
 8003516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003518:	e71e      	b.n	8003358 <_vfiprintf_r+0x48>
 800351a:	ab03      	add	r3, sp, #12
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	462a      	mov	r2, r5
 8003520:	4b05      	ldr	r3, [pc, #20]	@ (8003538 <_vfiprintf_r+0x228>)
 8003522:	a904      	add	r1, sp, #16
 8003524:	4630      	mov	r0, r6
 8003526:	f000 f879 	bl	800361c <_printf_i>
 800352a:	e7e4      	b.n	80034f6 <_vfiprintf_r+0x1e6>
 800352c:	08003c8e 	.word	0x08003c8e
 8003530:	08003c98 	.word	0x08003c98
 8003534:	00000000 	.word	0x00000000
 8003538:	080032eb 	.word	0x080032eb
 800353c:	08003c94 	.word	0x08003c94

08003540 <_printf_common>:
 8003540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003544:	4616      	mov	r6, r2
 8003546:	4698      	mov	r8, r3
 8003548:	688a      	ldr	r2, [r1, #8]
 800354a:	690b      	ldr	r3, [r1, #16]
 800354c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003550:	4293      	cmp	r3, r2
 8003552:	bfb8      	it	lt
 8003554:	4613      	movlt	r3, r2
 8003556:	6033      	str	r3, [r6, #0]
 8003558:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800355c:	4607      	mov	r7, r0
 800355e:	460c      	mov	r4, r1
 8003560:	b10a      	cbz	r2, 8003566 <_printf_common+0x26>
 8003562:	3301      	adds	r3, #1
 8003564:	6033      	str	r3, [r6, #0]
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	0699      	lsls	r1, r3, #26
 800356a:	bf42      	ittt	mi
 800356c:	6833      	ldrmi	r3, [r6, #0]
 800356e:	3302      	addmi	r3, #2
 8003570:	6033      	strmi	r3, [r6, #0]
 8003572:	6825      	ldr	r5, [r4, #0]
 8003574:	f015 0506 	ands.w	r5, r5, #6
 8003578:	d106      	bne.n	8003588 <_printf_common+0x48>
 800357a:	f104 0a19 	add.w	sl, r4, #25
 800357e:	68e3      	ldr	r3, [r4, #12]
 8003580:	6832      	ldr	r2, [r6, #0]
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	42ab      	cmp	r3, r5
 8003586:	dc26      	bgt.n	80035d6 <_printf_common+0x96>
 8003588:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	3b00      	subs	r3, #0
 8003590:	bf18      	it	ne
 8003592:	2301      	movne	r3, #1
 8003594:	0692      	lsls	r2, r2, #26
 8003596:	d42b      	bmi.n	80035f0 <_printf_common+0xb0>
 8003598:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800359c:	4641      	mov	r1, r8
 800359e:	4638      	mov	r0, r7
 80035a0:	47c8      	blx	r9
 80035a2:	3001      	adds	r0, #1
 80035a4:	d01e      	beq.n	80035e4 <_printf_common+0xa4>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	6922      	ldr	r2, [r4, #16]
 80035aa:	f003 0306 	and.w	r3, r3, #6
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	bf02      	ittt	eq
 80035b2:	68e5      	ldreq	r5, [r4, #12]
 80035b4:	6833      	ldreq	r3, [r6, #0]
 80035b6:	1aed      	subeq	r5, r5, r3
 80035b8:	68a3      	ldr	r3, [r4, #8]
 80035ba:	bf0c      	ite	eq
 80035bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035c0:	2500      	movne	r5, #0
 80035c2:	4293      	cmp	r3, r2
 80035c4:	bfc4      	itt	gt
 80035c6:	1a9b      	subgt	r3, r3, r2
 80035c8:	18ed      	addgt	r5, r5, r3
 80035ca:	2600      	movs	r6, #0
 80035cc:	341a      	adds	r4, #26
 80035ce:	42b5      	cmp	r5, r6
 80035d0:	d11a      	bne.n	8003608 <_printf_common+0xc8>
 80035d2:	2000      	movs	r0, #0
 80035d4:	e008      	b.n	80035e8 <_printf_common+0xa8>
 80035d6:	2301      	movs	r3, #1
 80035d8:	4652      	mov	r2, sl
 80035da:	4641      	mov	r1, r8
 80035dc:	4638      	mov	r0, r7
 80035de:	47c8      	blx	r9
 80035e0:	3001      	adds	r0, #1
 80035e2:	d103      	bne.n	80035ec <_printf_common+0xac>
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295
 80035e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ec:	3501      	adds	r5, #1
 80035ee:	e7c6      	b.n	800357e <_printf_common+0x3e>
 80035f0:	18e1      	adds	r1, r4, r3
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	2030      	movs	r0, #48	@ 0x30
 80035f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035fa:	4422      	add	r2, r4
 80035fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003600:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003604:	3302      	adds	r3, #2
 8003606:	e7c7      	b.n	8003598 <_printf_common+0x58>
 8003608:	2301      	movs	r3, #1
 800360a:	4622      	mov	r2, r4
 800360c:	4641      	mov	r1, r8
 800360e:	4638      	mov	r0, r7
 8003610:	47c8      	blx	r9
 8003612:	3001      	adds	r0, #1
 8003614:	d0e6      	beq.n	80035e4 <_printf_common+0xa4>
 8003616:	3601      	adds	r6, #1
 8003618:	e7d9      	b.n	80035ce <_printf_common+0x8e>
	...

0800361c <_printf_i>:
 800361c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003620:	7e0f      	ldrb	r7, [r1, #24]
 8003622:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003624:	2f78      	cmp	r7, #120	@ 0x78
 8003626:	4691      	mov	r9, r2
 8003628:	4680      	mov	r8, r0
 800362a:	460c      	mov	r4, r1
 800362c:	469a      	mov	sl, r3
 800362e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003632:	d807      	bhi.n	8003644 <_printf_i+0x28>
 8003634:	2f62      	cmp	r7, #98	@ 0x62
 8003636:	d80a      	bhi.n	800364e <_printf_i+0x32>
 8003638:	2f00      	cmp	r7, #0
 800363a:	f000 80d2 	beq.w	80037e2 <_printf_i+0x1c6>
 800363e:	2f58      	cmp	r7, #88	@ 0x58
 8003640:	f000 80b9 	beq.w	80037b6 <_printf_i+0x19a>
 8003644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003648:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800364c:	e03a      	b.n	80036c4 <_printf_i+0xa8>
 800364e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003652:	2b15      	cmp	r3, #21
 8003654:	d8f6      	bhi.n	8003644 <_printf_i+0x28>
 8003656:	a101      	add	r1, pc, #4	@ (adr r1, 800365c <_printf_i+0x40>)
 8003658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800365c:	080036b5 	.word	0x080036b5
 8003660:	080036c9 	.word	0x080036c9
 8003664:	08003645 	.word	0x08003645
 8003668:	08003645 	.word	0x08003645
 800366c:	08003645 	.word	0x08003645
 8003670:	08003645 	.word	0x08003645
 8003674:	080036c9 	.word	0x080036c9
 8003678:	08003645 	.word	0x08003645
 800367c:	08003645 	.word	0x08003645
 8003680:	08003645 	.word	0x08003645
 8003684:	08003645 	.word	0x08003645
 8003688:	080037c9 	.word	0x080037c9
 800368c:	080036f3 	.word	0x080036f3
 8003690:	08003783 	.word	0x08003783
 8003694:	08003645 	.word	0x08003645
 8003698:	08003645 	.word	0x08003645
 800369c:	080037eb 	.word	0x080037eb
 80036a0:	08003645 	.word	0x08003645
 80036a4:	080036f3 	.word	0x080036f3
 80036a8:	08003645 	.word	0x08003645
 80036ac:	08003645 	.word	0x08003645
 80036b0:	0800378b 	.word	0x0800378b
 80036b4:	6833      	ldr	r3, [r6, #0]
 80036b6:	1d1a      	adds	r2, r3, #4
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6032      	str	r2, [r6, #0]
 80036bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036c4:	2301      	movs	r3, #1
 80036c6:	e09d      	b.n	8003804 <_printf_i+0x1e8>
 80036c8:	6833      	ldr	r3, [r6, #0]
 80036ca:	6820      	ldr	r0, [r4, #0]
 80036cc:	1d19      	adds	r1, r3, #4
 80036ce:	6031      	str	r1, [r6, #0]
 80036d0:	0606      	lsls	r6, r0, #24
 80036d2:	d501      	bpl.n	80036d8 <_printf_i+0xbc>
 80036d4:	681d      	ldr	r5, [r3, #0]
 80036d6:	e003      	b.n	80036e0 <_printf_i+0xc4>
 80036d8:	0645      	lsls	r5, r0, #25
 80036da:	d5fb      	bpl.n	80036d4 <_printf_i+0xb8>
 80036dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036e0:	2d00      	cmp	r5, #0
 80036e2:	da03      	bge.n	80036ec <_printf_i+0xd0>
 80036e4:	232d      	movs	r3, #45	@ 0x2d
 80036e6:	426d      	negs	r5, r5
 80036e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036ec:	4859      	ldr	r0, [pc, #356]	@ (8003854 <_printf_i+0x238>)
 80036ee:	230a      	movs	r3, #10
 80036f0:	e011      	b.n	8003716 <_printf_i+0xfa>
 80036f2:	6821      	ldr	r1, [r4, #0]
 80036f4:	6833      	ldr	r3, [r6, #0]
 80036f6:	0608      	lsls	r0, r1, #24
 80036f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80036fc:	d402      	bmi.n	8003704 <_printf_i+0xe8>
 80036fe:	0649      	lsls	r1, r1, #25
 8003700:	bf48      	it	mi
 8003702:	b2ad      	uxthmi	r5, r5
 8003704:	2f6f      	cmp	r7, #111	@ 0x6f
 8003706:	4853      	ldr	r0, [pc, #332]	@ (8003854 <_printf_i+0x238>)
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	bf14      	ite	ne
 800370c:	230a      	movne	r3, #10
 800370e:	2308      	moveq	r3, #8
 8003710:	2100      	movs	r1, #0
 8003712:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003716:	6866      	ldr	r6, [r4, #4]
 8003718:	60a6      	str	r6, [r4, #8]
 800371a:	2e00      	cmp	r6, #0
 800371c:	bfa2      	ittt	ge
 800371e:	6821      	ldrge	r1, [r4, #0]
 8003720:	f021 0104 	bicge.w	r1, r1, #4
 8003724:	6021      	strge	r1, [r4, #0]
 8003726:	b90d      	cbnz	r5, 800372c <_printf_i+0x110>
 8003728:	2e00      	cmp	r6, #0
 800372a:	d04b      	beq.n	80037c4 <_printf_i+0x1a8>
 800372c:	4616      	mov	r6, r2
 800372e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003732:	fb03 5711 	mls	r7, r3, r1, r5
 8003736:	5dc7      	ldrb	r7, [r0, r7]
 8003738:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800373c:	462f      	mov	r7, r5
 800373e:	42bb      	cmp	r3, r7
 8003740:	460d      	mov	r5, r1
 8003742:	d9f4      	bls.n	800372e <_printf_i+0x112>
 8003744:	2b08      	cmp	r3, #8
 8003746:	d10b      	bne.n	8003760 <_printf_i+0x144>
 8003748:	6823      	ldr	r3, [r4, #0]
 800374a:	07df      	lsls	r7, r3, #31
 800374c:	d508      	bpl.n	8003760 <_printf_i+0x144>
 800374e:	6923      	ldr	r3, [r4, #16]
 8003750:	6861      	ldr	r1, [r4, #4]
 8003752:	4299      	cmp	r1, r3
 8003754:	bfde      	ittt	le
 8003756:	2330      	movle	r3, #48	@ 0x30
 8003758:	f806 3c01 	strble.w	r3, [r6, #-1]
 800375c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003760:	1b92      	subs	r2, r2, r6
 8003762:	6122      	str	r2, [r4, #16]
 8003764:	f8cd a000 	str.w	sl, [sp]
 8003768:	464b      	mov	r3, r9
 800376a:	aa03      	add	r2, sp, #12
 800376c:	4621      	mov	r1, r4
 800376e:	4640      	mov	r0, r8
 8003770:	f7ff fee6 	bl	8003540 <_printf_common>
 8003774:	3001      	adds	r0, #1
 8003776:	d14a      	bne.n	800380e <_printf_i+0x1f2>
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	b004      	add	sp, #16
 800377e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	f043 0320 	orr.w	r3, r3, #32
 8003788:	6023      	str	r3, [r4, #0]
 800378a:	4833      	ldr	r0, [pc, #204]	@ (8003858 <_printf_i+0x23c>)
 800378c:	2778      	movs	r7, #120	@ 0x78
 800378e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	6831      	ldr	r1, [r6, #0]
 8003796:	061f      	lsls	r7, r3, #24
 8003798:	f851 5b04 	ldr.w	r5, [r1], #4
 800379c:	d402      	bmi.n	80037a4 <_printf_i+0x188>
 800379e:	065f      	lsls	r7, r3, #25
 80037a0:	bf48      	it	mi
 80037a2:	b2ad      	uxthmi	r5, r5
 80037a4:	6031      	str	r1, [r6, #0]
 80037a6:	07d9      	lsls	r1, r3, #31
 80037a8:	bf44      	itt	mi
 80037aa:	f043 0320 	orrmi.w	r3, r3, #32
 80037ae:	6023      	strmi	r3, [r4, #0]
 80037b0:	b11d      	cbz	r5, 80037ba <_printf_i+0x19e>
 80037b2:	2310      	movs	r3, #16
 80037b4:	e7ac      	b.n	8003710 <_printf_i+0xf4>
 80037b6:	4827      	ldr	r0, [pc, #156]	@ (8003854 <_printf_i+0x238>)
 80037b8:	e7e9      	b.n	800378e <_printf_i+0x172>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	f023 0320 	bic.w	r3, r3, #32
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	e7f6      	b.n	80037b2 <_printf_i+0x196>
 80037c4:	4616      	mov	r6, r2
 80037c6:	e7bd      	b.n	8003744 <_printf_i+0x128>
 80037c8:	6833      	ldr	r3, [r6, #0]
 80037ca:	6825      	ldr	r5, [r4, #0]
 80037cc:	6961      	ldr	r1, [r4, #20]
 80037ce:	1d18      	adds	r0, r3, #4
 80037d0:	6030      	str	r0, [r6, #0]
 80037d2:	062e      	lsls	r6, r5, #24
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	d501      	bpl.n	80037dc <_printf_i+0x1c0>
 80037d8:	6019      	str	r1, [r3, #0]
 80037da:	e002      	b.n	80037e2 <_printf_i+0x1c6>
 80037dc:	0668      	lsls	r0, r5, #25
 80037de:	d5fb      	bpl.n	80037d8 <_printf_i+0x1bc>
 80037e0:	8019      	strh	r1, [r3, #0]
 80037e2:	2300      	movs	r3, #0
 80037e4:	6123      	str	r3, [r4, #16]
 80037e6:	4616      	mov	r6, r2
 80037e8:	e7bc      	b.n	8003764 <_printf_i+0x148>
 80037ea:	6833      	ldr	r3, [r6, #0]
 80037ec:	1d1a      	adds	r2, r3, #4
 80037ee:	6032      	str	r2, [r6, #0]
 80037f0:	681e      	ldr	r6, [r3, #0]
 80037f2:	6862      	ldr	r2, [r4, #4]
 80037f4:	2100      	movs	r1, #0
 80037f6:	4630      	mov	r0, r6
 80037f8:	f7fc fd02 	bl	8000200 <memchr>
 80037fc:	b108      	cbz	r0, 8003802 <_printf_i+0x1e6>
 80037fe:	1b80      	subs	r0, r0, r6
 8003800:	6060      	str	r0, [r4, #4]
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	6123      	str	r3, [r4, #16]
 8003806:	2300      	movs	r3, #0
 8003808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800380c:	e7aa      	b.n	8003764 <_printf_i+0x148>
 800380e:	6923      	ldr	r3, [r4, #16]
 8003810:	4632      	mov	r2, r6
 8003812:	4649      	mov	r1, r9
 8003814:	4640      	mov	r0, r8
 8003816:	47d0      	blx	sl
 8003818:	3001      	adds	r0, #1
 800381a:	d0ad      	beq.n	8003778 <_printf_i+0x15c>
 800381c:	6823      	ldr	r3, [r4, #0]
 800381e:	079b      	lsls	r3, r3, #30
 8003820:	d413      	bmi.n	800384a <_printf_i+0x22e>
 8003822:	68e0      	ldr	r0, [r4, #12]
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	4298      	cmp	r0, r3
 8003828:	bfb8      	it	lt
 800382a:	4618      	movlt	r0, r3
 800382c:	e7a6      	b.n	800377c <_printf_i+0x160>
 800382e:	2301      	movs	r3, #1
 8003830:	4632      	mov	r2, r6
 8003832:	4649      	mov	r1, r9
 8003834:	4640      	mov	r0, r8
 8003836:	47d0      	blx	sl
 8003838:	3001      	adds	r0, #1
 800383a:	d09d      	beq.n	8003778 <_printf_i+0x15c>
 800383c:	3501      	adds	r5, #1
 800383e:	68e3      	ldr	r3, [r4, #12]
 8003840:	9903      	ldr	r1, [sp, #12]
 8003842:	1a5b      	subs	r3, r3, r1
 8003844:	42ab      	cmp	r3, r5
 8003846:	dcf2      	bgt.n	800382e <_printf_i+0x212>
 8003848:	e7eb      	b.n	8003822 <_printf_i+0x206>
 800384a:	2500      	movs	r5, #0
 800384c:	f104 0619 	add.w	r6, r4, #25
 8003850:	e7f5      	b.n	800383e <_printf_i+0x222>
 8003852:	bf00      	nop
 8003854:	08003c9f 	.word	0x08003c9f
 8003858:	08003cb0 	.word	0x08003cb0

0800385c <__sflush_r>:
 800385c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003864:	0716      	lsls	r6, r2, #28
 8003866:	4605      	mov	r5, r0
 8003868:	460c      	mov	r4, r1
 800386a:	d454      	bmi.n	8003916 <__sflush_r+0xba>
 800386c:	684b      	ldr	r3, [r1, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	dc02      	bgt.n	8003878 <__sflush_r+0x1c>
 8003872:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	dd48      	ble.n	800390a <__sflush_r+0xae>
 8003878:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800387a:	2e00      	cmp	r6, #0
 800387c:	d045      	beq.n	800390a <__sflush_r+0xae>
 800387e:	2300      	movs	r3, #0
 8003880:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003884:	682f      	ldr	r7, [r5, #0]
 8003886:	6a21      	ldr	r1, [r4, #32]
 8003888:	602b      	str	r3, [r5, #0]
 800388a:	d030      	beq.n	80038ee <__sflush_r+0x92>
 800388c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	0759      	lsls	r1, r3, #29
 8003892:	d505      	bpl.n	80038a0 <__sflush_r+0x44>
 8003894:	6863      	ldr	r3, [r4, #4]
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800389a:	b10b      	cbz	r3, 80038a0 <__sflush_r+0x44>
 800389c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800389e:	1ad2      	subs	r2, r2, r3
 80038a0:	2300      	movs	r3, #0
 80038a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038a4:	6a21      	ldr	r1, [r4, #32]
 80038a6:	4628      	mov	r0, r5
 80038a8:	47b0      	blx	r6
 80038aa:	1c43      	adds	r3, r0, #1
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	d106      	bne.n	80038be <__sflush_r+0x62>
 80038b0:	6829      	ldr	r1, [r5, #0]
 80038b2:	291d      	cmp	r1, #29
 80038b4:	d82b      	bhi.n	800390e <__sflush_r+0xb2>
 80038b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003960 <__sflush_r+0x104>)
 80038b8:	410a      	asrs	r2, r1
 80038ba:	07d6      	lsls	r6, r2, #31
 80038bc:	d427      	bmi.n	800390e <__sflush_r+0xb2>
 80038be:	2200      	movs	r2, #0
 80038c0:	6062      	str	r2, [r4, #4]
 80038c2:	04d9      	lsls	r1, r3, #19
 80038c4:	6922      	ldr	r2, [r4, #16]
 80038c6:	6022      	str	r2, [r4, #0]
 80038c8:	d504      	bpl.n	80038d4 <__sflush_r+0x78>
 80038ca:	1c42      	adds	r2, r0, #1
 80038cc:	d101      	bne.n	80038d2 <__sflush_r+0x76>
 80038ce:	682b      	ldr	r3, [r5, #0]
 80038d0:	b903      	cbnz	r3, 80038d4 <__sflush_r+0x78>
 80038d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80038d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038d6:	602f      	str	r7, [r5, #0]
 80038d8:	b1b9      	cbz	r1, 800390a <__sflush_r+0xae>
 80038da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80038de:	4299      	cmp	r1, r3
 80038e0:	d002      	beq.n	80038e8 <__sflush_r+0x8c>
 80038e2:	4628      	mov	r0, r5
 80038e4:	f7ff fbf2 	bl	80030cc <_free_r>
 80038e8:	2300      	movs	r3, #0
 80038ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80038ec:	e00d      	b.n	800390a <__sflush_r+0xae>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4628      	mov	r0, r5
 80038f2:	47b0      	blx	r6
 80038f4:	4602      	mov	r2, r0
 80038f6:	1c50      	adds	r0, r2, #1
 80038f8:	d1c9      	bne.n	800388e <__sflush_r+0x32>
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0c6      	beq.n	800388e <__sflush_r+0x32>
 8003900:	2b1d      	cmp	r3, #29
 8003902:	d001      	beq.n	8003908 <__sflush_r+0xac>
 8003904:	2b16      	cmp	r3, #22
 8003906:	d11e      	bne.n	8003946 <__sflush_r+0xea>
 8003908:	602f      	str	r7, [r5, #0]
 800390a:	2000      	movs	r0, #0
 800390c:	e022      	b.n	8003954 <__sflush_r+0xf8>
 800390e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003912:	b21b      	sxth	r3, r3
 8003914:	e01b      	b.n	800394e <__sflush_r+0xf2>
 8003916:	690f      	ldr	r7, [r1, #16]
 8003918:	2f00      	cmp	r7, #0
 800391a:	d0f6      	beq.n	800390a <__sflush_r+0xae>
 800391c:	0793      	lsls	r3, r2, #30
 800391e:	680e      	ldr	r6, [r1, #0]
 8003920:	bf08      	it	eq
 8003922:	694b      	ldreq	r3, [r1, #20]
 8003924:	600f      	str	r7, [r1, #0]
 8003926:	bf18      	it	ne
 8003928:	2300      	movne	r3, #0
 800392a:	eba6 0807 	sub.w	r8, r6, r7
 800392e:	608b      	str	r3, [r1, #8]
 8003930:	f1b8 0f00 	cmp.w	r8, #0
 8003934:	dde9      	ble.n	800390a <__sflush_r+0xae>
 8003936:	6a21      	ldr	r1, [r4, #32]
 8003938:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800393a:	4643      	mov	r3, r8
 800393c:	463a      	mov	r2, r7
 800393e:	4628      	mov	r0, r5
 8003940:	47b0      	blx	r6
 8003942:	2800      	cmp	r0, #0
 8003944:	dc08      	bgt.n	8003958 <__sflush_r+0xfc>
 8003946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800394a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800394e:	81a3      	strh	r3, [r4, #12]
 8003950:	f04f 30ff 	mov.w	r0, #4294967295
 8003954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003958:	4407      	add	r7, r0
 800395a:	eba8 0800 	sub.w	r8, r8, r0
 800395e:	e7e7      	b.n	8003930 <__sflush_r+0xd4>
 8003960:	dfbffffe 	.word	0xdfbffffe

08003964 <_fflush_r>:
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	690b      	ldr	r3, [r1, #16]
 8003968:	4605      	mov	r5, r0
 800396a:	460c      	mov	r4, r1
 800396c:	b913      	cbnz	r3, 8003974 <_fflush_r+0x10>
 800396e:	2500      	movs	r5, #0
 8003970:	4628      	mov	r0, r5
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	b118      	cbz	r0, 800397e <_fflush_r+0x1a>
 8003976:	6a03      	ldr	r3, [r0, #32]
 8003978:	b90b      	cbnz	r3, 800397e <_fflush_r+0x1a>
 800397a:	f7ff fa9f 	bl	8002ebc <__sinit>
 800397e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f3      	beq.n	800396e <_fflush_r+0xa>
 8003986:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003988:	07d0      	lsls	r0, r2, #31
 800398a:	d404      	bmi.n	8003996 <_fflush_r+0x32>
 800398c:	0599      	lsls	r1, r3, #22
 800398e:	d402      	bmi.n	8003996 <_fflush_r+0x32>
 8003990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003992:	f7ff fb98 	bl	80030c6 <__retarget_lock_acquire_recursive>
 8003996:	4628      	mov	r0, r5
 8003998:	4621      	mov	r1, r4
 800399a:	f7ff ff5f 	bl	800385c <__sflush_r>
 800399e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039a0:	07da      	lsls	r2, r3, #31
 80039a2:	4605      	mov	r5, r0
 80039a4:	d4e4      	bmi.n	8003970 <_fflush_r+0xc>
 80039a6:	89a3      	ldrh	r3, [r4, #12]
 80039a8:	059b      	lsls	r3, r3, #22
 80039aa:	d4e1      	bmi.n	8003970 <_fflush_r+0xc>
 80039ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039ae:	f7ff fb8b 	bl	80030c8 <__retarget_lock_release_recursive>
 80039b2:	e7dd      	b.n	8003970 <_fflush_r+0xc>

080039b4 <__swbuf_r>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	460e      	mov	r6, r1
 80039b8:	4614      	mov	r4, r2
 80039ba:	4605      	mov	r5, r0
 80039bc:	b118      	cbz	r0, 80039c6 <__swbuf_r+0x12>
 80039be:	6a03      	ldr	r3, [r0, #32]
 80039c0:	b90b      	cbnz	r3, 80039c6 <__swbuf_r+0x12>
 80039c2:	f7ff fa7b 	bl	8002ebc <__sinit>
 80039c6:	69a3      	ldr	r3, [r4, #24]
 80039c8:	60a3      	str	r3, [r4, #8]
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	071a      	lsls	r2, r3, #28
 80039ce:	d501      	bpl.n	80039d4 <__swbuf_r+0x20>
 80039d0:	6923      	ldr	r3, [r4, #16]
 80039d2:	b943      	cbnz	r3, 80039e6 <__swbuf_r+0x32>
 80039d4:	4621      	mov	r1, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	f000 f82a 	bl	8003a30 <__swsetup_r>
 80039dc:	b118      	cbz	r0, 80039e6 <__swbuf_r+0x32>
 80039de:	f04f 37ff 	mov.w	r7, #4294967295
 80039e2:	4638      	mov	r0, r7
 80039e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	6922      	ldr	r2, [r4, #16]
 80039ea:	1a98      	subs	r0, r3, r2
 80039ec:	6963      	ldr	r3, [r4, #20]
 80039ee:	b2f6      	uxtb	r6, r6
 80039f0:	4283      	cmp	r3, r0
 80039f2:	4637      	mov	r7, r6
 80039f4:	dc05      	bgt.n	8003a02 <__swbuf_r+0x4e>
 80039f6:	4621      	mov	r1, r4
 80039f8:	4628      	mov	r0, r5
 80039fa:	f7ff ffb3 	bl	8003964 <_fflush_r>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d1ed      	bne.n	80039de <__swbuf_r+0x2a>
 8003a02:	68a3      	ldr	r3, [r4, #8]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	60a3      	str	r3, [r4, #8]
 8003a08:	6823      	ldr	r3, [r4, #0]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	6022      	str	r2, [r4, #0]
 8003a0e:	701e      	strb	r6, [r3, #0]
 8003a10:	6962      	ldr	r2, [r4, #20]
 8003a12:	1c43      	adds	r3, r0, #1
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d004      	beq.n	8003a22 <__swbuf_r+0x6e>
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	07db      	lsls	r3, r3, #31
 8003a1c:	d5e1      	bpl.n	80039e2 <__swbuf_r+0x2e>
 8003a1e:	2e0a      	cmp	r6, #10
 8003a20:	d1df      	bne.n	80039e2 <__swbuf_r+0x2e>
 8003a22:	4621      	mov	r1, r4
 8003a24:	4628      	mov	r0, r5
 8003a26:	f7ff ff9d 	bl	8003964 <_fflush_r>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d0d9      	beq.n	80039e2 <__swbuf_r+0x2e>
 8003a2e:	e7d6      	b.n	80039de <__swbuf_r+0x2a>

08003a30 <__swsetup_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <__swsetup_r+0xa8>)
 8003a34:	4605      	mov	r5, r0
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	460c      	mov	r4, r1
 8003a3a:	b118      	cbz	r0, 8003a44 <__swsetup_r+0x14>
 8003a3c:	6a03      	ldr	r3, [r0, #32]
 8003a3e:	b90b      	cbnz	r3, 8003a44 <__swsetup_r+0x14>
 8003a40:	f7ff fa3c 	bl	8002ebc <__sinit>
 8003a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a48:	0719      	lsls	r1, r3, #28
 8003a4a:	d422      	bmi.n	8003a92 <__swsetup_r+0x62>
 8003a4c:	06da      	lsls	r2, r3, #27
 8003a4e:	d407      	bmi.n	8003a60 <__swsetup_r+0x30>
 8003a50:	2209      	movs	r2, #9
 8003a52:	602a      	str	r2, [r5, #0]
 8003a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a58:	81a3      	strh	r3, [r4, #12]
 8003a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5e:	e033      	b.n	8003ac8 <__swsetup_r+0x98>
 8003a60:	0758      	lsls	r0, r3, #29
 8003a62:	d512      	bpl.n	8003a8a <__swsetup_r+0x5a>
 8003a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a66:	b141      	cbz	r1, 8003a7a <__swsetup_r+0x4a>
 8003a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a6c:	4299      	cmp	r1, r3
 8003a6e:	d002      	beq.n	8003a76 <__swsetup_r+0x46>
 8003a70:	4628      	mov	r0, r5
 8003a72:	f7ff fb2b 	bl	80030cc <_free_r>
 8003a76:	2300      	movs	r3, #0
 8003a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a80:	81a3      	strh	r3, [r4, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	6063      	str	r3, [r4, #4]
 8003a86:	6923      	ldr	r3, [r4, #16]
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	89a3      	ldrh	r3, [r4, #12]
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	81a3      	strh	r3, [r4, #12]
 8003a92:	6923      	ldr	r3, [r4, #16]
 8003a94:	b94b      	cbnz	r3, 8003aaa <__swsetup_r+0x7a>
 8003a96:	89a3      	ldrh	r3, [r4, #12]
 8003a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa0:	d003      	beq.n	8003aaa <__swsetup_r+0x7a>
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	f000 f84f 	bl	8003b48 <__smakebuf_r>
 8003aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aae:	f013 0201 	ands.w	r2, r3, #1
 8003ab2:	d00a      	beq.n	8003aca <__swsetup_r+0x9a>
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	60a2      	str	r2, [r4, #8]
 8003ab8:	6962      	ldr	r2, [r4, #20]
 8003aba:	4252      	negs	r2, r2
 8003abc:	61a2      	str	r2, [r4, #24]
 8003abe:	6922      	ldr	r2, [r4, #16]
 8003ac0:	b942      	cbnz	r2, 8003ad4 <__swsetup_r+0xa4>
 8003ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003ac6:	d1c5      	bne.n	8003a54 <__swsetup_r+0x24>
 8003ac8:	bd38      	pop	{r3, r4, r5, pc}
 8003aca:	0799      	lsls	r1, r3, #30
 8003acc:	bf58      	it	pl
 8003ace:	6962      	ldrpl	r2, [r4, #20]
 8003ad0:	60a2      	str	r2, [r4, #8]
 8003ad2:	e7f4      	b.n	8003abe <__swsetup_r+0x8e>
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	e7f7      	b.n	8003ac8 <__swsetup_r+0x98>
 8003ad8:	20000020 	.word	0x20000020

08003adc <_sbrk_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d06      	ldr	r5, [pc, #24]	@ (8003af8 <_sbrk_r+0x1c>)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	602b      	str	r3, [r5, #0]
 8003ae8:	f7fd f9ba 	bl	8000e60 <_sbrk>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_sbrk_r+0x1a>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_sbrk_r+0x1a>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	20000318 	.word	0x20000318

08003afc <__swhatbuf_r>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	460c      	mov	r4, r1
 8003b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b04:	2900      	cmp	r1, #0
 8003b06:	b096      	sub	sp, #88	@ 0x58
 8003b08:	4615      	mov	r5, r2
 8003b0a:	461e      	mov	r6, r3
 8003b0c:	da0d      	bge.n	8003b2a <__swhatbuf_r+0x2e>
 8003b0e:	89a3      	ldrh	r3, [r4, #12]
 8003b10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b14:	f04f 0100 	mov.w	r1, #0
 8003b18:	bf14      	ite	ne
 8003b1a:	2340      	movne	r3, #64	@ 0x40
 8003b1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b20:	2000      	movs	r0, #0
 8003b22:	6031      	str	r1, [r6, #0]
 8003b24:	602b      	str	r3, [r5, #0]
 8003b26:	b016      	add	sp, #88	@ 0x58
 8003b28:	bd70      	pop	{r4, r5, r6, pc}
 8003b2a:	466a      	mov	r2, sp
 8003b2c:	f000 f848 	bl	8003bc0 <_fstat_r>
 8003b30:	2800      	cmp	r0, #0
 8003b32:	dbec      	blt.n	8003b0e <__swhatbuf_r+0x12>
 8003b34:	9901      	ldr	r1, [sp, #4]
 8003b36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b3e:	4259      	negs	r1, r3
 8003b40:	4159      	adcs	r1, r3
 8003b42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b46:	e7eb      	b.n	8003b20 <__swhatbuf_r+0x24>

08003b48 <__smakebuf_r>:
 8003b48:	898b      	ldrh	r3, [r1, #12]
 8003b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b4c:	079d      	lsls	r5, r3, #30
 8003b4e:	4606      	mov	r6, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	d507      	bpl.n	8003b64 <__smakebuf_r+0x1c>
 8003b54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b58:	6023      	str	r3, [r4, #0]
 8003b5a:	6123      	str	r3, [r4, #16]
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	6163      	str	r3, [r4, #20]
 8003b60:	b003      	add	sp, #12
 8003b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b64:	ab01      	add	r3, sp, #4
 8003b66:	466a      	mov	r2, sp
 8003b68:	f7ff ffc8 	bl	8003afc <__swhatbuf_r>
 8003b6c:	9f00      	ldr	r7, [sp, #0]
 8003b6e:	4605      	mov	r5, r0
 8003b70:	4639      	mov	r1, r7
 8003b72:	4630      	mov	r0, r6
 8003b74:	f7ff fb16 	bl	80031a4 <_malloc_r>
 8003b78:	b948      	cbnz	r0, 8003b8e <__smakebuf_r+0x46>
 8003b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b7e:	059a      	lsls	r2, r3, #22
 8003b80:	d4ee      	bmi.n	8003b60 <__smakebuf_r+0x18>
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	f043 0302 	orr.w	r3, r3, #2
 8003b8a:	81a3      	strh	r3, [r4, #12]
 8003b8c:	e7e2      	b.n	8003b54 <__smakebuf_r+0xc>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	6020      	str	r0, [r4, #0]
 8003b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b9e:	b15b      	cbz	r3, 8003bb8 <__smakebuf_r+0x70>
 8003ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f000 f81d 	bl	8003be4 <_isatty_r>
 8003baa:	b128      	cbz	r0, 8003bb8 <__smakebuf_r+0x70>
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	f023 0303 	bic.w	r3, r3, #3
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	431d      	orrs	r5, r3
 8003bbc:	81a5      	strh	r5, [r4, #12]
 8003bbe:	e7cf      	b.n	8003b60 <__smakebuf_r+0x18>

08003bc0 <_fstat_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4d07      	ldr	r5, [pc, #28]	@ (8003be0 <_fstat_r+0x20>)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	4608      	mov	r0, r1
 8003bca:	4611      	mov	r1, r2
 8003bcc:	602b      	str	r3, [r5, #0]
 8003bce:	f7fe ff68 	bl	8002aa2 <_fstat>
 8003bd2:	1c43      	adds	r3, r0, #1
 8003bd4:	d102      	bne.n	8003bdc <_fstat_r+0x1c>
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	b103      	cbz	r3, 8003bdc <_fstat_r+0x1c>
 8003bda:	6023      	str	r3, [r4, #0]
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
 8003bde:	bf00      	nop
 8003be0:	20000318 	.word	0x20000318

08003be4 <_isatty_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	4d06      	ldr	r5, [pc, #24]	@ (8003c00 <_isatty_r+0x1c>)
 8003be8:	2300      	movs	r3, #0
 8003bea:	4604      	mov	r4, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	f7ff f8ba 	bl	8002d68 <_isatty>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_isatty_r+0x1a>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_isatty_r+0x1a>
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	20000318 	.word	0x20000318

08003c04 <_init>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	bf00      	nop
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr

08003c10 <_fini>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr
