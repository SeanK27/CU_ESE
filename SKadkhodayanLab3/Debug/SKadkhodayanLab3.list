
SKadkhodayanLab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006d8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000884  0800088c  0000188c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000884  08000884  0000188c  2**0
                  CONTENTS
  4 .ARM          00000000  08000884  08000884  0000188c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000884  0800088c  0000188c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000884  08000884  00001884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000888  08000888  00001888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000188c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000188c  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001261  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000664  00000000  00000000  00002b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00003180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000123  00000000  00000000  00003330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000162d  00000000  00000000  00003453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fab  00000000  00000000  00004a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004a8b  00000000  00000000  00006a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000b4b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000494  00000000  00000000  0000b4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0000b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800086c 	.word	0x0800086c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	0800086c 	.word	0x0800086c

080001ec <greenLEDInit>:
#include "ApplicationCode.h"

// Create name array for AppDelay
uint32_t nameArray[NAMELENGTH] = {'S', 'E', 'A', 'N'};

void greenLEDInit() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

    // Initialize the green LED
    LED_Init(LED_GREEN_PIN);
 80001f0:	200d      	movs	r0, #13
 80001f2:	f000 fa7f 	bl	80006f4 <LED_Init>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}

080001fa <redLEDInit>:

void redLEDInit() {
 80001fa:	b580      	push	{r7, lr}
 80001fc:	af00      	add	r7, sp, #0

    // Initialize the red LED
    LED_Init(LED_RED_PIN);
 80001fe:	200e      	movs	r0, #14
 8000200:	f000 fa78 	bl	80006f4 <LED_Init>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}

08000208 <activateGreenLED>:

    // Toggle the red LED
    ToggleLED(LED_RED_PIN);
}

void activateGreenLED() {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0

    // Activate the green LED
    GPIO_WriteToOutputPin(GPIOG, LED_GREEN_PIN, SET);
 800020c:	2201      	movs	r2, #1
 800020e:	210d      	movs	r1, #13
 8000210:	4802      	ldr	r0, [pc, #8]	@ (800021c <activateGreenLED+0x14>)
 8000212:	f000 f8fb 	bl	800040c <GPIO_WriteToOutputPin>
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021800 	.word	0x40021800

08000220 <deactivateGreenLED>:

    // Activate the red LED
    GPIO_WriteToOutputPin(GPIOG, LED_RED_PIN, SET);
}

void deactivateGreenLED() {
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

    // Deactivate the green LED
    GPIO_WriteToOutputPin(GPIOG, LED_GREEN_PIN, RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	210d      	movs	r1, #13
 8000228:	4802      	ldr	r0, [pc, #8]	@ (8000234 <deactivateGreenLED+0x14>)
 800022a:	f000 f8ef 	bl	800040c <GPIO_WriteToOutputPin>
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	40021800 	.word	0x40021800

08000238 <deactivateRedLED>:

void deactivateRedLED() {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0

    // Deactivate the red LED
    GPIO_WriteToOutputPin(GPIOG, LED_RED_PIN, RESET);
 800023c:	2200      	movs	r2, #0
 800023e:	210e      	movs	r1, #14
 8000240:	4802      	ldr	r0, [pc, #8]	@ (800024c <deactivateRedLED+0x14>)
 8000242:	f000 f8e3 	bl	800040c <GPIO_WriteToOutputPin>
}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40021800 	.word	0x40021800

08000250 <InitializeUserButton>:

void InitializeUserButton() {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    
    // Initialize the user button
	User_Button_Init();
 8000254:	f000 f86e 	bl	8000334 <User_Button_Init>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}

0800025c <executeButtonPollingRoutine>:

void executeButtonPollingRoutine() {
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0

    // Check if the user button is pressed
    if (User_Button_Is_Pressed() == true) {
 8000260:	f000 f884 	bl	800036c <User_Button_Is_Pressed>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d002      	beq.n	8000270 <executeButtonPollingRoutine+0x14>

        // Turn on the green LED
        activateGreenLED();
 800026a:	f7ff ffcd 	bl	8000208 <activateGreenLED>
    else {
            
        // Turn off the green LED
        deactivateGreenLED();
    }
}
 800026e:	e001      	b.n	8000274 <executeButtonPollingRoutine+0x18>
        deactivateGreenLED();
 8000270:	f7ff ffd6 	bl	8000220 <deactivateGreenLED>
}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}

08000278 <AppDelay>:

void AppDelay(uint32_t time) {
 8000278:	b480      	push	{r7}
 800027a:	b087      	sub	sp, #28
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]

	// Create two arrays to store the name
	char sean[NAMELENGTH] = {'S', 'E', 'A', 'N'};
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <AppDelay+0x54>)
 8000282:	60fb      	str	r3, [r7, #12]
	[[maybe_unused]] char destinationArray[NAMELENGTH];

	// Iterate through the array to create a crude delay function
	for (int i = 0; i < time; i++) {
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	e016      	b.n	80002b8 <AppDelay+0x40>

		for (int j = 0; j < NAMELENGTH; j++) {
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
 800028e:	e00d      	b.n	80002ac <AppDelay+0x34>

			destinationArray[j] = sean[j];
 8000290:	f107 020c 	add.w	r2, r7, #12
 8000294:	693b      	ldr	r3, [r7, #16]
 8000296:	4413      	add	r3, r2
 8000298:	7819      	ldrb	r1, [r3, #0]
 800029a:	f107 0208 	add.w	r2, r7, #8
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	4413      	add	r3, r2
 80002a2:	460a      	mov	r2, r1
 80002a4:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < NAMELENGTH; j++) {
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	3301      	adds	r3, #1
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	2b03      	cmp	r3, #3
 80002b0:	ddee      	ble.n	8000290 <AppDelay+0x18>
	for (int i = 0; i < time; i++) {
 80002b2:	697b      	ldr	r3, [r7, #20]
 80002b4:	3301      	adds	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d8e4      	bhi.n	800028a <AppDelay+0x12>
		}
	}
}
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	371c      	adds	r7, #28
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	4e414553 	.word	0x4e414553

080002d0 <applicationInit>:

void applicationInit() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0

    // Initialize the GPIO clock
	GPIO_ClockControl(GPIOG, ENABLE);
 80002d4:	2101      	movs	r1, #1
 80002d6:	480f      	ldr	r0, [pc, #60]	@ (8000314 <applicationInit+0x44>)
 80002d8:	f000 f858 	bl	800038c <GPIO_ClockControl>

    // Initialize the GPIOA clock
	User_Button_Enable_Clock();
 80002dc:	f000 f81c 	bl	8000318 <User_Button_Enable_Clock>

    // Initialize the user button
    InitializeUserButton();
 80002e0:	f7ff ffb6 	bl	8000250 <InitializeUserButton>

    // Initialize the green LED
    greenLEDInit();
 80002e4:	f7ff ff82 	bl	80001ec <greenLEDInit>

    // Initialize the red LED
    redLEDInit();
 80002e8:	f7ff ff87 	bl	80001fa <redLEDInit>

    // Deactivate the red LED
    deactivateRedLED();
 80002ec:	f7ff ffa4 	bl	8000238 <deactivateRedLED>

    // Deactivate the green LED
    deactivateGreenLED();
 80002f0:	f7ff ff96 	bl	8000220 <deactivateGreenLED>

    // Compiler flags to only compile polling code if the flag is 0
    #if USE_INTERRUPT_FOR_BUTTON == 0

        // Initialize the user button as a polling routine
        executeButtonPollingRoutine();
 80002f4:	f7ff ffb2 	bl	800025c <executeButtonPollingRoutine>

        // Add button polling event to scheduler
        addSchedulerEvent(POLL_BUTTON_EVENT);
 80002f8:	2008      	movs	r0, #8
 80002fa:	f000 fa31 	bl	8000760 <addSchedulerEvent>

    #endif

    // Add the scheduler event to toggle the red LED
    addSchedulerEvent(RED_TOGGLE_EVENT);
 80002fe:	2001      	movs	r0, #1
 8000300:	f000 fa2e 	bl	8000760 <addSchedulerEvent>

    // Add the scheduler event to delay
    addSchedulerEvent(DELAY_EVENT);
 8000304:	2002      	movs	r0, #2
 8000306:	f000 fa2b 	bl	8000760 <addSchedulerEvent>

    // Add the scheduler event to toggle the green LED
    addSchedulerEvent(GREEN_TOGGLE_EVENT);
 800030a:	2004      	movs	r0, #4
 800030c:	f000 fa28 	bl	8000760 <addSchedulerEvent>

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40021800 	.word	0x40021800

08000318 <User_Button_Enable_Clock>:
#include "GPIO_Driver.h"
#include <stdbool.h>

GPIO_PinConfig_t GPIOConfig = {0};

void User_Button_Enable_Clock() {
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
    // Enable the clock for the user button
    RCC->AHB1ENR |= (1 << USER_BUTTON_PORT);
 800031c:	4b04      	ldr	r3, [pc, #16]	@ (8000330 <User_Button_Enable_Clock+0x18>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000320:	4a03      	ldr	r2, [pc, #12]	@ (8000330 <User_Button_Enable_Clock+0x18>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40023800 	.word	0x40023800

08000334 <User_Button_Init>:

void User_Button_Init() {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0

    // Instantiate a GPIO_PinConfig_t struct
    GPIOConfig.PinNumber = USER_BUTTON_PIN;
 8000338:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <User_Button_Init+0x30>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
    GPIOConfig.PinMode = GPIO_PinMode_Input;
 800033e:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <User_Button_Init+0x30>)
 8000340:	2200      	movs	r2, #0
 8000342:	705a      	strb	r2, [r3, #1]
    GPIOConfig.PinSpeed = GPIO_Speed_Medium;
 8000344:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <User_Button_Init+0x30>)
 8000346:	2201      	movs	r2, #1
 8000348:	70da      	strb	r2, [r3, #3]
    GPIOConfig.PinPuPdControl = GPIO_PUPDR_PD;
 800034a:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <User_Button_Init+0x30>)
 800034c:	220a      	movs	r2, #10
 800034e:	711a      	strb	r2, [r3, #4]

    // Enable the clock for the user button
    User_Button_Enable_Clock();
 8000350:	f7ff ffe2 	bl	8000318 <User_Button_Enable_Clock>

    // Initialize the GPIO Pin
    GPIO_Init(GPIOA, GPIOConfig);
 8000354:	4b03      	ldr	r3, [pc, #12]	@ (8000364 <User_Button_Init+0x30>)
 8000356:	e893 0006 	ldmia.w	r3, {r1, r2}
 800035a:	4803      	ldr	r0, [pc, #12]	@ (8000368 <User_Button_Init+0x34>)
 800035c:	f000 f87c 	bl	8000458 <GPIO_Init>
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	2000001c 	.word	0x2000001c
 8000368:	40020000 	.word	0x40020000

0800036c <User_Button_Is_Pressed>:

bool User_Button_Is_Pressed() {
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

    // Check if the button is pressed
    if (GPIO_ReadFromInputPin(GPIOA, USER_BUTTON_PIN) == USER_BUTTON_PRESSED) {
 8000370:	2100      	movs	r1, #0
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <User_Button_Is_Pressed+0x1c>)
 8000374:	f000 f98e 	bl	8000694 <GPIO_ReadFromInputPin>
 8000378:	4603      	mov	r3, r0
 800037a:	2b01      	cmp	r3, #1
 800037c:	d101      	bne.n	8000382 <User_Button_Is_Pressed+0x16>
        return true;
 800037e:	2301      	movs	r3, #1
 8000380:	e000      	b.n	8000384 <User_Button_Is_Pressed+0x18>
    }
    else {
        return false;
 8000382:	2300      	movs	r3, #0
    }
}
 8000384:	4618      	mov	r0, r3
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40020000 	.word	0x40020000

0800038c <GPIO_ClockControl>:
 *      Author: seank
 */

#include "GPIO_Driver.h"

void GPIO_ClockControl(GPIO_RegDef_t * GPIOPort, uint8_t PinStatus) {
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	70fb      	strb	r3, [r7, #3]

    // Enable the clock for the GPIO port
    if (PinStatus == ENABLE) {
 8000398:	78fb      	ldrb	r3, [r7, #3]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d113      	bne.n	80003c6 <GPIO_ClockControl+0x3a>
        
        // Check the GPIO port and enable the clock
        if (GPIOPort == GPIOA) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a17      	ldr	r2, [pc, #92]	@ (8000400 <GPIO_ClockControl+0x74>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d105      	bne.n	80003b2 <GPIO_ClockControl+0x26>
            ENABLE_AHB1ENR_CLOCK(GPIOA_AHB1ENR_BIT);
 80003a6:	4b17      	ldr	r3, [pc, #92]	@ (8000404 <GPIO_ClockControl+0x78>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a16      	ldr	r2, [pc, #88]	@ (8000404 <GPIO_ClockControl+0x78>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
        }
        
        if (GPIOPort == GPIOG) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a14      	ldr	r2, [pc, #80]	@ (8000408 <GPIO_ClockControl+0x7c>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d105      	bne.n	80003c6 <GPIO_ClockControl+0x3a>
            ENABLE_AHB1ENR_CLOCK(GPIOG_AHB1ENR_BIT);
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <GPIO_ClockControl+0x78>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003be:	4a11      	ldr	r2, [pc, #68]	@ (8000404 <GPIO_ClockControl+0x78>)
 80003c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003c4:	6313      	str	r3, [r2, #48]	@ 0x30
        }
    }

    // Disable the clock for the GPIO port
    if (PinStatus == DISABLE) {
 80003c6:	78fb      	ldrb	r3, [r7, #3]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d113      	bne.n	80003f4 <GPIO_ClockControl+0x68>

        // Check the GPIO port and disable the clock
        if (GPIOPort == GPIOA) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000400 <GPIO_ClockControl+0x74>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d105      	bne.n	80003e0 <GPIO_ClockControl+0x54>
            DISABLE_AHB1ENR_CLOCK(GPIOA_AHB1ENR_BIT);
 80003d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <GPIO_ClockControl+0x78>)
 80003d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000404 <GPIO_ClockControl+0x78>)
 80003da:	f023 0301 	bic.w	r3, r3, #1
 80003de:	6313      	str	r3, [r2, #48]	@ 0x30
        }

        if (GPIOPort == GPIOG) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a09      	ldr	r2, [pc, #36]	@ (8000408 <GPIO_ClockControl+0x7c>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d105      	bne.n	80003f4 <GPIO_ClockControl+0x68>
            DISABLE_AHB1ENR_CLOCK(GPIOG_AHB1ENR_BIT);
 80003e8:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <GPIO_ClockControl+0x78>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ec:	4a05      	ldr	r2, [pc, #20]	@ (8000404 <GPIO_ClockControl+0x78>)
 80003ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80003f2:	6313      	str	r3, [r2, #48]	@ 0x30
        }
    }
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40020000 	.word	0x40020000
 8000404:	40023800 	.word	0x40023800
 8000408:	40021800 	.word	0x40021800

0800040c <GPIO_WriteToOutputPin>:

void GPIO_WriteToOutputPin(GPIO_RegDef_t * GPIOPort, uint8_t WritePin, uint8_t WriteVal) {
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	70fb      	strb	r3, [r7, #3]
 8000418:	4613      	mov	r3, r2
 800041a:	70bb      	strb	r3, [r7, #2]

	// Check the write value
	if (WriteVal == 1) {
 800041c:	78bb      	ldrb	r3, [r7, #2]
 800041e:	2b01      	cmp	r3, #1
 8000420:	d108      	bne.n	8000434 <GPIO_WriteToOutputPin+0x28>
		GPIOPort->ODR |= (1 << WritePin); // Write 1 to the ODR register and shift to the proper pin
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	78fa      	ldrb	r2, [r7, #3]
 8000428:	2101      	movs	r1, #1
 800042a:	fa01 f202 	lsl.w	r2, r1, r2
 800042e:	431a      	orrs	r2, r3
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	615a      	str	r2, [r3, #20]
	}
	if (WriteVal == 0) {
 8000434:	78bb      	ldrb	r3, [r7, #2]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d109      	bne.n	800044e <GPIO_WriteToOutputPin+0x42>
		GPIOPort->ODR &= ~(1 << WritePin); // Write 0 to the ODR register and shift to the proper pin
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	78fa      	ldrb	r2, [r7, #3]
 8000440:	2101      	movs	r1, #1
 8000442:	fa01 f202 	lsl.w	r2, r1, r2
 8000446:	43d2      	mvns	r2, r2
 8000448:	401a      	ands	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	615a      	str	r2, [r3, #20]
	}
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <GPIO_Init>:

	// XOR the corresponding bit, which flips it
	GPIOPort->ODR ^= (1 << TogglePin);
}

void GPIO_Init(GPIO_RegDef_t * GPIOPort, GPIO_PinConfig_t PinConfig) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b08a      	sub	sp, #40	@ 0x28
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	e883 0006 	stmia.w	r3, {r1, r2}
	///////////////////////////////////MODER Config///////////////////////
	// Create temporary variable
	uint32_t temp;

	// Configure port mode
	temp = PinConfig.PinMode << (2 * PinConfig.PinNumber);
 8000466:	797b      	ldrb	r3, [r7, #5]
 8000468:	461a      	mov	r2, r3
 800046a:	793b      	ldrb	r3, [r7, #4]
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
 8000472:	627b      	str	r3, [r7, #36]	@ 0x24

	// Clear bits with ~(b'11) at corresponding pin
    GPIOPort->MODER &= ~(0x3 << (2 * PinConfig.PinNumber));
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	793a      	ldrb	r2, [r7, #4]
 800047a:	0052      	lsls	r2, r2, #1
 800047c:	2103      	movs	r1, #3
 800047e:	fa01 f202 	lsl.w	r2, r1, r2
 8000482:	43d2      	mvns	r2, r2
 8000484:	401a      	ands	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	601a      	str	r2, [r3, #0]

    // Set appropriate bits with the temp register
    GPIOPort->MODER |= temp;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000490:	431a      	orrs	r2, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	601a      	str	r2, [r3, #0]
    //////////////////////////////////////////////////////////////////////

    ///////////////////////////////Interrupt Config///////////////////////

    if (PinConfig.PinInterruptMode == GPIO_PinInterrupt_FallingEdge) {
 8000496:	7abb      	ldrb	r3, [r7, #10]
 8000498:	2b0a      	cmp	r3, #10
 800049a:	d114      	bne.n	80004c6 <GPIO_Init+0x6e>

        // Clear the bit in the FTSR register
        EXTI->FTSR |= (1 << PinConfig.PinNumber);
 800049c:	4b7a      	ldr	r3, [pc, #488]	@ (8000688 <GPIO_Init+0x230>)
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	793a      	ldrb	r2, [r7, #4]
 80004a2:	4611      	mov	r1, r2
 80004a4:	2201      	movs	r2, #1
 80004a6:	408a      	lsls	r2, r1
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a77      	ldr	r2, [pc, #476]	@ (8000688 <GPIO_Init+0x230>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	60d3      	str	r3, [r2, #12]

        // Set the bit in the FTSR register
        EXTI->RTSR &= ~(1 << PinConfig.PinNumber);
 80004b0:	4b75      	ldr	r3, [pc, #468]	@ (8000688 <GPIO_Init+0x230>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	793a      	ldrb	r2, [r7, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	43d2      	mvns	r2, r2
 80004be:	4611      	mov	r1, r2
 80004c0:	4a71      	ldr	r2, [pc, #452]	@ (8000688 <GPIO_Init+0x230>)
 80004c2:	400b      	ands	r3, r1
 80004c4:	6093      	str	r3, [r2, #8]
    }

    if (PinConfig.PinInterruptMode == GPIO_PinInterrupt_RisingEdge) {
 80004c6:	7abb      	ldrb	r3, [r7, #10]
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d114      	bne.n	80004f6 <GPIO_Init+0x9e>

        // Clear the bit in the RTSR register
        EXTI->RTSR |= (1 << PinConfig.PinNumber);
 80004cc:	4b6e      	ldr	r3, [pc, #440]	@ (8000688 <GPIO_Init+0x230>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	793a      	ldrb	r2, [r7, #4]
 80004d2:	4611      	mov	r1, r2
 80004d4:	2201      	movs	r2, #1
 80004d6:	408a      	lsls	r2, r1
 80004d8:	4611      	mov	r1, r2
 80004da:	4a6b      	ldr	r2, [pc, #428]	@ (8000688 <GPIO_Init+0x230>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6093      	str	r3, [r2, #8]

        // Set the bit in the RTSR register
        EXTI->FTSR &= ~(1 << PinConfig.PinNumber);
 80004e0:	4b69      	ldr	r3, [pc, #420]	@ (8000688 <GPIO_Init+0x230>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	793a      	ldrb	r2, [r7, #4]
 80004e6:	4611      	mov	r1, r2
 80004e8:	2201      	movs	r2, #1
 80004ea:	408a      	lsls	r2, r1
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	4611      	mov	r1, r2
 80004f0:	4a65      	ldr	r2, [pc, #404]	@ (8000688 <GPIO_Init+0x230>)
 80004f2:	400b      	ands	r3, r1
 80004f4:	60d3      	str	r3, [r2, #12]
    }

    if (PinConfig.PinInterruptMode == GPIO_PinInterrupt_RisingFallingEdge) {
 80004f6:	7abb      	ldrb	r3, [r7, #10]
 80004f8:	2b0b      	cmp	r3, #11
 80004fa:	d113      	bne.n	8000524 <GPIO_Init+0xcc>

        // Set the bit in the RTSR register
        EXTI->RTSR |= (1 << PinConfig.PinNumber);
 80004fc:	4b62      	ldr	r3, [pc, #392]	@ (8000688 <GPIO_Init+0x230>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	793a      	ldrb	r2, [r7, #4]
 8000502:	4611      	mov	r1, r2
 8000504:	2201      	movs	r2, #1
 8000506:	408a      	lsls	r2, r1
 8000508:	4611      	mov	r1, r2
 800050a:	4a5f      	ldr	r2, [pc, #380]	@ (8000688 <GPIO_Init+0x230>)
 800050c:	430b      	orrs	r3, r1
 800050e:	6093      	str	r3, [r2, #8]

        // Set the bit in the FTSR register
        EXTI->FTSR |= (1 << PinConfig.PinNumber);
 8000510:	4b5d      	ldr	r3, [pc, #372]	@ (8000688 <GPIO_Init+0x230>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	793a      	ldrb	r2, [r7, #4]
 8000516:	4611      	mov	r1, r2
 8000518:	2201      	movs	r2, #1
 800051a:	408a      	lsls	r2, r1
 800051c:	4611      	mov	r1, r2
 800051e:	4a5a      	ldr	r2, [pc, #360]	@ (8000688 <GPIO_Init+0x230>)
 8000520:	430b      	orrs	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]
    }

    uint8_t tempPin = PinConfig.PinNumber / 4;
 8000524:	793b      	ldrb	r3, [r7, #4]
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t tempPinPos = PinConfig.PinNumber % 4;
 800052c:	793b      	ldrb	r3, [r7, #4]
 800052e:	f003 0303 	and.w	r3, r3, #3
 8000532:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    uint16_t tempPort = GPIO_ReturnPortNumber(GPIOPort);
 8000536:	68f8      	ldr	r0, [r7, #12]
 8000538:	f000 f8c2 	bl	80006c0 <GPIO_ReturnPortNumber>
 800053c:	4603      	mov	r3, r0
 800053e:	843b      	strh	r3, [r7, #32]

    // Enable the clock for the SYSCFG peripheral (must be enabled to configure EXTI)
    ENABLE_SYSCFG_CLOCK();
 8000540:	4b52      	ldr	r3, [pc, #328]	@ (800068c <GPIO_Init+0x234>)
 8000542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000544:	4a51      	ldr	r2, [pc, #324]	@ (800068c <GPIO_Init+0x234>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800054a:	6453      	str	r3, [r2, #68]	@ 0x44

    // 
    temp = tempPort << (4 * tempPinPos);        // Each pin is 4 bits, so shift the port number to the correct location
 800054c:	8c3a      	ldrh	r2, [r7, #32]
 800054e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	fa02 f303 	lsl.w	r3, r2, r3
 8000558:	627b      	str	r3, [r7, #36]	@ 0x24
    // Clear it first
    SYSCFG->EXTICR[tempPin] |= temp;            // Set the SYSCFG register to the proper port (maps the gpio ports to the EXTI lines)
 800055a:	4a4d      	ldr	r2, [pc, #308]	@ (8000690 <GPIO_Init+0x238>)
 800055c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000560:	3302      	adds	r3, #2
 8000562:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000566:	484a      	ldr	r0, [pc, #296]	@ (8000690 <GPIO_Init+0x238>)
 8000568:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800056c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800056e:	430a      	orrs	r2, r1
 8000570:	3302      	adds	r3, #2
 8000572:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    EXTI->IMR |= (1 << PinConfig.PinNumber);    // Interrupt mask register set to enable the interrupt to trigger
 8000576:	4b44      	ldr	r3, [pc, #272]	@ (8000688 <GPIO_Init+0x230>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	793a      	ldrb	r2, [r7, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a40      	ldr	r2, [pc, #256]	@ (8000688 <GPIO_Init+0x230>)
 8000586:	430b      	orrs	r3, r1
 8000588:	6013      	str	r3, [r2, #0]

    ///////////////////////////////////SPEED Config///////////////////////

   	// Configure port speed
   	temp = PinConfig.PinSpeed << (2 * PinConfig.PinNumber);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	461a      	mov	r2, r3
 800058e:	793b      	ldrb	r3, [r7, #4]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	fa02 f303 	lsl.w	r3, r2, r3
 8000596:	627b      	str	r3, [r7, #36]	@ 0x24

   	// Clear bits with ~(b'11) at corresponding pin
    GPIOPort->OSPEEDR &= ~(0x3 << (2 * PinConfig.PinNumber));
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	793a      	ldrb	r2, [r7, #4]
 800059e:	0052      	lsls	r2, r2, #1
 80005a0:	2103      	movs	r1, #3
 80005a2:	fa01 f202 	lsl.w	r2, r1, r2
 80005a6:	43d2      	mvns	r2, r2
 80005a8:	401a      	ands	r2, r3
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	609a      	str	r2, [r3, #8]

    // Set appropriate bits with the temp register
    GPIOPort->OSPEEDR |= temp;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	689a      	ldr	r2, [r3, #8]
 80005b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005b4:	431a      	orrs	r2, r3
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	609a      	str	r2, [r3, #8]


    ///////////////////////////////////PUPDR Config///////////////////////

    // Configure port mode
    temp = PinConfig.PinPuPdControl << (2 * PinConfig.PinNumber);
 80005ba:	7a3b      	ldrb	r3, [r7, #8]
 80005bc:	461a      	mov	r2, r3
 80005be:	793b      	ldrb	r3, [r7, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Clear bits with ~(b'11) at corresponding pin
    GPIOPort->PUPDR &= ~(0x3 << (2 * PinConfig.PinNumber));
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	793a      	ldrb	r2, [r7, #4]
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	2103      	movs	r1, #3
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	401a      	ands	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	60da      	str	r2, [r3, #12]

    // Set appropriate bits with the temp register
    GPIOPort->PUPDR |= temp;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	68da      	ldr	r2, [r3, #12]
 80005e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e4:	431a      	orrs	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	60da      	str	r2, [r3, #12]
    //////////////////////////////////////////////////////////////////////

    ///////////////////////////////////OPTYPE Config///////////////////////

    // Configure port mode
    temp = PinConfig.OPType << PinConfig.PinNumber;
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	461a      	mov	r2, r3
 80005ee:	793b      	ldrb	r3, [r7, #4]
 80005f0:	fa02 f303 	lsl.w	r3, r2, r3
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24

    // Clear bits with ~(1) at corresponding pin
    GPIOPort->OTYPER &= ~(1 << (PinConfig.PinNumber));
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	793a      	ldrb	r2, [r7, #4]
 80005fc:	4611      	mov	r1, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	408a      	lsls	r2, r1
 8000602:	43d2      	mvns	r2, r2
 8000604:	401a      	ands	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	605a      	str	r2, [r3, #4]

    // Set appropriate bits with the temp register
    GPIOPort->OTYPER |= temp;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000610:	431a      	orrs	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	605a      	str	r2, [r3, #4]
    //////////////////////////////////////////////////////////////////////

    ///////////////////////////////////AFR Config///////////////////////

    // Check if the pin mode equals alt function macro
    if (PinConfig.PinMode == GPIO_PinMode_Alternate) {
 8000616:	797b      	ldrb	r3, [r7, #5]
 8000618:	2b0a      	cmp	r3, #10
 800061a:	d131      	bne.n	8000680 <GPIO_Init+0x228>

        // Bit selection
        uint32_t AFRRegSel = PinConfig.PinNumber / 8;		// Selecting proper AFR register. When pin number >8 then 1, <8 then 0
 800061c:	793b      	ldrb	r3, [r7, #4]
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	b2db      	uxtb	r3, r3
 8000622:	61fb      	str	r3, [r7, #28]
        uint32_t AFRPinPos = PinConfig.PinNumber % 8;		// Selecting proper Pin. When pin number >8 it will be the remainder, when less it will be the pin number
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	61bb      	str	r3, [r7, #24]
        uint8_t AFRBitShift = AFRPinPos * 4;				// Selecting shift amount and targeting specific bits in register
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	75fb      	strb	r3, [r7, #23]

        // Bit shifting
        temp = PinConfig.PinAltFunMode << AFRBitShift;		// Shift the input AFR value accordingly and store in temp
 8000634:	7a7b      	ldrb	r3, [r7, #9]
 8000636:	461a      	mov	r2, r3
 8000638:	7dfb      	ldrb	r3, [r7, #23]
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24

        // Clear the original value in proper register
        uint32_t clearVal = (0xF << AFRBitShift); 			// 0xF is 1111 in binary, shift this into correct location
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	220f      	movs	r2, #15
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	613b      	str	r3, [r7, #16]
        GPIOPort->AFR[AFRRegSel] &= ~(clearVal);			// Invert to 0000 then store into the correct AFR register
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	69fa      	ldr	r2, [r7, #28]
 800064e:	3208      	adds	r2, #8
 8000650:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	43db      	mvns	r3, r3
 8000658:	ea02 0103 	and.w	r1, r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	69fa      	ldr	r2, [r7, #28]
 8000660:	3208      	adds	r2, #8
 8000662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // Set the AFR configuration
        GPIOPort->AFR[AFRRegSel] |= temp;					// Store the configuration into the correct AFR register
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	69fa      	ldr	r2, [r7, #28]
 800066a:	3208      	adds	r2, #8
 800066c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000672:	ea42 0103 	orr.w	r1, r2, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	69fa      	ldr	r2, [r7, #28]
 800067a:	3208      	adds	r2, #8
 800067c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }

    //////////////////////////////////////////////////////////////////////

}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	@ 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40013c00 	.word	0x40013c00
 800068c:	40023800 	.word	0x40023800
 8000690:	40013800 	.word	0x40013800

08000694 <GPIO_ReadFromInputPin>:

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t * GPIOPort, uint8_t ReadPin) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
    
    // Read the value from the IDR register and shift to the proper pin
    uint8_t value = (GPIOPort->IDR >> ReadPin) & 0x01;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	691a      	ldr	r2, [r3, #16]
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	fa22 f303 	lsr.w	r3, r2, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]

    return value;
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
	...

080006c0 <GPIO_ReturnPortNumber>:

uint16_t GPIO_ReturnPortNumber(GPIO_RegDef_t * GPIOPort) {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
    
        // Check the GPIO port and return the port number
        if (GPIOPort == GPIOA) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a08      	ldr	r2, [pc, #32]	@ (80006ec <GPIO_ReturnPortNumber+0x2c>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d101      	bne.n	80006d4 <GPIO_ReturnPortNumber+0x14>
            return PORT_GPIOA;
 80006d0:	2300      	movs	r3, #0
 80006d2:	e006      	b.n	80006e2 <GPIO_ReturnPortNumber+0x22>
        }
        if (GPIOPort == GPIOG) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a06      	ldr	r2, [pc, #24]	@ (80006f0 <GPIO_ReturnPortNumber+0x30>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d101      	bne.n	80006e0 <GPIO_ReturnPortNumber+0x20>
            return PORT_GPIOG;
 80006dc:	2306      	movs	r3, #6
 80006de:	e000      	b.n	80006e2 <GPIO_ReturnPortNumber+0x22>
        }
    
        return 0;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40021800 	.word	0x40021800

080006f4 <LED_Init>:
 */

#include "LED_Driver.h"
#include "GPIO_Driver.h"

void LED_Init(uint8_t LEDPin) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]

	// Instantiate a GPIO_PinConfig_t struct
	GPIO_PinConfig_t GPIOConfig = {0};
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	f8c3 2003 	str.w	r2, [r3, #3]

	switch(LEDPin) {
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b0d      	cmp	r3, #13
 800070e:	d011      	beq.n	8000734 <LED_Init+0x40>
 8000710:	2b0e      	cmp	r3, #14
 8000712:	d11f      	bne.n	8000754 <LED_Init+0x60>

	// Configure for Red LED
	case LED_RED_PIN:

		// Configure the GPIO struct to drive the red LED
		GPIOConfig.PinNumber = LED_RED_PIN;
 8000714:	230e      	movs	r3, #14
 8000716:	723b      	strb	r3, [r7, #8]
		GPIOConfig.PinMode = GPIO_PinMode_GPOut;
 8000718:	2301      	movs	r3, #1
 800071a:	727b      	strb	r3, [r7, #9]
		GPIOConfig.PinSpeed = GPIO_Speed_Medium;
 800071c:	2301      	movs	r3, #1
 800071e:	72fb      	strb	r3, [r7, #11]
		GPIOConfig.PinPuPdControl = GPIO_PUPDR_None;
 8000720:	2300      	movs	r3, #0
 8000722:	733b      	strb	r3, [r7, #12]

		// Initialize the GPIO Pin
		GPIO_Init(GPIOG, GPIOConfig);
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	e893 0006 	ldmia.w	r3, {r1, r2}
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <LED_Init+0x68>)
 800072e:	f7ff fe93 	bl	8000458 <GPIO_Init>

		break;
 8000732:	e00f      	b.n	8000754 <LED_Init+0x60>

	// Configure for Green LED
	case LED_GREEN_PIN:

		// Configure the GPIO struct to drive the green LED
		GPIOConfig.PinNumber = LED_GREEN_PIN;
 8000734:	230d      	movs	r3, #13
 8000736:	723b      	strb	r3, [r7, #8]
		GPIOConfig.PinMode = GPIO_PinMode_GPOut;
 8000738:	2301      	movs	r3, #1
 800073a:	727b      	strb	r3, [r7, #9]
		GPIOConfig.PinSpeed = GPIO_Speed_Medium;
 800073c:	2301      	movs	r3, #1
 800073e:	72fb      	strb	r3, [r7, #11]
		GPIOConfig.PinPuPdControl = GPIO_PUPDR_None;
 8000740:	2300      	movs	r3, #0
 8000742:	733b      	strb	r3, [r7, #12]

		// Initialize the GPIO Pin
		GPIO_Init(GPIOG, GPIOConfig);
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	e893 0006 	ldmia.w	r3, {r1, r2}
 800074c:	4803      	ldr	r0, [pc, #12]	@ (800075c <LED_Init+0x68>)
 800074e:	f7ff fe83 	bl	8000458 <GPIO_Init>

		break;
 8000752:	bf00      	nop
	}
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021800 	.word	0x40021800

08000760 <addSchedulerEvent>:

#include "Scheduler.h"

uint32_t ScheduledEvents = 0;

void addSchedulerEvent(uint32_t event) {
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

    // Add the event to the scheduled events
    ScheduledEvents |= event;
 8000768:	4b05      	ldr	r3, [pc, #20]	@ (8000780 <addSchedulerEvent+0x20>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4313      	orrs	r3, r2
 8000770:	4a03      	ldr	r2, [pc, #12]	@ (8000780 <addSchedulerEvent+0x20>)
 8000772:	6013      	str	r3, [r2, #0]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	20000024 	.word	0x20000024

08000784 <getScheduledEvents>:

    // Remove the event from the scheduled events
    ScheduledEvents &= ~event;
}

uint32_t getScheduledEvents() {
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

    // Return the scheduled events
    return ScheduledEvents;
 8000788:	4b02      	ldr	r3, [pc, #8]	@ (8000794 <getScheduledEvents+0x10>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	20000024 	.word	0x20000024

08000798 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	// Create events variable
	uint32_t eventsToRun = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]

	applicationInit();
 80007a2:	f7ff fd95 	bl	80002d0 <applicationInit>
    /* Loop forever */
	for(;;) {
		// TODO: Suppress FPU warning

		// Store the events to run
		eventsToRun = getScheduledEvents();
 80007a6:	f7ff ffed 	bl	8000784 <getScheduledEvents>
 80007aa:	6078      	str	r0, [r7, #4]

		if (eventsToRun & DELAY_EVENT) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d003      	beq.n	80007be <main+0x26>
		
			// Add a delay
			AppDelay(DELAYMAGNIFIER);
 80007b6:	f64e 2060 	movw	r0, #60000	@ 0xea60
 80007ba:	f7ff fd5d 	bl	8000278 <AppDelay>
		}

		#if USE_INTERRUPT_FOR_BUTTON == 0
		
			// Check if the button event is set
			if (eventsToRun & POLL_BUTTON_EVENT) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0ee      	beq.n	80007a6 <main+0xe>

				// Poll the button
				executeButtonPollingRoutine();
 80007c8:	f7ff fd48 	bl	800025c <executeButtonPollingRoutine>
		eventsToRun = getScheduledEvents();
 80007cc:	e7eb      	b.n	80007a6 <main+0xe>
	...

080007d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d0:	480d      	ldr	r0, [pc, #52]	@ (8000808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d8:	480c      	ldr	r0, [pc, #48]	@ (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007da:	490d      	ldr	r1, [pc, #52]	@ (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e0:	e002      	b.n	80007e8 <LoopCopyDataInit>

080007e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e6:	3304      	adds	r3, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ec:	d3f9      	bcc.n	80007e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f0:	4c0a      	ldr	r4, [pc, #40]	@ (800081c <LoopForever+0x16>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f4:	e001      	b.n	80007fa <LoopFillZerobss>

080007f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f8:	3204      	adds	r2, #4

080007fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007fc:	d3fb      	bcc.n	80007f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007fe:	f000 f811 	bl	8000824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000802:	f7ff ffc9 	bl	8000798 <main>

08000806 <LoopForever>:

LoopForever:
  b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   r0, =_estack
 8000808:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000814:	0800088c 	.word	0x0800088c
  ldr r2, =_sbss
 8000818:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800081c:	20000028 	.word	0x20000028

08000820 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC_IRQHandler>
	...

08000824 <__libc_init_array>:
 8000824:	b570      	push	{r4, r5, r6, lr}
 8000826:	4d0d      	ldr	r5, [pc, #52]	@ (800085c <__libc_init_array+0x38>)
 8000828:	4c0d      	ldr	r4, [pc, #52]	@ (8000860 <__libc_init_array+0x3c>)
 800082a:	1b64      	subs	r4, r4, r5
 800082c:	10a4      	asrs	r4, r4, #2
 800082e:	2600      	movs	r6, #0
 8000830:	42a6      	cmp	r6, r4
 8000832:	d109      	bne.n	8000848 <__libc_init_array+0x24>
 8000834:	4d0b      	ldr	r5, [pc, #44]	@ (8000864 <__libc_init_array+0x40>)
 8000836:	4c0c      	ldr	r4, [pc, #48]	@ (8000868 <__libc_init_array+0x44>)
 8000838:	f000 f818 	bl	800086c <_init>
 800083c:	1b64      	subs	r4, r4, r5
 800083e:	10a4      	asrs	r4, r4, #2
 8000840:	2600      	movs	r6, #0
 8000842:	42a6      	cmp	r6, r4
 8000844:	d105      	bne.n	8000852 <__libc_init_array+0x2e>
 8000846:	bd70      	pop	{r4, r5, r6, pc}
 8000848:	f855 3b04 	ldr.w	r3, [r5], #4
 800084c:	4798      	blx	r3
 800084e:	3601      	adds	r6, #1
 8000850:	e7ee      	b.n	8000830 <__libc_init_array+0xc>
 8000852:	f855 3b04 	ldr.w	r3, [r5], #4
 8000856:	4798      	blx	r3
 8000858:	3601      	adds	r6, #1
 800085a:	e7f2      	b.n	8000842 <__libc_init_array+0x1e>
 800085c:	08000884 	.word	0x08000884
 8000860:	08000884 	.word	0x08000884
 8000864:	08000884 	.word	0x08000884
 8000868:	08000888 	.word	0x08000888

0800086c <_init>:
 800086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086e:	bf00      	nop
 8000870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000872:	bc08      	pop	{r3}
 8000874:	469e      	mov	lr, r3
 8000876:	4770      	bx	lr

08000878 <_fini>:
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	bf00      	nop
 800087c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800087e:	bc08      	pop	{r3}
 8000880:	469e      	mov	lr, r3
 8000882:	4770      	bx	lr
