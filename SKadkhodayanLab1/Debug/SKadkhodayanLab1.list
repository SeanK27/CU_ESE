
SKadkhodayanLab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001e4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00001398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00001398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00001390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000394  08000394  00001394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001398  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY
 13 .debug_info   000002a7  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000017a  00000000  00000000  00001669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  000017e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000057  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000100a  00000000  00000000  000018c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000098f  00000000  00000000  000028d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003d5d  00000000  00000000  00003260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00006fbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000130  00000000  00000000  00007000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00007130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000378 	.word	0x08000378

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000378 	.word	0x08000378

080001ec <AppDelay>:
#define GPIOG_ODR_ADDRESS 0x40021814
#define LED_MODER_OFFSET 28
#define LED_ODR_BIT_OFFSET 14
#define LENGTH_OF_FIRST_NAME 4

void AppDelay(uint32_t time) {
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]

	// Create two arrays to store the name
	char sean[LENGTH_OF_FIRST_NAME] = {'S', 'E', 'A', 'N'};
 80001f4:	4b12      	ldr	r3, [pc, #72]	@ (8000240 <AppDelay+0x54>)
 80001f6:	60fb      	str	r3, [r7, #12]
	[[maybe_unused]] char destinationArray[LENGTH_OF_FIRST_NAME];

	// Iterate through the array to create a crude delay function
	for (int i = 0; i < time; i++) {
 80001f8:	2300      	movs	r3, #0
 80001fa:	617b      	str	r3, [r7, #20]
 80001fc:	e016      	b.n	800022c <AppDelay+0x40>

		for (int j = 0; j < LENGTH_OF_FIRST_NAME; j++) {
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
 8000202:	e00d      	b.n	8000220 <AppDelay+0x34>

			destinationArray[j] = sean[j];
 8000204:	f107 020c 	add.w	r2, r7, #12
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	4413      	add	r3, r2
 800020c:	7819      	ldrb	r1, [r3, #0]
 800020e:	f107 0208 	add.w	r2, r7, #8
 8000212:	693b      	ldr	r3, [r7, #16]
 8000214:	4413      	add	r3, r2
 8000216:	460a      	mov	r2, r1
 8000218:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < LENGTH_OF_FIRST_NAME; j++) {
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	3301      	adds	r3, #1
 800021e:	613b      	str	r3, [r7, #16]
 8000220:	693b      	ldr	r3, [r7, #16]
 8000222:	2b03      	cmp	r3, #3
 8000224:	ddee      	ble.n	8000204 <AppDelay+0x18>
	for (int i = 0; i < time; i++) {
 8000226:	697b      	ldr	r3, [r7, #20]
 8000228:	3301      	adds	r3, #1
 800022a:	617b      	str	r3, [r7, #20]
 800022c:	697b      	ldr	r3, [r7, #20]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	429a      	cmp	r2, r3
 8000232:	d8e4      	bhi.n	80001fe <AppDelay+0x12>
		}
	}
}
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	371c      	adds	r7, #28
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	4e414553 	.word	0x4e414553

08000244 <EnablePeripheralsAndClocks>:

void EnablePeripheralsAndClocks() {
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0

	// Create pointers to access the RCC and MODER registers
	uint32_t * clkPtr = (uint32_t *) GPIOG_RCC_ENABLE_ADDRESS;
 800024a:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <EnablePeripheralsAndClocks+0x3c>)
 800024c:	607b      	str	r3, [r7, #4]
	uint32_t * moderPtr = (uint32_t *) GPIOG_MODER_ADDRESS;
 800024e:	4b0d      	ldr	r3, [pc, #52]	@ (8000284 <EnablePeripheralsAndClocks+0x40>)
 8000250:	603b      	str	r3, [r7, #0]

	// Emable the peripheral clock
	*clkPtr |= (0x1 << GPIOG_AHB1ENR_BIT_OFFSET);
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	601a      	str	r2, [r3, #0]

	// Configure GPIO Pin to properly drive the LED
	*moderPtr &= ~(0x3 << LED_MODER_OFFSET);
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	601a      	str	r2, [r3, #0]
	*moderPtr |= (0x1 << LED_MODER_OFFSET);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	601a      	str	r2, [r3, #0]

}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40023830 	.word	0x40023830
 8000284:	40021800 	.word	0x40021800

08000288 <ToggleRedLED>:
	// Set the LED GPIO pin to LOW
	*gpiogODRPtr &= ~(0x1 << LED_ODR_BIT_OFFSET);

}

void ToggleRedLED() {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0

	// Create a pointer to access the ODR control register
	uint32_t * gpiogODRPtr = (uint32_t*) GPIOG_ODR_ADDRESS;
 800028e:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <ToggleRedLED+0x38>)
 8000290:	607b      	str	r3, [r7, #4]

	// If the pin is high, turn it low, if the pin is low, turn it high
	if (*gpiogODRPtr) {
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	2b00      	cmp	r3, #0
 8000298:	d006      	beq.n	80002a8 <ToggleRedLED+0x20>

		*gpiogODRPtr &= ~(0x1 << LED_ODR_BIT_OFFSET);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	601a      	str	r2, [r3, #0]
	else {

		*gpiogODRPtr |= (0x1 << LED_ODR_BIT_OFFSET);

	}
}
 80002a6:	e005      	b.n	80002b4 <ToggleRedLED+0x2c>
		*gpiogODRPtr |= (0x1 << LED_ODR_BIT_OFFSET);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40021814 	.word	0x40021814

080002c4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	EnablePeripheralsAndClocks();
 80002c8:	f7ff ffbc 	bl	8000244 <EnablePeripheralsAndClocks>

    /* Loop forever */
	for(;;) {
		AppDelay(DEFAULT_DELAY);
 80002cc:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 80002d0:	f7ff ff8c 	bl	80001ec <AppDelay>

		ToggleRedLED();
 80002d4:	f7ff ffd8 	bl	8000288 <ToggleRedLED>
		AppDelay(DEFAULT_DELAY);
 80002d8:	bf00      	nop
 80002da:	e7f7      	b.n	80002cc <main+0x8>

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	@ (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	@ (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffd9 	bl	80002c4 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	4d0d      	ldr	r5, [pc, #52]	@ (8000368 <__libc_init_array+0x38>)
 8000334:	4c0d      	ldr	r4, [pc, #52]	@ (800036c <__libc_init_array+0x3c>)
 8000336:	1b64      	subs	r4, r4, r5
 8000338:	10a4      	asrs	r4, r4, #2
 800033a:	2600      	movs	r6, #0
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	4d0b      	ldr	r5, [pc, #44]	@ (8000370 <__libc_init_array+0x40>)
 8000342:	4c0c      	ldr	r4, [pc, #48]	@ (8000374 <__libc_init_array+0x44>)
 8000344:	f000 f818 	bl	8000378 <_init>
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	10a4      	asrs	r4, r4, #2
 800034c:	2600      	movs	r6, #0
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
