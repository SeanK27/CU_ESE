
SKadkhodayanLab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c78  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e24  08000e2c  00001e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e24  08000e24  00001e2c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e24  08000e24  00001e2c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e24  08000e2c  00001e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e24  08000e24  00001e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e28  08000e28  00001e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001e2c  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e97  00000000  00000000  00001e56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000008b0  00000000  00000000  00003ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002b8  00000000  00000000  000045a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e0  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000190d  00000000  00000000  00004a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002d3c  00000000  00000000  00006345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000052a3  00000000  00000000  00009081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000e324  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000870  00000000  00000000  0000e368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0000ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000e0c 	.word	0x08000e0c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000e0c 	.word	0x08000e0c

080001ec <greenLEDInit>:
#include "ApplicationCode.h"

// Create name array for AppDelay
uint32_t nameArray[NAMELENGTH] = {'S', 'E', 'A', 'N'};

void greenLEDInit() {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

    // Initialize the green LED
    LED_Init(LED_GREEN_PIN);
 80001f0:	200d      	movs	r0, #13
 80001f2:	f000 fbb1 	bl	8000958 <LED_Init>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}

080001fa <redLEDInit>:

void redLEDInit() {
 80001fa:	b580      	push	{r7, lr}
 80001fc:	af00      	add	r7, sp, #0

    // Initialize the red LED
    LED_Init(LED_RED_PIN);
 80001fe:	200e      	movs	r0, #14
 8000200:	f000 fbaa 	bl	8000958 <LED_Init>
}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}

08000208 <toggleGreenLED>:

void toggleGreenLED() {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0

    // Toggle the green LED
    ToggleLED(LED_GREEN_PIN);
 800020c:	200d      	movs	r0, #13
 800020e:	f000 fbd9 	bl	80009c4 <ToggleLED>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <deactivateGreenLED>:

    // Activate the red LED
    GPIO_WriteToOutputPin(GPIOG, LED_RED_PIN, SET);
}

void deactivateGreenLED() {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0

    // Deactivate the green LED
    GPIO_WriteToOutputPin(GPIOG, LED_GREEN_PIN, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	210d      	movs	r1, #13
 8000220:	4802      	ldr	r0, [pc, #8]	@ (800022c <deactivateGreenLED+0x14>)
 8000222:	f000 f957 	bl	80004d4 <GPIO_WriteToOutputPin>
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	40021800 	.word	0x40021800

08000230 <deactivateRedLED>:

void deactivateRedLED() {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0

    // Deactivate the red LED
    GPIO_WriteToOutputPin(GPIOG, LED_RED_PIN, RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	210e      	movs	r1, #14
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <deactivateRedLED+0x14>)
 800023a:	f000 f94b 	bl	80004d4 <GPIO_WriteToOutputPin>
}
 800023e:	bf00      	nop
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	40021800 	.word	0x40021800

08000248 <InitializeUserButton>:

void InitializeUserButton() {
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
    
    // Initialize the user button
	User_Button_Init();
 800024c:	f000 f8b2 	bl	80003b4 <User_Button_Init>
}
 8000250:	bf00      	nop
 8000252:	bd80      	pop	{r7, pc}

08000254 <AppDelay>:
        // Turn off the green LED
        deactivateGreenLED();
    }
}

void AppDelay(uint32_t time) {
 8000254:	b480      	push	{r7}
 8000256:	b087      	sub	sp, #28
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]

	// Create two arrays to store the name
	char sean[NAMELENGTH] = {'S', 'E', 'A', 'N'};
 800025c:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <AppDelay+0x54>)
 800025e:	60fb      	str	r3, [r7, #12]
	[[maybe_unused]] char destinationArray[NAMELENGTH];

	// Iterate through the array to create a crude delay function
	for (int i = 0; i < time; i++) {
 8000260:	2300      	movs	r3, #0
 8000262:	617b      	str	r3, [r7, #20]
 8000264:	e016      	b.n	8000294 <AppDelay+0x40>

		for (int j = 0; j < NAMELENGTH; j++) {
 8000266:	2300      	movs	r3, #0
 8000268:	613b      	str	r3, [r7, #16]
 800026a:	e00d      	b.n	8000288 <AppDelay+0x34>

			destinationArray[j] = sean[j];
 800026c:	f107 020c 	add.w	r2, r7, #12
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	4413      	add	r3, r2
 8000274:	7819      	ldrb	r1, [r3, #0]
 8000276:	f107 0208 	add.w	r2, r7, #8
 800027a:	693b      	ldr	r3, [r7, #16]
 800027c:	4413      	add	r3, r2
 800027e:	460a      	mov	r2, r1
 8000280:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < NAMELENGTH; j++) {
 8000282:	693b      	ldr	r3, [r7, #16]
 8000284:	3301      	adds	r3, #1
 8000286:	613b      	str	r3, [r7, #16]
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	2b03      	cmp	r3, #3
 800028c:	ddee      	ble.n	800026c <AppDelay+0x18>
	for (int i = 0; i < time; i++) {
 800028e:	697b      	ldr	r3, [r7, #20]
 8000290:	3301      	adds	r3, #1
 8000292:	617b      	str	r3, [r7, #20]
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	429a      	cmp	r2, r3
 800029a:	d8e4      	bhi.n	8000266 <AppDelay+0x12>
		}
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	371c      	adds	r7, #28
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	4e414553 	.word	0x4e414553

080002ac <applicationInit>:

void applicationInit() {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

    // Initialize the GPIO clock
	GPIO_ClockControl(GPIOG, ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	480d      	ldr	r0, [pc, #52]	@ (80002e8 <applicationInit+0x3c>)
 80002b4:	f000 f8ce 	bl	8000454 <GPIO_ClockControl>

    // Initialize the GPIOA clock
	User_Button_Enable_Clock();
 80002b8:	f000 f86e 	bl	8000398 <User_Button_Enable_Clock>

    // Initialize the user button
    InitializeUserButton();
 80002bc:	f7ff ffc4 	bl	8000248 <InitializeUserButton>

    // Initialize the green LED
    greenLEDInit();
 80002c0:	f7ff ff94 	bl	80001ec <greenLEDInit>

    // Initialize the red LED
    redLEDInit();
 80002c4:	f7ff ff99 	bl	80001fa <redLEDInit>

    // Deactivate the red LED
    deactivateRedLED();
 80002c8:	f7ff ffb2 	bl	8000230 <deactivateRedLED>

    // Deactivate the green LED
    deactivateGreenLED();
 80002cc:	f7ff ffa4 	bl	8000218 <deactivateGreenLED>

    #if DUAL_TIMER_USAGE == 1

        // Initialize Button as Interrupt
        InitializeUserButtonAsInterrupt();
 80002d0:	f000 f80c 	bl	80002ec <InitializeUserButtonAsInterrupt>

        // Initialize Timer 5
        LED_Timer5_Init();
 80002d4:	f000 fb90 	bl	80009f8 <LED_Timer5_Init>
        // Start Timer 2
        LED_Timer2_Start();
    #endif

    // Add the scheduler event for Red LED
    addSchedulerEvent(RED_TOGGLE_EVENT);
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 fbe7 	bl	8000aac <addSchedulerEvent>

    // Add the scheduler event to delay
    addSchedulerEvent(DELAY_EVENT);
 80002de:	2002      	movs	r0, #2
 80002e0:	f000 fbe4 	bl	8000aac <addSchedulerEvent>

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	40021800 	.word	0x40021800

080002ec <InitializeUserButtonAsInterrupt>:
#if DUAL_TIMER_USAGE == 1

// TODO: Do all the dual timer stuff here


void InitializeUserButtonAsInterrupt() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
    
    // Initialize the user button as an interrupt
    User_Button_Interrupt_Enable();
 80002f0:	f000 f88c 	bl	800040c <User_Button_Interrupt_Enable>
}
 80002f4:	bf00      	nop
 80002f6:	bd80      	pop	{r7, pc}

080002f8 <EXTI0_IRQHandler>:

// Button Interrupt Handler
void EXTI0_IRQHandler() {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

    // Disable the interrupt so it doesn't trigger during execution
    NVIC_Disable_Interrupt(EXTI0_IRQ_NUM);
 80002fc:	2006      	movs	r0, #6
 80002fe:	f000 fac5 	bl	800088c <NVIC_Disable_Interrupt>

    if (User_Button_Is_Pressed()) {
 8000302:	f000 f873 	bl	80003ec <User_Button_Is_Pressed>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d00d      	beq.n	8000328 <EXTI0_IRQHandler+0x30>

    	// Start the button hold timing
        LED_Reset_Timer5();
 800030c:	f000 fbb6 	bl	8000a7c <LED_Reset_Timer5>
        LED_Timer5_Start();
 8000310:	f000 fba0 	bl	8000a54 <LED_Timer5_Start>

        // Clear the pending bit to allow for another interrupt in the future
        NVIC_Clear_Pending_EXTI_Bit(USER_BUTTON_PIN);
 8000314:	2000      	movs	r0, #0
 8000316:	f000 fb09 	bl	800092c <NVIC_Clear_Pending_EXTI_Bit>

        // Clear the pending interrupt in the NVIC register to prevent another
        NVIC_Clear_Pending_Interrupt(EXTI0_IRQ_NUM);
 800031a:	2006      	movs	r0, #6
 800031c:	f000 fade 	bl	80008dc <NVIC_Clear_Pending_Interrupt>

        // Re-enable the interrupt
        NVIC_Enable_Interrupt(EXTI0_IRQ_NUM);
 8000320:	2006      	movs	r0, #6
 8000322:	f000 fa8b 	bl	800083c <NVIC_Enable_Interrupt>
        // Clear the pending interrupt in the NVIC register to prevent another
        NVIC_Clear_Pending_Interrupt(EXTI0_IRQ_NUM);

        // DO NOT re-enable button interrupt as button is no longer needed.
    }
}
 8000326:	e013      	b.n	8000350 <EXTI0_IRQHandler+0x58>
        LED_Timer5_Stop();
 8000328:	f000 fb9e 	bl	8000a68 <LED_Timer5_Stop>
        LED_Timer5_Reconfigure_Auto_Reload(TIM5, Timer_Get_Value(TIM5));
 800032c:	4809      	ldr	r0, [pc, #36]	@ (8000354 <EXTI0_IRQHandler+0x5c>)
 800032e:	f000 fcd3 	bl	8000cd8 <Timer_Get_Value>
 8000332:	4603      	mov	r3, r0
 8000334:	4619      	mov	r1, r3
 8000336:	4807      	ldr	r0, [pc, #28]	@ (8000354 <EXTI0_IRQHandler+0x5c>)
 8000338:	f000 fbaa 	bl	8000a90 <LED_Timer5_Reconfigure_Auto_Reload>
        LED_Reset_Timer5();
 800033c:	f000 fb9e 	bl	8000a7c <LED_Reset_Timer5>
        LED_Timer5_Start();
 8000340:	f000 fb88 	bl	8000a54 <LED_Timer5_Start>
        NVIC_Clear_Pending_EXTI_Bit(USER_BUTTON_PIN);
 8000344:	2000      	movs	r0, #0
 8000346:	f000 faf1 	bl	800092c <NVIC_Clear_Pending_EXTI_Bit>
        NVIC_Clear_Pending_Interrupt(EXTI0_IRQ_NUM);
 800034a:	2006      	movs	r0, #6
 800034c:	f000 fac6 	bl	80008dc <NVIC_Clear_Pending_Interrupt>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40000c00 	.word	0x40000c00

08000358 <TIM5_IRQHandler>:

void TIM5_IRQHandler() {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0

    // Disable the interrupt so it doesn't trigger during execution
    NVIC_Disable_Interrupt(TIM5_IRQ_NUM);
 800035c:	2032      	movs	r0, #50	@ 0x32
 800035e:	f000 fa95 	bl	800088c <NVIC_Disable_Interrupt>

    // Check if the interrupt flag is set
    if (TIM5->SR & (1 << TIM_UIF_BIT)) {
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <TIM5_IRQHandler+0x3c>)
 8000364:	691b      	ldr	r3, [r3, #16]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d007      	beq.n	800037e <TIM5_IRQHandler+0x26>

        // Clear the interrupt flag
        TIM5->SR &= ~(1 << TIM_UIF_BIT);
 800036e:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <TIM5_IRQHandler+0x3c>)
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	4a08      	ldr	r2, [pc, #32]	@ (8000394 <TIM5_IRQHandler+0x3c>)
 8000374:	f023 0301 	bic.w	r3, r3, #1
 8000378:	6113      	str	r3, [r2, #16]

        // Toggle the green LED
        toggleGreenLED();
 800037a:	f7ff ff45 	bl	8000208 <toggleGreenLED>
    }

    // Clear the pending interrupt in the NVIC register to prevent another 
    NVIC_Clear_Pending_Interrupt(TIM5_IRQ_NUM);
 800037e:	2032      	movs	r0, #50	@ 0x32
 8000380:	f000 faac 	bl	80008dc <NVIC_Clear_Pending_Interrupt>

    // Reset the timer
    LED_Reset_Timer5();
 8000384:	f000 fb7a 	bl	8000a7c <LED_Reset_Timer5>

    // Re-enable the interrupt
    NVIC_Enable_Interrupt(TIM5_IRQ_NUM);
 8000388:	2032      	movs	r0, #50	@ 0x32
 800038a:	f000 fa57 	bl	800083c <NVIC_Enable_Interrupt>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40000c00 	.word	0x40000c00

08000398 <User_Button_Enable_Clock>:
#include "Button_Driver.h"
#include <stdbool.h>

GPIO_PinConfig_t GPIOConfig = {0};

void User_Button_Enable_Clock() {
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
    // Enable the clock for the user button
    RCC->AHB1ENR |= (1 << USER_BUTTON_PORT);
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <User_Button_Enable_Clock+0x18>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a03      	ldr	r2, [pc, #12]	@ (80003b0 <User_Button_Enable_Clock+0x18>)
 80003a2:	f043 0301 	orr.w	r3, r3, #1
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40023800 	.word	0x40023800

080003b4 <User_Button_Init>:

void User_Button_Init() {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

    // Instantiate a GPIO_PinConfig_t struct
    GPIOConfig.PinNumber = USER_BUTTON_PIN;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	@ (80003e4 <User_Button_Init+0x30>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
    GPIOConfig.PinMode = GPIO_PinMode_Input;
 80003be:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <User_Button_Init+0x30>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	705a      	strb	r2, [r3, #1]
    GPIOConfig.PinSpeed = GPIO_Speed_Medium;
 80003c4:	4b07      	ldr	r3, [pc, #28]	@ (80003e4 <User_Button_Init+0x30>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	70da      	strb	r2, [r3, #3]
    GPIOConfig.PinPuPdControl = GPIO_PUPDR_PD;
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <User_Button_Init+0x30>)
 80003cc:	220a      	movs	r2, #10
 80003ce:	711a      	strb	r2, [r3, #4]

    // Enable the clock for the user button
    User_Button_Enable_Clock();
 80003d0:	f7ff ffe2 	bl	8000398 <User_Button_Enable_Clock>

    // Initialize the GPIO Pin
    GPIO_Init(GPIOA, GPIOConfig);
 80003d4:	4b03      	ldr	r3, [pc, #12]	@ (80003e4 <User_Button_Init+0x30>)
 80003d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80003da:	4803      	ldr	r0, [pc, #12]	@ (80003e8 <User_Button_Init+0x34>)
 80003dc:	f000 f8b4 	bl	8000548 <GPIO_Init>
}
 80003e0:	bf00      	nop
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000001c 	.word	0x2000001c
 80003e8:	40020000 	.word	0x40020000

080003ec <User_Button_Is_Pressed>:

bool User_Button_Is_Pressed() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0

    // Check if the button is pressed
    if (GPIO_ReadFromInputPin(GPIOA, USER_BUTTON_PIN) == USER_BUTTON_PRESSED) {
 80003f0:	2100      	movs	r1, #0
 80003f2:	4805      	ldr	r0, [pc, #20]	@ (8000408 <User_Button_Is_Pressed+0x1c>)
 80003f4:	f000 f9c6 	bl	8000784 <GPIO_ReadFromInputPin>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d101      	bne.n	8000402 <User_Button_Is_Pressed+0x16>
        return true;
 80003fe:	2301      	movs	r3, #1
 8000400:	e000      	b.n	8000404 <User_Button_Is_Pressed+0x18>
    }
    else {
        return false;
 8000402:	2300      	movs	r3, #0
    }
}
 8000404:	4618      	mov	r0, r3
 8000406:	bd80      	pop	{r7, pc}
 8000408:	40020000 	.word	0x40020000

0800040c <User_Button_Interrupt_Enable>:

void User_Button_Interrupt_Enable() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

    // Instantiate a GPIO_PinConfig_t struct
    GPIOConfig.PinNumber = USER_BUTTON_PIN;
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <User_Button_Interrupt_Enable+0x40>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
    GPIOConfig.PinMode = GPIO_PinMode_Input;
 8000416:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <User_Button_Interrupt_Enable+0x40>)
 8000418:	2200      	movs	r2, #0
 800041a:	705a      	strb	r2, [r3, #1]
    GPIOConfig.PinSpeed = GPIO_Speed_Medium;
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <User_Button_Interrupt_Enable+0x40>)
 800041e:	2201      	movs	r2, #1
 8000420:	70da      	strb	r2, [r3, #3]
    GPIOConfig.PinPuPdControl = GPIO_PUPDR_PD;
 8000422:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <User_Button_Interrupt_Enable+0x40>)
 8000424:	220a      	movs	r2, #10
 8000426:	711a      	strb	r2, [r3, #4]
    GPIOConfig.PinInterruptMode = GPIO_PinInterrupt_RisingFallingEdge;
 8000428:	4b08      	ldr	r3, [pc, #32]	@ (800044c <User_Button_Interrupt_Enable+0x40>)
 800042a:	220b      	movs	r2, #11
 800042c:	719a      	strb	r2, [r3, #6]

    // Enable the clock for the user button
    User_Button_Enable_Clock();
 800042e:	f7ff ffb3 	bl	8000398 <User_Button_Enable_Clock>

    // Initialize the GPIO Pin
    GPIO_Init(GPIOA, GPIOConfig);
 8000432:	4b06      	ldr	r3, [pc, #24]	@ (800044c <User_Button_Interrupt_Enable+0x40>)
 8000434:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000438:	4805      	ldr	r0, [pc, #20]	@ (8000450 <User_Button_Interrupt_Enable+0x44>)
 800043a:	f000 f885 	bl	8000548 <GPIO_Init>

    // Enable the interrupt in the EXTI register
    GPIO_InterruptConfig(6, ENABLE);
 800043e:	2101      	movs	r1, #1
 8000440:	2006      	movs	r0, #6
 8000442:	f000 f9cf 	bl	80007e4 <GPIO_InterruptConfig>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	2000001c 	.word	0x2000001c
 8000450:	40020000 	.word	0x40020000

08000454 <GPIO_ClockControl>:
 *      Author: seank
 */

#include "GPIO_Driver.h"

void GPIO_ClockControl(GPIO_RegDef_t * GPIOPort, uint8_t PinStatus) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	70fb      	strb	r3, [r7, #3]

    // Enable the clock for the GPIO port
    if (PinStatus == ENABLE) {
 8000460:	78fb      	ldrb	r3, [r7, #3]
 8000462:	2b01      	cmp	r3, #1
 8000464:	d113      	bne.n	800048e <GPIO_ClockControl+0x3a>
        
        // Check the GPIO port and enable the clock
        if (GPIOPort == GPIOA) {
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a17      	ldr	r2, [pc, #92]	@ (80004c8 <GPIO_ClockControl+0x74>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d105      	bne.n	800047a <GPIO_ClockControl+0x26>
            ENABLE_AHB1ENR_CLOCK(GPIOA_AHB1ENR_BIT);
 800046e:	4b17      	ldr	r3, [pc, #92]	@ (80004cc <GPIO_ClockControl+0x78>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000472:	4a16      	ldr	r2, [pc, #88]	@ (80004cc <GPIO_ClockControl+0x78>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6313      	str	r3, [r2, #48]	@ 0x30
        }
        
        if (GPIOPort == GPIOG) {
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a14      	ldr	r2, [pc, #80]	@ (80004d0 <GPIO_ClockControl+0x7c>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d105      	bne.n	800048e <GPIO_ClockControl+0x3a>
            ENABLE_AHB1ENR_CLOCK(GPIOG_AHB1ENR_BIT);
 8000482:	4b12      	ldr	r3, [pc, #72]	@ (80004cc <GPIO_ClockControl+0x78>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	4a11      	ldr	r2, [pc, #68]	@ (80004cc <GPIO_ClockControl+0x78>)
 8000488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800048c:	6313      	str	r3, [r2, #48]	@ 0x30
        }
    }

    // Disable the clock for the GPIO port
    if (PinStatus == DISABLE) {
 800048e:	78fb      	ldrb	r3, [r7, #3]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d113      	bne.n	80004bc <GPIO_ClockControl+0x68>

        // Check the GPIO port and disable the clock
        if (GPIOPort == GPIOA) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a0c      	ldr	r2, [pc, #48]	@ (80004c8 <GPIO_ClockControl+0x74>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d105      	bne.n	80004a8 <GPIO_ClockControl+0x54>
            DISABLE_AHB1ENR_CLOCK(GPIOA_AHB1ENR_BIT);
 800049c:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <GPIO_ClockControl+0x78>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4a0a      	ldr	r2, [pc, #40]	@ (80004cc <GPIO_ClockControl+0x78>)
 80004a2:	f023 0301 	bic.w	r3, r3, #1
 80004a6:	6313      	str	r3, [r2, #48]	@ 0x30
        }

        if (GPIOPort == GPIOG) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a09      	ldr	r2, [pc, #36]	@ (80004d0 <GPIO_ClockControl+0x7c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d105      	bne.n	80004bc <GPIO_ClockControl+0x68>
            DISABLE_AHB1ENR_CLOCK(GPIOG_AHB1ENR_BIT);
 80004b0:	4b06      	ldr	r3, [pc, #24]	@ (80004cc <GPIO_ClockControl+0x78>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b4:	4a05      	ldr	r2, [pc, #20]	@ (80004cc <GPIO_ClockControl+0x78>)
 80004b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ba:	6313      	str	r3, [r2, #48]	@ 0x30
        }
    }
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40020000 	.word	0x40020000
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40021800 	.word	0x40021800

080004d4 <GPIO_WriteToOutputPin>:

void GPIO_WriteToOutputPin(GPIO_RegDef_t * GPIOPort, uint8_t WritePin, uint8_t WriteVal) {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
 80004e0:	4613      	mov	r3, r2
 80004e2:	70bb      	strb	r3, [r7, #2]

	// Check the write value
	if (WriteVal == 1) {
 80004e4:	78bb      	ldrb	r3, [r7, #2]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d108      	bne.n	80004fc <GPIO_WriteToOutputPin+0x28>
		GPIOPort->ODR |= (1 << WritePin); // Write 1 to the ODR register and shift to the proper pin
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	78fa      	ldrb	r2, [r7, #3]
 80004f0:	2101      	movs	r1, #1
 80004f2:	fa01 f202 	lsl.w	r2, r1, r2
 80004f6:	431a      	orrs	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	615a      	str	r2, [r3, #20]
	}
	if (WriteVal == 0) {
 80004fc:	78bb      	ldrb	r3, [r7, #2]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d109      	bne.n	8000516 <GPIO_WriteToOutputPin+0x42>
		GPIOPort->ODR &= ~(1 << WritePin); // Write 0 to the ODR register and shift to the proper pin
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	78fa      	ldrb	r2, [r7, #3]
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f202 	lsl.w	r2, r1, r2
 800050e:	43d2      	mvns	r2, r2
 8000510:	401a      	ands	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	615a      	str	r2, [r3, #20]
	}
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <GPIO_ToggleOutputPin>:

void GPIO_ToggleOutputPin(GPIO_RegDef_t * GPIOPort, uint8_t TogglePin) {
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]

	// XOR the corresponding bit, which flips it
	GPIOPort->ODR ^= (1 << TogglePin);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	78fa      	ldrb	r2, [r7, #3]
 8000532:	2101      	movs	r1, #1
 8000534:	fa01 f202 	lsl.w	r2, r1, r2
 8000538:	405a      	eors	r2, r3
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	615a      	str	r2, [r3, #20]
}
 800053e:	bf00      	nop
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <GPIO_Init>:

void GPIO_Init(GPIO_RegDef_t * GPIOPort, GPIO_PinConfig_t PinConfig) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	@ 0x28
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	e883 0006 	stmia.w	r3, {r1, r2}
	///////////////////////////////////MODER Config///////////////////////
	// Create temporary variable
	uint32_t temp;

	// Configure port mode
	temp = PinConfig.PinMode << (2 * PinConfig.PinNumber);
 8000556:	797b      	ldrb	r3, [r7, #5]
 8000558:	461a      	mov	r2, r3
 800055a:	793b      	ldrb	r3, [r7, #4]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	fa02 f303 	lsl.w	r3, r2, r3
 8000562:	627b      	str	r3, [r7, #36]	@ 0x24

	// Clear bits with ~(b'11) at corresponding pin
    GPIOPort->MODER &= ~(0x3 << (2 * PinConfig.PinNumber));
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	793a      	ldrb	r2, [r7, #4]
 800056a:	0052      	lsls	r2, r2, #1
 800056c:	2103      	movs	r1, #3
 800056e:	fa01 f202 	lsl.w	r2, r1, r2
 8000572:	43d2      	mvns	r2, r2
 8000574:	401a      	ands	r2, r3
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	601a      	str	r2, [r3, #0]

    // Set appropriate bits with the temp register
    GPIOPort->MODER |= temp;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000580:	431a      	orrs	r2, r3
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	601a      	str	r2, [r3, #0]
    //////////////////////////////////////////////////////////////////////

    ///////////////////////////////Interrupt Config///////////////////////

    if (PinConfig.PinInterruptMode == GPIO_PinInterrupt_FallingEdge) {
 8000586:	7abb      	ldrb	r3, [r7, #10]
 8000588:	2b0a      	cmp	r3, #10
 800058a:	d114      	bne.n	80005b6 <GPIO_Init+0x6e>

        // Clear the bit in the FTSR register
        EXTI->FTSR |= (1 << PinConfig.PinNumber);
 800058c:	4b7a      	ldr	r3, [pc, #488]	@ (8000778 <GPIO_Init+0x230>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	793a      	ldrb	r2, [r7, #4]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	4611      	mov	r1, r2
 800059a:	4a77      	ldr	r2, [pc, #476]	@ (8000778 <GPIO_Init+0x230>)
 800059c:	430b      	orrs	r3, r1
 800059e:	60d3      	str	r3, [r2, #12]

        // Set the bit in the FTSR register
        EXTI->RTSR &= ~(1 << PinConfig.PinNumber);
 80005a0:	4b75      	ldr	r3, [pc, #468]	@ (8000778 <GPIO_Init+0x230>)
 80005a2:	689b      	ldr	r3, [r3, #8]
 80005a4:	793a      	ldrb	r2, [r7, #4]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	43d2      	mvns	r2, r2
 80005ae:	4611      	mov	r1, r2
 80005b0:	4a71      	ldr	r2, [pc, #452]	@ (8000778 <GPIO_Init+0x230>)
 80005b2:	400b      	ands	r3, r1
 80005b4:	6093      	str	r3, [r2, #8]
    }

    if (PinConfig.PinInterruptMode == GPIO_PinInterrupt_RisingEdge) {
 80005b6:	7abb      	ldrb	r3, [r7, #10]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d114      	bne.n	80005e6 <GPIO_Init+0x9e>

        // Clear the bit in the RTSR register
        EXTI->RTSR |= (1 << PinConfig.PinNumber);
 80005bc:	4b6e      	ldr	r3, [pc, #440]	@ (8000778 <GPIO_Init+0x230>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	793a      	ldrb	r2, [r7, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	4611      	mov	r1, r2
 80005ca:	4a6b      	ldr	r2, [pc, #428]	@ (8000778 <GPIO_Init+0x230>)
 80005cc:	430b      	orrs	r3, r1
 80005ce:	6093      	str	r3, [r2, #8]

        // Set the bit in the RTSR register
        EXTI->FTSR &= ~(1 << PinConfig.PinNumber);
 80005d0:	4b69      	ldr	r3, [pc, #420]	@ (8000778 <GPIO_Init+0x230>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	793a      	ldrb	r2, [r7, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	43d2      	mvns	r2, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a65      	ldr	r2, [pc, #404]	@ (8000778 <GPIO_Init+0x230>)
 80005e2:	400b      	ands	r3, r1
 80005e4:	60d3      	str	r3, [r2, #12]
    }

    if (PinConfig.PinInterruptMode == GPIO_PinInterrupt_RisingFallingEdge) {
 80005e6:	7abb      	ldrb	r3, [r7, #10]
 80005e8:	2b0b      	cmp	r3, #11
 80005ea:	d113      	bne.n	8000614 <GPIO_Init+0xcc>

        // Set the bit in the RTSR register
        EXTI->RTSR |= (1 << PinConfig.PinNumber);
 80005ec:	4b62      	ldr	r3, [pc, #392]	@ (8000778 <GPIO_Init+0x230>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	793a      	ldrb	r2, [r7, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	4611      	mov	r1, r2
 80005fa:	4a5f      	ldr	r2, [pc, #380]	@ (8000778 <GPIO_Init+0x230>)
 80005fc:	430b      	orrs	r3, r1
 80005fe:	6093      	str	r3, [r2, #8]

        // Set the bit in the FTSR register
        EXTI->FTSR |= (1 << PinConfig.PinNumber);
 8000600:	4b5d      	ldr	r3, [pc, #372]	@ (8000778 <GPIO_Init+0x230>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	793a      	ldrb	r2, [r7, #4]
 8000606:	4611      	mov	r1, r2
 8000608:	2201      	movs	r2, #1
 800060a:	408a      	lsls	r2, r1
 800060c:	4611      	mov	r1, r2
 800060e:	4a5a      	ldr	r2, [pc, #360]	@ (8000778 <GPIO_Init+0x230>)
 8000610:	430b      	orrs	r3, r1
 8000612:	60d3      	str	r3, [r2, #12]
    }

    uint8_t tempPin = PinConfig.PinNumber / 4;
 8000614:	793b      	ldrb	r3, [r7, #4]
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t tempPinPos = PinConfig.PinNumber % 4;
 800061c:	793b      	ldrb	r3, [r7, #4]
 800061e:	f003 0303 	and.w	r3, r3, #3
 8000622:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    uint16_t tempPort = GPIO_ReturnPortNumber(GPIOPort);
 8000626:	68f8      	ldr	r0, [r7, #12]
 8000628:	f000 f8c2 	bl	80007b0 <GPIO_ReturnPortNumber>
 800062c:	4603      	mov	r3, r0
 800062e:	843b      	strh	r3, [r7, #32]

    // Enable the clock for the SYSCFG peripheral (must be enabled to configure EXTI)
    ENABLE_SYSCFG_CLOCK();
 8000630:	4b52      	ldr	r3, [pc, #328]	@ (800077c <GPIO_Init+0x234>)
 8000632:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000634:	4a51      	ldr	r2, [pc, #324]	@ (800077c <GPIO_Init+0x234>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6453      	str	r3, [r2, #68]	@ 0x44

    // 
    temp = tempPort << (4 * tempPinPos);        // Each pin is 4 bits, so shift the port number to the correct location
 800063c:	8c3a      	ldrh	r2, [r7, #32]
 800063e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
    // Clear it first
    SYSCFG->EXTICR[tempPin] |= temp;            // Set the SYSCFG register to the proper port (maps the gpio ports to the EXTI lines)
 800064a:	4a4d      	ldr	r2, [pc, #308]	@ (8000780 <GPIO_Init+0x238>)
 800064c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000650:	3302      	adds	r3, #2
 8000652:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000656:	484a      	ldr	r0, [pc, #296]	@ (8000780 <GPIO_Init+0x238>)
 8000658:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800065c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800065e:	430a      	orrs	r2, r1
 8000660:	3302      	adds	r3, #2
 8000662:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

    EXTI->IMR |= (1 << PinConfig.PinNumber);    // Interrupt mask register set to enable the interrupt to trigger
 8000666:	4b44      	ldr	r3, [pc, #272]	@ (8000778 <GPIO_Init+0x230>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	793a      	ldrb	r2, [r7, #4]
 800066c:	4611      	mov	r1, r2
 800066e:	2201      	movs	r2, #1
 8000670:	408a      	lsls	r2, r1
 8000672:	4611      	mov	r1, r2
 8000674:	4a40      	ldr	r2, [pc, #256]	@ (8000778 <GPIO_Init+0x230>)
 8000676:	430b      	orrs	r3, r1
 8000678:	6013      	str	r3, [r2, #0]

    ///////////////////////////////////SPEED Config///////////////////////

   	// Configure port speed
   	temp = PinConfig.PinSpeed << (2 * PinConfig.PinNumber);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	461a      	mov	r2, r3
 800067e:	793b      	ldrb	r3, [r7, #4]
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	fa02 f303 	lsl.w	r3, r2, r3
 8000686:	627b      	str	r3, [r7, #36]	@ 0x24

   	// Clear bits with ~(b'11) at corresponding pin
    GPIOPort->OSPEEDR &= ~(0x3 << (2 * PinConfig.PinNumber));
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	793a      	ldrb	r2, [r7, #4]
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	2103      	movs	r1, #3
 8000692:	fa01 f202 	lsl.w	r2, r1, r2
 8000696:	43d2      	mvns	r2, r2
 8000698:	401a      	ands	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	609a      	str	r2, [r3, #8]

    // Set appropriate bits with the temp register
    GPIOPort->OSPEEDR |= temp;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006a4:	431a      	orrs	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	609a      	str	r2, [r3, #8]


    ///////////////////////////////////PUPDR Config///////////////////////

    // Configure port mode
    temp = PinConfig.PinPuPdControl << (2 * PinConfig.PinNumber);
 80006aa:	7a3b      	ldrb	r3, [r7, #8]
 80006ac:	461a      	mov	r2, r3
 80006ae:	793b      	ldrb	r3, [r7, #4]
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Clear bits with ~(b'11) at corresponding pin
    GPIOPort->PUPDR &= ~(0x3 << (2 * PinConfig.PinNumber));
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	793a      	ldrb	r2, [r7, #4]
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	2103      	movs	r1, #3
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	43d2      	mvns	r2, r2
 80006c8:	401a      	ands	r2, r3
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	60da      	str	r2, [r3, #12]

    // Set appropriate bits with the temp register
    GPIOPort->PUPDR |= temp;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	68da      	ldr	r2, [r3, #12]
 80006d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d4:	431a      	orrs	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	60da      	str	r2, [r3, #12]
    //////////////////////////////////////////////////////////////////////

    ///////////////////////////////////OPTYPE Config///////////////////////

    // Configure port mode
    temp = PinConfig.OPType << PinConfig.PinNumber;
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	461a      	mov	r2, r3
 80006de:	793b      	ldrb	r3, [r7, #4]
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24

    // Clear bits with ~(1) at corresponding pin
    GPIOPort->OTYPER &= ~(1 << (PinConfig.PinNumber));
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	793a      	ldrb	r2, [r7, #4]
 80006ec:	4611      	mov	r1, r2
 80006ee:	2201      	movs	r2, #1
 80006f0:	408a      	lsls	r2, r1
 80006f2:	43d2      	mvns	r2, r2
 80006f4:	401a      	ands	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	605a      	str	r2, [r3, #4]

    // Set appropriate bits with the temp register
    GPIOPort->OTYPER |= temp;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	685a      	ldr	r2, [r3, #4]
 80006fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000700:	431a      	orrs	r2, r3
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	605a      	str	r2, [r3, #4]
    //////////////////////////////////////////////////////////////////////

    ///////////////////////////////////AFR Config///////////////////////

    // Check if the pin mode equals alt function macro
    if (PinConfig.PinMode == GPIO_PinMode_Alternate) {
 8000706:	797b      	ldrb	r3, [r7, #5]
 8000708:	2b0a      	cmp	r3, #10
 800070a:	d131      	bne.n	8000770 <GPIO_Init+0x228>

        // Bit selection
        uint32_t AFRRegSel = PinConfig.PinNumber / 8;		// Selecting proper AFR register. When pin number >8 then 1, <8 then 0
 800070c:	793b      	ldrb	r3, [r7, #4]
 800070e:	08db      	lsrs	r3, r3, #3
 8000710:	b2db      	uxtb	r3, r3
 8000712:	61fb      	str	r3, [r7, #28]
        uint32_t AFRPinPos = PinConfig.PinNumber % 8;		// Selecting proper Pin. When pin number >8 it will be the remainder, when less it will be the pin number
 8000714:	793b      	ldrb	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	61bb      	str	r3, [r7, #24]
        uint8_t AFRBitShift = AFRPinPos * 4;				// Selecting shift amount and targeting specific bits in register
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	75fb      	strb	r3, [r7, #23]

        // Bit shifting
        temp = PinConfig.PinAltFunMode << AFRBitShift;		// Shift the input AFR value accordingly and store in temp
 8000724:	7a7b      	ldrb	r3, [r7, #9]
 8000726:	461a      	mov	r2, r3
 8000728:	7dfb      	ldrb	r3, [r7, #23]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24

        // Clear the original value in proper register
        uint32_t clearVal = (0xF << AFRBitShift); 			// 0xF is 1111 in binary, shift this into correct location
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	220f      	movs	r2, #15
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	613b      	str	r3, [r7, #16]
        GPIOPort->AFR[AFRRegSel] &= ~(clearVal);			// Invert to 0000 then store into the correct AFR register
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	69fa      	ldr	r2, [r7, #28]
 800073e:	3208      	adds	r2, #8
 8000740:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000744:	693b      	ldr	r3, [r7, #16]
 8000746:	43db      	mvns	r3, r3
 8000748:	ea02 0103 	and.w	r1, r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	69fa      	ldr	r2, [r7, #28]
 8000750:	3208      	adds	r2, #8
 8000752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        // Set the AFR configuration
        GPIOPort->AFR[AFRRegSel] |= temp;					// Store the configuration into the correct AFR register
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	69fa      	ldr	r2, [r7, #28]
 800075a:	3208      	adds	r2, #8
 800075c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000762:	ea42 0103 	orr.w	r1, r2, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	69fa      	ldr	r2, [r7, #28]
 800076a:	3208      	adds	r2, #8
 800076c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    }

    //////////////////////////////////////////////////////////////////////

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	@ 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40013c00 	.word	0x40013c00
 800077c:	40023800 	.word	0x40023800
 8000780:	40013800 	.word	0x40013800

08000784 <GPIO_ReadFromInputPin>:

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t * GPIOPort, uint8_t ReadPin) {
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
    
    // Read the value from the IDR register and shift to the proper pin
    uint8_t value = (GPIOPort->IDR >> ReadPin) & 0x01;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691a      	ldr	r2, [r3, #16]
 8000794:	78fb      	ldrb	r3, [r7, #3]
 8000796:	fa22 f303 	lsr.w	r3, r2, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	73fb      	strb	r3, [r7, #15]

    return value;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
	...

080007b0 <GPIO_ReturnPortNumber>:

uint16_t GPIO_ReturnPortNumber(GPIO_RegDef_t * GPIOPort) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    
        // Check the GPIO port and return the port number
        if (GPIOPort == GPIOA) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <GPIO_ReturnPortNumber+0x2c>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d101      	bne.n	80007c4 <GPIO_ReturnPortNumber+0x14>
            return PORT_GPIOA;
 80007c0:	2300      	movs	r3, #0
 80007c2:	e006      	b.n	80007d2 <GPIO_ReturnPortNumber+0x22>
        }
        if (GPIOPort == GPIOG) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a06      	ldr	r2, [pc, #24]	@ (80007e0 <GPIO_ReturnPortNumber+0x30>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d101      	bne.n	80007d0 <GPIO_ReturnPortNumber+0x20>
            return PORT_GPIOG;
 80007cc:	2306      	movs	r3, #6
 80007ce:	e000      	b.n	80007d2 <GPIO_ReturnPortNumber+0x22>
        }
    
        return 0;
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40021800 	.word	0x40021800

080007e4 <GPIO_InterruptConfig>:

void GPIO_InterruptConfig(uint8_t IRQNumber, uint8_t Status) {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]
    
        // Enable the interrupt in the NVIC register
        if (Status == ENABLE) {
 80007f4:	79bb      	ldrb	r3, [r7, #6]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d109      	bne.n	800080e <GPIO_InterruptConfig+0x2a>
        	*NVIC_ISER0 |= (1 << IRQNumber);
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <GPIO_InterruptConfig+0x50>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	79fa      	ldrb	r2, [r7, #7]
 8000800:	2101      	movs	r1, #1
 8000802:	fa01 f202 	lsl.w	r2, r1, r2
 8000806:	4611      	mov	r1, r2
 8000808:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <GPIO_InterruptConfig+0x50>)
 800080a:	430b      	orrs	r3, r1
 800080c:	6013      	str	r3, [r2, #0]
        }
    
        // Disable the interrupt in the NVIC register
        if (Status == DISABLE) {
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d109      	bne.n	8000828 <GPIO_InterruptConfig+0x44>
        	*NVIC_ICER0 |= (1 << IRQNumber);
 8000814:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <GPIO_InterruptConfig+0x54>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	2101      	movs	r1, #1
 800081c:	fa01 f202 	lsl.w	r2, r1, r2
 8000820:	4611      	mov	r1, r2
 8000822:	4a05      	ldr	r2, [pc, #20]	@ (8000838 <GPIO_InterruptConfig+0x54>)
 8000824:	430b      	orrs	r3, r1
 8000826:	6013      	str	r3, [r2, #0]
        }
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	e000e100 	.word	0xe000e100
 8000838:	e000e180 	.word	0xe000e180

0800083c <NVIC_Enable_Interrupt>:
 *      Author: seank
 */

#include "InterruptControl.h"

void NVIC_Enable_Interrupt(uint8_t IRQnum) {
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]

    if (IRQnum < 32) {
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b1f      	cmp	r3, #31
 800084a:	d80a      	bhi.n	8000862 <NVIC_Enable_Interrupt+0x26>
        // Enable the interrupt in the NVIC_ISER0 register
        *NVIC_ISER0 |= (1 << IRQnum);
 800084c:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <NVIC_Enable_Interrupt+0x48>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	79fa      	ldrb	r2, [r7, #7]
 8000852:	2101      	movs	r1, #1
 8000854:	fa01 f202 	lsl.w	r2, r1, r2
 8000858:	4611      	mov	r1, r2
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <NVIC_Enable_Interrupt+0x48>)
 800085c:	430b      	orrs	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
    }
    else {
        // Enable the interrupt in the NVIC_ISER0 register
        *NVIC_ISER1 |= (1 << (IRQnum % 32));
    }
}
 8000860:	e00b      	b.n	800087a <NVIC_Enable_Interrupt+0x3e>
        *NVIC_ISER1 |= (1 << (IRQnum % 32));
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <NVIC_Enable_Interrupt+0x4c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	f002 021f 	and.w	r2, r2, #31
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f202 	lsl.w	r2, r1, r2
 8000872:	4611      	mov	r1, r2
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <NVIC_Enable_Interrupt+0x4c>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6013      	str	r3, [r2, #0]
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000e104 	.word	0xe000e104

0800088c <NVIC_Disable_Interrupt>:

void NVIC_Disable_Interrupt(uint8_t IRQnum) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]

    if (IRQnum < 32) {
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b1f      	cmp	r3, #31
 800089a:	d80a      	bhi.n	80008b2 <NVIC_Disable_Interrupt+0x26>
        // Disable the interrupt in the NVIC_ICER0 register
        *NVIC_ICER0 |= (1 << IRQnum);
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <NVIC_Disable_Interrupt+0x48>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	2101      	movs	r1, #1
 80008a4:	fa01 f202 	lsl.w	r2, r1, r2
 80008a8:	4611      	mov	r1, r2
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <NVIC_Disable_Interrupt+0x48>)
 80008ac:	430b      	orrs	r3, r1
 80008ae:	6013      	str	r3, [r2, #0]
    }
    else {
        // Disable the interrupt in the NVIC_ICER0 register
        *NVIC_ICER1 |= (1 << (IRQnum % 32));
    }
}
 80008b0:	e00b      	b.n	80008ca <NVIC_Disable_Interrupt+0x3e>
        *NVIC_ICER1 |= (1 << (IRQnum % 32));
 80008b2:	4b09      	ldr	r3, [pc, #36]	@ (80008d8 <NVIC_Disable_Interrupt+0x4c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	f002 021f 	and.w	r2, r2, #31
 80008bc:	2101      	movs	r1, #1
 80008be:	fa01 f202 	lsl.w	r2, r1, r2
 80008c2:	4611      	mov	r1, r2
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <NVIC_Disable_Interrupt+0x4c>)
 80008c6:	430b      	orrs	r3, r1
 80008c8:	6013      	str	r3, [r2, #0]
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	e000e180 	.word	0xe000e180
 80008d8:	e000e184 	.word	0xe000e184

080008dc <NVIC_Clear_Pending_Interrupt>:

void NVIC_Clear_Pending_Interrupt(uint8_t IRQnum) {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]

    if (IRQnum < 32) {
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b1f      	cmp	r3, #31
 80008ea:	d80a      	bhi.n	8000902 <NVIC_Clear_Pending_Interrupt+0x26>
        // Clear the pending interrupt in the NVIC_ICPR0 register
        *NVIC_ICPR0 |= (1 << IRQnum);
 80008ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000924 <NVIC_Clear_Pending_Interrupt+0x48>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	79fa      	ldrb	r2, [r7, #7]
 80008f2:	2101      	movs	r1, #1
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	4611      	mov	r1, r2
 80008fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000924 <NVIC_Clear_Pending_Interrupt+0x48>)
 80008fc:	430b      	orrs	r3, r1
 80008fe:	6013      	str	r3, [r2, #0]
    }
    else {
        // Clear the pending interrupt in the NVIC_ICPR0 register
        *NVIC_ICPR1 |= (1 << (IRQnum % 32));
    }
}
 8000900:	e00b      	b.n	800091a <NVIC_Clear_Pending_Interrupt+0x3e>
        *NVIC_ICPR1 |= (1 << (IRQnum % 32));
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <NVIC_Clear_Pending_Interrupt+0x4c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	79fa      	ldrb	r2, [r7, #7]
 8000908:	f002 021f 	and.w	r2, r2, #31
 800090c:	2101      	movs	r1, #1
 800090e:	fa01 f202 	lsl.w	r2, r1, r2
 8000912:	4611      	mov	r1, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	@ (8000928 <NVIC_Clear_Pending_Interrupt+0x4c>)
 8000916:	430b      	orrs	r3, r1
 8000918:	6013      	str	r3, [r2, #0]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	e000e280 	.word	0xe000e280
 8000928:	e000e284 	.word	0xe000e284

0800092c <NVIC_Clear_Pending_EXTI_Bit>:
        // Set the pending interrupt in the NVIC_ISPR0 register
        *NVIC_ISPR1 |= (1 << (IRQnum % 32));
    }
}

void NVIC_Clear_Pending_EXTI_Bit(uint8_t pinNum) {
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]

    // Clear the pending bit in the EXTI register
    EXTI->PR |= (1 << pinNum);
 8000936:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <NVIC_Clear_Pending_EXTI_Bit+0x28>)
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	2101      	movs	r1, #1
 800093e:	fa01 f202 	lsl.w	r2, r1, r2
 8000942:	4611      	mov	r1, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	@ (8000954 <NVIC_Clear_Pending_EXTI_Bit+0x28>)
 8000946:	430b      	orrs	r3, r1
 8000948:	6153      	str	r3, [r2, #20]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	40013c00 	.word	0x40013c00

08000958 <LED_Init>:
 *      Author: seank
 */

#include "LED_Driver.h"

void LED_Init(uint8_t LEDPin) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]

	// Instantiate a GPIO_PinConfig_t struct
	GPIO_PinConfig_t GPIOConfig = {0};
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	f8c3 2003 	str.w	r2, [r3, #3]

	switch(LEDPin) {
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b0d      	cmp	r3, #13
 8000972:	d011      	beq.n	8000998 <LED_Init+0x40>
 8000974:	2b0e      	cmp	r3, #14
 8000976:	d11f      	bne.n	80009b8 <LED_Init+0x60>

	// Configure for Red LED
	case LED_RED_PIN:

		// Configure the GPIO struct to drive the red LED
		GPIOConfig.PinNumber = LED_RED_PIN;
 8000978:	230e      	movs	r3, #14
 800097a:	723b      	strb	r3, [r7, #8]
		GPIOConfig.PinMode = GPIO_PinMode_GPOut;
 800097c:	2301      	movs	r3, #1
 800097e:	727b      	strb	r3, [r7, #9]
		GPIOConfig.PinSpeed = GPIO_Speed_Medium;
 8000980:	2301      	movs	r3, #1
 8000982:	72fb      	strb	r3, [r7, #11]
		GPIOConfig.PinPuPdControl = GPIO_PUPDR_None;
 8000984:	2300      	movs	r3, #0
 8000986:	733b      	strb	r3, [r7, #12]

		// Initialize the GPIO Pin
		GPIO_Init(GPIOG, GPIOConfig);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000990:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <LED_Init+0x68>)
 8000992:	f7ff fdd9 	bl	8000548 <GPIO_Init>

		break;
 8000996:	e00f      	b.n	80009b8 <LED_Init+0x60>

	// Configure for Green LED
	case LED_GREEN_PIN:

		// Configure the GPIO struct to drive the green LED
		GPIOConfig.PinNumber = LED_GREEN_PIN;
 8000998:	230d      	movs	r3, #13
 800099a:	723b      	strb	r3, [r7, #8]
		GPIOConfig.PinMode = GPIO_PinMode_GPOut;
 800099c:	2301      	movs	r3, #1
 800099e:	727b      	strb	r3, [r7, #9]
		GPIOConfig.PinSpeed = GPIO_Speed_Medium;
 80009a0:	2301      	movs	r3, #1
 80009a2:	72fb      	strb	r3, [r7, #11]
		GPIOConfig.PinPuPdControl = GPIO_PUPDR_None;
 80009a4:	2300      	movs	r3, #0
 80009a6:	733b      	strb	r3, [r7, #12]

		// Initialize the GPIO Pin
		GPIO_Init(GPIOG, GPIOConfig);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	e893 0006 	ldmia.w	r3, {r1, r2}
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <LED_Init+0x68>)
 80009b2:	f7ff fdc9 	bl	8000548 <GPIO_Init>

		break;
 80009b6:	bf00      	nop
	}
}
 80009b8:	bf00      	nop
 80009ba:	3710      	adds	r7, #16
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021800 	.word	0x40021800

080009c4 <ToggleLED>:

void ToggleLED(uint8_t LEDPin) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]

	switch(LEDPin) {
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b0d      	cmp	r3, #13
 80009d2:	d006      	beq.n	80009e2 <ToggleLED+0x1e>
 80009d4:	2b0e      	cmp	r3, #14
 80009d6:	d109      	bne.n	80009ec <ToggleLED+0x28>

	// Toggle for Red LED
	case LED_RED_PIN:

		// Toggle Red Pin
		GPIO_ToggleOutputPin(GPIOG, LED_RED_PIN);
 80009d8:	210e      	movs	r1, #14
 80009da:	4806      	ldr	r0, [pc, #24]	@ (80009f4 <ToggleLED+0x30>)
 80009dc:	f7ff fda0 	bl	8000520 <GPIO_ToggleOutputPin>

		break;
 80009e0:	e004      	b.n	80009ec <ToggleLED+0x28>

	case LED_GREEN_PIN:

		// Toggle Green Pin
		GPIO_ToggleOutputPin(GPIOG, LED_GREEN_PIN);
 80009e2:	210d      	movs	r1, #13
 80009e4:	4803      	ldr	r0, [pc, #12]	@ (80009f4 <ToggleLED+0x30>)
 80009e6:	f7ff fd9b 	bl	8000520 <GPIO_ToggleOutputPin>

		break;
 80009ea:	bf00      	nop
	}
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40021800 	.word	0x40021800

080009f8 <LED_Timer5_Init>:

	// Reset Timer 2
	Timer_Reset(TIM2);
}

void LED_Timer5_Init() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0

	// Instantiate a GPTimer_Config_t struct
	GPTimer_Config_t TimerConfig = {0};
 80009fe:	463b      	mov	r3, r7
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]

	// Configure the Timer 5 struct
	TimerConfig.auto_reload_value = TIM5_ARR_VALUE;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <LED_Timer5_Init+0x54>)
 8000a0c:	603b      	str	r3, [r7, #0]
	TimerConfig.clock_division = TIM_CKD_1X;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	717b      	strb	r3, [r7, #5]
	TimerConfig.prescaler = TIM5_PSC_VALUE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	80fb      	strh	r3, [r7, #6]
	TimerConfig.center_aligned_mode = TIM_CMS_EDGE_ALIGNED;
 8000a16:	2300      	movs	r3, #0
 8000a18:	723b      	strb	r3, [r7, #8]
	TimerConfig.auto_reload_preload = TIM_ARPE_NO_BUFFER;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	727b      	strb	r3, [r7, #9]
	TimerConfig.direction = TIM_DIR_UP;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	72bb      	strb	r3, [r7, #10]
	TimerConfig.update_interrupt_enable = TIM_UIE_ENABLE;
 8000a22:	2301      	movs	r3, #1
 8000a24:	72fb      	strb	r3, [r7, #11]
	TimerConfig.one_pulse_mode = TIM_OPM_NOT_STOPPED;
 8000a26:	2300      	movs	r3, #0
 8000a28:	733b      	strb	r3, [r7, #12]

	// Enable Clock for Timer 5
	Timer_Clock_Control(TIM5, ENABLE);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <LED_Timer5_Init+0x58>)
 8000a2e:	f000 f8e9 	bl	8000c04 <Timer_Clock_Control>

	// Initialize Timer 5
	Timer_Init(TIM5, &TimerConfig);
 8000a32:	463b      	mov	r3, r7
 8000a34:	4619      	mov	r1, r3
 8000a36:	4806      	ldr	r0, [pc, #24]	@ (8000a50 <LED_Timer5_Init+0x58>)
 8000a38:	f000 f854 	bl	8000ae4 <Timer_Init>

	// Enable Timer 5 Interrupt
	NVIC_Enable_Interrupt(TIM5_IRQ_NUM);
 8000a3c:	2032      	movs	r0, #50	@ 0x32
 8000a3e:	f7ff fefd 	bl	800083c <NVIC_Enable_Interrupt>
}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	3b9aca00 	.word	0x3b9aca00
 8000a50:	40000c00 	.word	0x40000c00

08000a54 <LED_Timer5_Start>:

void LED_Timer5_Start() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

	// Start Timer 5
	Timer_Start(TIM5);
 8000a58:	4802      	ldr	r0, [pc, #8]	@ (8000a64 <LED_Timer5_Start+0x10>)
 8000a5a:	f000 f911 	bl	8000c80 <Timer_Start>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40000c00 	.word	0x40000c00

08000a68 <LED_Timer5_Stop>:

void LED_Timer5_Stop() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

	// Stop Timer 5
	Timer_Stop(TIM5);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <LED_Timer5_Stop+0x10>)
 8000a6e:	f000 f916 	bl	8000c9e <Timer_Stop>
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40000c00 	.word	0x40000c00

08000a7c <LED_Reset_Timer5>:

void LED_Reset_Timer5() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

	// Reset Timer 5
	Timer_Reset(TIM5);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <LED_Reset_Timer5+0x10>)
 8000a82:	f000 f91b 	bl	8000cbc <Timer_Reset>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40000c00 	.word	0x40000c00

08000a90 <LED_Timer5_Reconfigure_Auto_Reload>:

	// Return the value of Timer 5
	return TimerX->CNT;
}

void LED_Timer5_Reconfigure_Auto_Reload(GPTIMR_RegDef_t * TimerX, uint32_t AutoReloadValue) {
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]

	// Reconfigure the auto-reload value of Timer 5
	TimerX->ARR = AutoReloadValue;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
	...

08000aac <addSchedulerEvent>:

#include "Scheduler.h"

uint32_t ScheduledEvents = 0;

void addSchedulerEvent(uint32_t event) {
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]

    // Add the event to the scheduled events
    ScheduledEvents |= event;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <addSchedulerEvent+0x20>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	4a03      	ldr	r2, [pc, #12]	@ (8000acc <addSchedulerEvent+0x20>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000024 	.word	0x20000024

08000ad0 <getScheduledEvents>:

    // Remove the event from the scheduled events
    ScheduledEvents &= ~event;
}

uint32_t getScheduledEvents() {
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

    // Return the scheduled events
    return ScheduledEvents;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	@ (8000ae0 <getScheduledEvents+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	20000024 	.word	0x20000024

08000ae4 <Timer_Init>:
 *      Author: seank
 */

#include "Timer_Driver.h"

void Timer_Init(GPTIMR_RegDef_t * TimerX, GPTimer_Config_t *TimerConfig) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]

    uint32_t temp;

    // Set the clock division bits
    temp = TimerConfig->clock_division;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	795b      	ldrb	r3, [r3, #5]
 8000af2:	60fb      	str	r3, [r7, #12]
    TimerX->CR1 &= ~(0x3 << CLK_DIV_OFFSET);            // Clear the bits ~(111)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
    TimerX->CR1 |= (temp << CLK_DIV_OFFSET);            // Set the bits
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	601a      	str	r2, [r3, #0]

    // Set the center-aligned mode bits
    temp = TimerConfig->center_aligned_mode;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	7a1b      	ldrb	r3, [r3, #8]
 8000b12:	60fb      	str	r3, [r7, #12]
    TimerX->CR1 &= ~(0x3 << CENTER_ALIGNED_OFFSET);     // Clear the bits ~(111)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 0260 	bic.w	r2, r3, #96	@ 0x60
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	601a      	str	r2, [r3, #0]
    TimerX->CR1 |= (temp << CENTER_ALIGNED_OFFSET);     // Set the bits
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	015b      	lsls	r3, r3, #5
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]

    // Set the counting direction bit
    if (TimerConfig->direction == TIM_DIR_UP) {
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	7a9b      	ldrb	r3, [r3, #10]
 8000b32:	f083 0301 	eor.w	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <Timer_Init+0x66>
        TimerX->CR1 &= ~(1 << TIM_DIR_OFFSET);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f023 0210 	bic.w	r2, r3, #16
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e005      	b.n	8000b56 <Timer_Init+0x72>
    } else {
        TimerX->CR1 |= (1 << TIM_DIR_OFFSET);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f043 0210 	orr.w	r2, r3, #16
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	601a      	str	r2, [r3, #0]
    }

    // Set the auto-reload preload(buffer) bit
    if (TimerConfig->auto_reload_preload == TIM_ARPE_NO_BUFFER) {
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	7a5b      	ldrb	r3, [r3, #9]
 8000b5a:	f083 0301 	eor.w	r3, r3, #1
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <Timer_Init+0x8e>
        TimerX->CR1 &= ~(1 << TIM_ARPE_BUFFER_OFFSET);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e005      	b.n	8000b7e <Timer_Init+0x9a>
    } else {
        TimerX->CR1 |= (1 << TIM_ARPE_BUFFER_OFFSET);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	601a      	str	r2, [r3, #0]
    }

    // Set the one-pulse mode bit
    if (TimerConfig->one_pulse_mode == TIM_OPM_NOT_STOPPED) {
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	7b1b      	ldrb	r3, [r3, #12]
 8000b82:	f083 0301 	eor.w	r3, r3, #1
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d006      	beq.n	8000b9a <Timer_Init+0xb6>
        TimerX->CR1 &= ~(1 << TIM_OPR_OFFSET);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f023 0208 	bic.w	r2, r3, #8
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	e005      	b.n	8000ba6 <Timer_Init+0xc2>
    } else {
        TimerX->CR1 |= (1 << TIM_OPR_OFFSET);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f043 0208 	orr.w	r2, r3, #8
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
    }

    // Set the update interrupt enable bit
    if (TimerConfig->update_interrupt_enable == TIM_UIE_DISABLE) {
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	7adb      	ldrb	r3, [r3, #11]
 8000baa:	f083 0301 	eor.w	r3, r3, #1
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d006      	beq.n	8000bc2 <Timer_Init+0xde>
        TimerX->DIER &= ~(1 << TIM_UIE_OFFSET);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	f023 0201 	bic.w	r2, r3, #1
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	e005      	b.n	8000bce <Timer_Init+0xea>
    } else {
        TimerX->DIER |= (1 << TIM_UIE_OFFSET);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	f043 0201 	orr.w	r2, r3, #1
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60da      	str	r2, [r3, #12]
    }

    // Set the prescaler value
    TimerX->PSC = TimerConfig->prescaler;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	88db      	ldrh	r3, [r3, #6]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28

    // Set the auto-reload value
    TimerX->ARR = TimerConfig->auto_reload_value;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (TimerConfig->update_interrupt_enable == TIM_UIE_ENABLE) {
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	7adb      	ldrb	r3, [r3, #11]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d004      	beq.n	8000bf2 <Timer_Init+0x10e>
        Timer_Interrupt_Control(TimerX, ENABLE);
 8000be8:	2101      	movs	r1, #1
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f880 	bl	8000cf0 <Timer_Interrupt_Control>
    } else {
        Timer_Interrupt_Control(TimerX, DISABLE);
    }
}
 8000bf0:	e003      	b.n	8000bfa <Timer_Init+0x116>
        Timer_Interrupt_Control(TimerX, DISABLE);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f000 f87b 	bl	8000cf0 <Timer_Interrupt_Control>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <Timer_Clock_Control>:

void Timer_Clock_Control(GPTIMR_RegDef_t * TimerX, uint8_t Status) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	70fb      	strb	r3, [r7, #3]
    if (Status == ENABLE) {
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d115      	bne.n	8000c42 <Timer_Clock_Control+0x3e>

        if (TimerX == TIM2) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c1c:	d106      	bne.n	8000c2c <Timer_Clock_Control+0x28>
            ENABLE_TIM2_CLOCK();
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <Timer_Clock_Control+0x74>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	4a15      	ldr	r2, [pc, #84]	@ (8000c78 <Timer_Clock_Control+0x74>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6413      	str	r3, [r2, #64]	@ 0x40
            DISABLE_TIM2_CLOCK();
        } else if (TimerX == TIM5) {
            DISABLE_TIM5_CLOCK();
        }
    }
}
 8000c2a:	e01f      	b.n	8000c6c <Timer_Clock_Control+0x68>
        } else if (TimerX == TIM5) {
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a13      	ldr	r2, [pc, #76]	@ (8000c7c <Timer_Clock_Control+0x78>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d11b      	bne.n	8000c6c <Timer_Clock_Control+0x68>
            ENABLE_TIM5_CLOCK();
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <Timer_Clock_Control+0x74>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a0f      	ldr	r2, [pc, #60]	@ (8000c78 <Timer_Clock_Control+0x74>)
 8000c3a:	f043 0308 	orr.w	r3, r3, #8
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c40:	e014      	b.n	8000c6c <Timer_Clock_Control+0x68>
        if (TimerX == TIM2) {
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c48:	d106      	bne.n	8000c58 <Timer_Clock_Control+0x54>
            DISABLE_TIM2_CLOCK();
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <Timer_Clock_Control+0x74>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <Timer_Clock_Control+0x74>)
 8000c50:	f023 0301 	bic.w	r3, r3, #1
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c56:	e009      	b.n	8000c6c <Timer_Clock_Control+0x68>
        } else if (TimerX == TIM5) {
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <Timer_Clock_Control+0x78>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d105      	bne.n	8000c6c <Timer_Clock_Control+0x68>
            DISABLE_TIM5_CLOCK();
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <Timer_Clock_Control+0x74>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c64:	4a04      	ldr	r2, [pc, #16]	@ (8000c78 <Timer_Clock_Control+0x74>)
 8000c66:	f023 0308 	bic.w	r3, r3, #8
 8000c6a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40000c00 	.word	0x40000c00

08000c80 <Timer_Start>:

void Timer_Start(GPTIMR_RegDef_t * TimerX) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
    TimerX->CR1 |= (1 << TIM_COUNTER_ENABLE_OFFSET);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f043 0201 	orr.w	r2, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	601a      	str	r2, [r3, #0]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <Timer_Stop>:

void Timer_Stop(GPTIMR_RegDef_t * TimerX) {
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
    TimerX->CR1 &= ~(1 << TIM_COUNTER_ENABLE_OFFSET);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f023 0201 	bic.w	r2, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	601a      	str	r2, [r3, #0]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr

08000cbc <Timer_Reset>:

void Timer_Reset(GPTIMR_RegDef_t * TimerX) {
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
    TimerX->CNT &= ~(0xFFFFFFFF);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr

08000cd8 <Timer_Get_Value>:

uint32_t Timer_Get_Auto_Reload_Value(GPTIMR_RegDef_t * TimerX) {
    return TimerX->ARR;
}

uint32_t Timer_Get_Value(GPTIMR_RegDef_t * TimerX) {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    return TimerX->CNT;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
	...

08000cf0 <Timer_Interrupt_Control>:

void Timer_Interrupt_Control(GPTIMR_RegDef_t * TimerX, uint8_t Status) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]

    if (Status == ENABLE) {
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d10e      	bne.n	8000d20 <Timer_Interrupt_Control+0x30>
        if (TimerX == TIM2) {
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d08:	d102      	bne.n	8000d10 <Timer_Interrupt_Control+0x20>
            NVIC_Enable_Interrupt(TIM2_IRQ_NUM);
 8000d0a:	201c      	movs	r0, #28
 8000d0c:	f7ff fd96 	bl	800083c <NVIC_Enable_Interrupt>
        }
        if (TimerX == TIM5) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a0c      	ldr	r2, [pc, #48]	@ (8000d44 <Timer_Interrupt_Control+0x54>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d111      	bne.n	8000d3c <Timer_Interrupt_Control+0x4c>
            NVIC_Enable_Interrupt(TIM5_IRQ_NUM);
 8000d18:	2032      	movs	r0, #50	@ 0x32
 8000d1a:	f7ff fd8f 	bl	800083c <NVIC_Enable_Interrupt>
        }
        if (TimerX == TIM5) {
            NVIC_Disable_Interrupt(TIM5_IRQ_NUM);
        }
    }
 8000d1e:	e00d      	b.n	8000d3c <Timer_Interrupt_Control+0x4c>
        if (TimerX == TIM2) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d26:	d102      	bne.n	8000d2e <Timer_Interrupt_Control+0x3e>
            NVIC_Disable_Interrupt(TIM2_IRQ_NUM);
 8000d28:	201c      	movs	r0, #28
 8000d2a:	f7ff fdaf 	bl	800088c <NVIC_Disable_Interrupt>
        if (TimerX == TIM5) {
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <Timer_Interrupt_Control+0x54>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d102      	bne.n	8000d3c <Timer_Interrupt_Control+0x4c>
            NVIC_Disable_Interrupt(TIM5_IRQ_NUM);
 8000d36:	2032      	movs	r0, #50	@ 0x32
 8000d38:	f7ff fda8 	bl	800088c <NVIC_Disable_Interrupt>
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40000c00 	.word	0x40000c00

08000d48 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
	// Create events variable
	uint32_t eventsToRun = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]

	applicationInit();
 8000d52:	f7ff faab 	bl	80002ac <applicationInit>

    /* Loop forever */
	for(;;) {

		// Store the events to run
		eventsToRun = getScheduledEvents();
 8000d56:	f7ff febb 	bl	8000ad0 <getScheduledEvents>
 8000d5a:	6078      	str	r0, [r7, #4]

		if (eventsToRun & DELAY_EVENT) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0f7      	beq.n	8000d56 <main+0xe>
		
			// Add a delay
			AppDelay(DELAYMAGNIFIER);
 8000d66:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8000d6a:	f7ff fa73 	bl	8000254 <AppDelay>
		eventsToRun = getScheduledEvents();
 8000d6e:	e7f2      	b.n	8000d56 <main+0xe>

08000d70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d70:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d9e:	f000 f811 	bl	8000dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000da2:	f7ff ffd1 	bl	8000d48 <main>

08000da6 <LoopForever>:

LoopForever:
  b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   r0, =_estack
 8000da8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000db4:	08000e2c 	.word	0x08000e2c
  ldr r2, =_sbss
 8000db8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000dbc:	20000028 	.word	0x20000028

08000dc0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <__libc_init_array>:
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8000dfc <__libc_init_array+0x38>)
 8000dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8000e00 <__libc_init_array+0x3c>)
 8000dca:	1b64      	subs	r4, r4, r5
 8000dcc:	10a4      	asrs	r4, r4, #2
 8000dce:	2600      	movs	r6, #0
 8000dd0:	42a6      	cmp	r6, r4
 8000dd2:	d109      	bne.n	8000de8 <__libc_init_array+0x24>
 8000dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8000e04 <__libc_init_array+0x40>)
 8000dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8000e08 <__libc_init_array+0x44>)
 8000dd8:	f000 f818 	bl	8000e0c <_init>
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	10a4      	asrs	r4, r4, #2
 8000de0:	2600      	movs	r6, #0
 8000de2:	42a6      	cmp	r6, r4
 8000de4:	d105      	bne.n	8000df2 <__libc_init_array+0x2e>
 8000de6:	bd70      	pop	{r4, r5, r6, pc}
 8000de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dec:	4798      	blx	r3
 8000dee:	3601      	adds	r6, #1
 8000df0:	e7ee      	b.n	8000dd0 <__libc_init_array+0xc>
 8000df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df6:	4798      	blx	r3
 8000df8:	3601      	adds	r6, #1
 8000dfa:	e7f2      	b.n	8000de2 <__libc_init_array+0x1e>
 8000dfc:	08000e24 	.word	0x08000e24
 8000e00:	08000e24 	.word	0x08000e24
 8000e04:	08000e24 	.word	0x08000e24
 8000e08:	08000e28 	.word	0x08000e28

08000e0c <_init>:
 8000e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e0e:	bf00      	nop
 8000e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e12:	bc08      	pop	{r3}
 8000e14:	469e      	mov	lr, r3
 8000e16:	4770      	bx	lr

08000e18 <_fini>:
 8000e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e1a:	bf00      	nop
 8000e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e1e:	bc08      	pop	{r3}
 8000e20:	469e      	mov	lr, r3
 8000e22:	4770      	bx	lr
